{
    "docs": [
        {
            "location": "/", 
            "text": "Opal Documentation\n\n\nOpal is a full stack framework that makes building digital tools for health care easy.\n\n\nOpal builds deep clinical domain specific functionality on top of\n\nDjango\n, \nAngular\n\nand \nBootstrap\n to help developers quickly build easy to maintain,\nrobust clinical applications.\n\n\nThis is the \ndeveloper documentation\n.\n\n\n\n\nOpal is an entirely open \nsource\n,\nopen \ngovernance\n product, as are the wide library of plugins.\n\n\nFirst Steps\n\n\nIf you're new to Opal, then you'll want to take a look at the\n\nInstallation instructions\n, and then maybe take the\n\ntutorial\n.\n\n\nFull documentation\n\n\nWhile \nTopic guides\n are available for many key areas of Opal,\nthe \nDetailed reference material\n is a work in progress.\n\n\nIf you find any issues or missing areas of this documentation, please do raise it with the\nteam on the \nGithub issue tracker\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#opal-documentation", 
            "text": "Opal is a full stack framework that makes building digital tools for health care easy.  Opal builds deep clinical domain specific functionality on top of Django ,  Angular \nand  Bootstrap  to help developers quickly build easy to maintain,\nrobust clinical applications.  This is the  developer documentation .   Opal is an entirely open  source ,\nopen  governance  product, as are the wide library of plugins.", 
            "title": "Opal Documentation"
        }, 
        {
            "location": "/#first-steps", 
            "text": "If you're new to Opal, then you'll want to take a look at the Installation instructions , and then maybe take the tutorial .", 
            "title": "First Steps"
        }, 
        {
            "location": "/#full-documentation", 
            "text": "While  Topic guides  are available for many key areas of Opal,\nthe  Detailed reference material  is a work in progress.  If you find any issues or missing areas of this documentation, please do raise it with the\nteam on the  Github issue tracker .", 
            "title": "Full documentation"
        }, 
        {
            "location": "/installation/", 
            "text": "Installing Opal\n\n\nInstallation should be simple.\n\n\nStep 1: The Prerequisites\n\n\nBefore you install Opal, you'll need to make sure that you have\n\nPython\n and \npip\n\ninstalled on your system.\n\n\nLet's just check that you do:\n\n\n$ python --version\nPython 2.7.5\n$ pip --version\npip 1.5.6\n\n\n\nStep 2: Use Pip\n\n\nNow we can install Opal using pip:\n\n\n$ pip install opal\n\n\n\nYou should now have the \nopal\n commandline tools installed.\n\n\nLet's just check that you do:\n\n\n$ opal --version\nOpal {{ config.extra.version }}\n\n\n\nStep 3: There is no step 3.\n\n\nMaybe make yourself some tea \n then try the \nTutorial\n instead ?", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installing-opal", 
            "text": "Installation should be simple.", 
            "title": "Installing Opal"
        }, 
        {
            "location": "/installation/#step-1-the-prerequisites", 
            "text": "Before you install Opal, you'll need to make sure that you have Python  and  pip \ninstalled on your system.  Let's just check that you do:  $ python --version\nPython 2.7.5\n$ pip --version\npip 1.5.6", 
            "title": "Step 1: The Prerequisites"
        }, 
        {
            "location": "/installation/#step-2-use-pip", 
            "text": "Now we can install Opal using pip:  $ pip install opal  You should now have the  opal  commandline tools installed.  Let's just check that you do:  $ opal --version\nOpal {{ config.extra.version }}", 
            "title": "Step 2: Use Pip"
        }, 
        {
            "location": "/installation/#step-3-there-is-no-step-3", 
            "text": "Maybe make yourself some tea   then try the  Tutorial  instead ?", 
            "title": "Step 3: There is no step 3."
        }, 
        {
            "location": "/tutorial/", 
            "text": "Writing a clinical service with Opal\n\n\nThis tutorial will walk you through the creation of a new Opal service.\n\n\nThe application we're going to be building will help clinical users to manage the patients on a ward in a hospital.\n\n\n\nAs a Doctor \n\nI want to know what's going on with the patients under my care\n\nSo that I can treat them effectively and safely.\n\n\n\n\nBootstrapping a new project\n\n\nWe assume that you've already \nInstalled Opal\n. You can tell which version of opal is installed\nby running this command\n\n\n$ opal --version\n\n\n\nAt the start a new project, Opal will bootstrap the initial project structure, including\na Django project, some core datamodels (complete with JSON APIs) and a general application structure.\n\n\nFrom the commandline:\n\n\n$ opal startproject mynewapp\n\n\n\nThis will create a mynewapp directory where your new project lives.\n\n\nLet's have a look at what that created for you:\n\n\nmynewapp/                   # Your project directory\n    LICENSE                 # A dummy LICENSE file\n    Procfile                # A procfile ready for deployment to e.g. Heroku\n    README.md\n    manage.py               # Django's manage.py script\n    requirements.txt        # Requirements file ready for your project\n\n    data/                   # A dummy directory for fixtures\n        lookuplists/        # A dummy directory for reference data\n\n    mynewapp/               # The actual python package for your application\n         __init__.py\n        models.py           # Data models for your application\n        settings.py         # Helpfully tweaked Django settings\n        tests.py            # Dummy unittests\n        urls.py             # Django Urlconf\n        wsgi.py\n\n        patient_lists.py    # these create the [lists](/guides/list_views/) for you application\n\n        assets/             # Your static files directory\n        templates/          # Your template directory\n        migrations/         # Your Database migrations directory\n\n        opal.sqlite         # The Sqlite development database\n\n\n\nTest it out\n\n\nThe scaffolding step has generated you a working project - so let's check that out\n\n\ncd mynewapp\npython manage.py runserver\n\n\n\n\nIf you now visit \nhttp://localhost:8000\n in your browser, you should see the standard login screen:\n\n\n\n\nThe scaffolding step created you a superuser, so try logging in with the credentials:\n\n\n\n\nUsername: \nsuper\n\n\nPassword:  \nsuper1\n\n\n\n\nWhen you log in you should be presented with a welcome screen that shows you the three\nareas that are enabled by default - team lists, search and the admin area.\n\n\n\n\nOpal applications are a collection of single page Angular apps that talk to the Django\nserver-side layer via JSON APIs. The team lists and search options here are two examples of\nfront-end Angular single page apps.\n\n\nTeam lists\n\n\nMost clinical services will need at some stage to generate a list of patients - so Opal provides\nthis functionality enabled by default.\n\n\nThe \nlist view\n is a spreadsheet-style list of patients - try navigating\nto the list view and adding a patient with the \nadd patient\n button.\n\n\n\n\nEach column contains a different type of information about a patient, while each\nrow represents one patient.\n\n\n\nStrictly speaking each row is an \nepisode\n\nof care for a patient - but we'll come to that in a second.\n\n\n\n\nThe columns you see initially are just a few of the standard clinical models that come with\nOpal - for instance the Diagnosis model in your new application inherits from a model that\nlooks a lot like this:\n\n\nclass Diagnosis(EpisodeSubrecord):\n    condition         = ForeignKeyOrFreeText(Condition)\n    provisional       = models.BooleanField(default=False)\n    details           = models.CharField(max_length=255, blank=True)\n    date_of_diagnosis = models.DateField(blank=True, null=True)\n\n    class Meta:\n        abstract = True\n\n\n\n\nReference data\n\n\nYou will notice that the condition field has a custom field type - \nForeignKeyOrFreeText\n.\nThis is a custom field type that we use with Opal when we want to use a\n\nLookup List\n.\n\n\nLookup Lists allow us to reference canonical lists of available terminology as a foreign key, while\nalso allowing synonymous terms, and a free text override. That means that we can ensure that\nwe record high quality coded data, while allowing users an easy way to enter unusual edge\ncases.\n\n\nOpal has a referencedata package which is installed by default for new applications.\n\n\nTo see them in action, try adding a new diagnosis to your patient. As you start to type in\nthe condition field, you'll see that the conditions we just imported appear as suggestions:\n\n\n\n\n\nYou can add your own Lookup Lists to your application. \n\nFor more details consult the\n\nReference Data guide\n.\n\n\n\n\nAdd your own data models\n\n\nSo far we've begun to get a sense of the batteries-included parts of Opal,\nbut before long, you're going to need to create models for your own needs.\n\n\nMost Opal models are \nSubrecords\n - they relate to either a patient, or\nan episode (an episode is for example, an admission to hospital).\n\n\nLet's see how that works by creating a TODO list model that is assigned to\nepisodes of care. In your \nmynewapp/models.py\n :\n\n\nclass TODOItem(models.EpisodeSubrecord):\n    job       = fields.CharField(max_length=200)\n    due_date  = fields.DateField(blank=True, null=True)\n    details   = fields.TextField(blank=True, null=True)\n    completed = fields.BooleanField(default=False)\n\n\n\n\nThis is simply a Django model, apart from the parent class \nmodels.EpisodeSubrecord\n\nwhich provides us with some extra functionality:\n\n\n\n\nA relationship to an episode, linked to a patient\n\n\nJSON APIs for creating, retrieving and updating it\n\n\nEnsuring that the Opal Angular layer knows it exists\n\n\nSome metadata fields, like created, updated, created_by, updated_by\n\n\n\n\nNext, we're going to let Opal take care of the boilerplate that we'll need to use this\nmodel in our application. From the commandline:\n\n\npython manage.py scaffold mynewapp\n\n\n\n\nLet's take a look at what that did:\n\n\n\n\nIt created a Django migration\n\n\nIt ran that migration for you\n\n\nIt created a detail template \nmynewapp/templates/records/todo_item.html\n\n\nIt created a form template \nmynewapp/templates/forms/todo_item_forml.html\n\n\n\n\nDetail template\n\n\nThe default detail template simply displays each field on a new line:\n\n\nspan ng-show=\"item.job\"\n[[ item.job ]] \nbr /\n/span\n\n\nspan ng-show=\"item.due_date\"\n[[ item.due_date  | shortDate ]] \nbr /\n/span\n\n\nspan ng-show=\"item.details\"\n[[ item.details ]] \nbr /\n/span\n\n\nspan ng-show=\"item.completed\"\n[[ item.completed ]] \nbr /\n/span\n\n\n\n\nForm template\n\n\nThe default form template will display each field on a new line, with some basic\nappropriate form field types set.\nIt uses the Opal form helpers templatetag library.\n\n\n{% load forms %}\n{% input  field=\nTODOItem.job\n  %}\n{% datepicker  field=\nTODOItem.due_date\n  %}\n{% textarea  field=\nTODOItem.details\n  %}\n{% checkbox  field=\nTODOItem.completed\n  %}\n\n\n\n\nAdding TODOs to our Team Lists\n\n\nNow let's add our TODO list model as a column in the Spreadsheet-like list view.\n\n\nPatient Lists in Opal are subclasses of \nopal.core.patient_lists.PatientList\n, and\nthey live in \npatient_lists.py\n files of our Django apps.\n\n\n\nTechnically these can live anywhere you like - although if you put them in other places\nyou're responsible for making sure that they're imported at startup.\n\nOpal guarantees\nto autodiscover lists in `app.patient_list` modules.\n\n\n\n\nYou can see the basic list that the Opal application scaffold created for you in\n\nyournewapp/patient_lists.py\n.\n\n\nclass AllPatientsList(core.patient_lists.PatientList):\n    display_name = 'All Patients'\n\n    schema = [\n        models.Demographics,\n        models.Diagnosis,\n        models.Treatment\n    ]\n\n    def get_queryset(self):\n        return Episode.objects.all()\n\n\n\n\nThe columns for lists are set in the \nschema\n property of the PatientList class. To add\nour TODO model to the list, just add the model to the schema:\n\n\n    schema = [\n        models.Demographics,\n        models.Diagnosis,\n        models.Treatment,\n        models.TODOItem\n    ]\n\n\n\n\nRefresh the lists page in your browser, and you'll see your new column on the end - add a\nTODO item, noting how we automatically get appropriate form types like datepickers and\ncheckboxes.\n\n\nYou can edit any entry in the list view by double clicking on it.\n\n\nTweaking the default scaffolding\n\n\nThe scaffolding templates are only really supposed to get you started - you'll often\nneed to tweak the templates they generate with whatever logic makes sense for your\napplication.\n\n\nFor us, you'll notice that the value of \nTODOItem.completed\n simply displays as false -\nwhich is not particularly useful. So let's update that using the Opal\n\nBoxed filter\n. In \nmynewapp/templates/records/todo_item.html\n\nchange the last \nspan\n to look like this:\n\n\nspan ng-show=\nitem.completed\n\n  [[ item.completed | boxed ]]\n\n/span\n\n\n\n\n\nSet an Icon for your model\n\n\nYou'll notice that your new column is the only one without an icon - we set the icon by\nadding the following property to your \nTODOItem\n class:\n\n\n    _icon = 'fa fa-th-list'\n\n\n\nSome other batteries included\n\n\nLet's take a look at some of the other core functionality that we now have out of the box:\n\n\nSearch\n\n\nBy default, we also enable the search module, which allows you to search by patient name\nor unique identifier:\n\n\n\n\nDetail views\n\n\nWe also have a detail view for our patients, which you can access via search results. This\nview will typically allow for a more detailed display and editing of all the events\ncomprising a patient's care than is available on the list page.\n\n\n\n\nJSON APIs\n\n\nOpal automatically creates self-documenting JSON APIs for your interacting with the data\nin your application. You can inspect these APIs interactively at the url:\n\n\nhttp://localhost:8000/api/v0.1/\n\n\n\n\n\nWhat next?\n\n\nThis is just a glimpse at the full range of functionality that comes with Opal - there is\nmuch more to discover in the \nTopic Guides\n.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#writing-a-clinical-service-with-opal", 
            "text": "This tutorial will walk you through the creation of a new Opal service.  The application we're going to be building will help clinical users to manage the patients on a ward in a hospital.  \nAs a Doctor  \nI want to know what's going on with the patients under my care \nSo that I can treat them effectively and safely.", 
            "title": "Writing a clinical service with Opal"
        }, 
        {
            "location": "/tutorial/#bootstrapping-a-new-project", 
            "text": "We assume that you've already  Installed Opal . You can tell which version of opal is installed\nby running this command  $ opal --version  At the start a new project, Opal will bootstrap the initial project structure, including\na Django project, some core datamodels (complete with JSON APIs) and a general application structure.  From the commandline:  $ opal startproject mynewapp  This will create a mynewapp directory where your new project lives.  Let's have a look at what that created for you:  mynewapp/                   # Your project directory\n    LICENSE                 # A dummy LICENSE file\n    Procfile                # A procfile ready for deployment to e.g. Heroku\n    README.md\n    manage.py               # Django's manage.py script\n    requirements.txt        # Requirements file ready for your project\n\n    data/                   # A dummy directory for fixtures\n        lookuplists/        # A dummy directory for reference data\n\n    mynewapp/               # The actual python package for your application\n         __init__.py\n        models.py           # Data models for your application\n        settings.py         # Helpfully tweaked Django settings\n        tests.py            # Dummy unittests\n        urls.py             # Django Urlconf\n        wsgi.py\n\n        patient_lists.py    # these create the [lists](/guides/list_views/) for you application\n\n        assets/             # Your static files directory\n        templates/          # Your template directory\n        migrations/         # Your Database migrations directory\n\n        opal.sqlite         # The Sqlite development database", 
            "title": "Bootstrapping a new project"
        }, 
        {
            "location": "/tutorial/#test-it-out", 
            "text": "The scaffolding step has generated you a working project - so let's check that out  cd mynewapp\npython manage.py runserver  If you now visit  http://localhost:8000  in your browser, you should see the standard login screen:   The scaffolding step created you a superuser, so try logging in with the credentials:   Username:  super  Password:   super1   When you log in you should be presented with a welcome screen that shows you the three\nareas that are enabled by default - team lists, search and the admin area.   Opal applications are a collection of single page Angular apps that talk to the Django\nserver-side layer via JSON APIs. The team lists and search options here are two examples of\nfront-end Angular single page apps.", 
            "title": "Test it out"
        }, 
        {
            "location": "/tutorial/#team-lists", 
            "text": "Most clinical services will need at some stage to generate a list of patients - so Opal provides\nthis functionality enabled by default.  The  list view  is a spreadsheet-style list of patients - try navigating\nto the list view and adding a patient with the  add patient  button.   Each column contains a different type of information about a patient, while each\nrow represents one patient.  \nStrictly speaking each row is an  episode \nof care for a patient - but we'll come to that in a second.  The columns you see initially are just a few of the standard clinical models that come with\nOpal - for instance the Diagnosis model in your new application inherits from a model that\nlooks a lot like this:  class Diagnosis(EpisodeSubrecord):\n    condition         = ForeignKeyOrFreeText(Condition)\n    provisional       = models.BooleanField(default=False)\n    details           = models.CharField(max_length=255, blank=True)\n    date_of_diagnosis = models.DateField(blank=True, null=True)\n\n    class Meta:\n        abstract = True", 
            "title": "Team lists"
        }, 
        {
            "location": "/tutorial/#reference-data", 
            "text": "You will notice that the condition field has a custom field type -  ForeignKeyOrFreeText .\nThis is a custom field type that we use with Opal when we want to use a Lookup List .  Lookup Lists allow us to reference canonical lists of available terminology as a foreign key, while\nalso allowing synonymous terms, and a free text override. That means that we can ensure that\nwe record high quality coded data, while allowing users an easy way to enter unusual edge\ncases.  Opal has a referencedata package which is installed by default for new applications.  To see them in action, try adding a new diagnosis to your patient. As you start to type in\nthe condition field, you'll see that the conditions we just imported appear as suggestions:   \nYou can add your own Lookup Lists to your application.  \nFor more details consult the Reference Data guide .", 
            "title": "Reference data"
        }, 
        {
            "location": "/tutorial/#add-your-own-data-models", 
            "text": "So far we've begun to get a sense of the batteries-included parts of Opal,\nbut before long, you're going to need to create models for your own needs.  Most Opal models are  Subrecords  - they relate to either a patient, or\nan episode (an episode is for example, an admission to hospital).  Let's see how that works by creating a TODO list model that is assigned to\nepisodes of care. In your  mynewapp/models.py  :  class TODOItem(models.EpisodeSubrecord):\n    job       = fields.CharField(max_length=200)\n    due_date  = fields.DateField(blank=True, null=True)\n    details   = fields.TextField(blank=True, null=True)\n    completed = fields.BooleanField(default=False)  This is simply a Django model, apart from the parent class  models.EpisodeSubrecord \nwhich provides us with some extra functionality:   A relationship to an episode, linked to a patient  JSON APIs for creating, retrieving and updating it  Ensuring that the Opal Angular layer knows it exists  Some metadata fields, like created, updated, created_by, updated_by   Next, we're going to let Opal take care of the boilerplate that we'll need to use this\nmodel in our application. From the commandline:  python manage.py scaffold mynewapp  Let's take a look at what that did:   It created a Django migration  It ran that migration for you  It created a detail template  mynewapp/templates/records/todo_item.html  It created a form template  mynewapp/templates/forms/todo_item_forml.html", 
            "title": "Add your own data models"
        }, 
        {
            "location": "/tutorial/#detail-template", 
            "text": "The default detail template simply displays each field on a new line:  span ng-show=\"item.job\" [[ item.job ]]  br / /span  span ng-show=\"item.due_date\" [[ item.due_date  | shortDate ]]  br / /span  span ng-show=\"item.details\" [[ item.details ]]  br / /span  span ng-show=\"item.completed\" [[ item.completed ]]  br / /span", 
            "title": "Detail template"
        }, 
        {
            "location": "/tutorial/#form-template", 
            "text": "The default form template will display each field on a new line, with some basic\nappropriate form field types set.\nIt uses the Opal form helpers templatetag library.  {% load forms %}\n{% input  field= TODOItem.job   %}\n{% datepicker  field= TODOItem.due_date   %}\n{% textarea  field= TODOItem.details   %}\n{% checkbox  field= TODOItem.completed   %}", 
            "title": "Form template"
        }, 
        {
            "location": "/tutorial/#adding-todos-to-our-team-lists", 
            "text": "Now let's add our TODO list model as a column in the Spreadsheet-like list view.  Patient Lists in Opal are subclasses of  opal.core.patient_lists.PatientList , and\nthey live in  patient_lists.py  files of our Django apps.  \nTechnically these can live anywhere you like - although if you put them in other places\nyou're responsible for making sure that they're imported at startup. Opal guarantees\nto autodiscover lists in `app.patient_list` modules.  You can see the basic list that the Opal application scaffold created for you in yournewapp/patient_lists.py .  class AllPatientsList(core.patient_lists.PatientList):\n    display_name = 'All Patients'\n\n    schema = [\n        models.Demographics,\n        models.Diagnosis,\n        models.Treatment\n    ]\n\n    def get_queryset(self):\n        return Episode.objects.all()  The columns for lists are set in the  schema  property of the PatientList class. To add\nour TODO model to the list, just add the model to the schema:      schema = [\n        models.Demographics,\n        models.Diagnosis,\n        models.Treatment,\n        models.TODOItem\n    ]  Refresh the lists page in your browser, and you'll see your new column on the end - add a\nTODO item, noting how we automatically get appropriate form types like datepickers and\ncheckboxes.  You can edit any entry in the list view by double clicking on it.", 
            "title": "Adding TODOs to our Team Lists"
        }, 
        {
            "location": "/tutorial/#tweaking-the-default-scaffolding", 
            "text": "The scaffolding templates are only really supposed to get you started - you'll often\nneed to tweak the templates they generate with whatever logic makes sense for your\napplication.  For us, you'll notice that the value of  TODOItem.completed  simply displays as false -\nwhich is not particularly useful. So let's update that using the Opal Boxed filter . In  mynewapp/templates/records/todo_item.html \nchange the last  span  to look like this:  span ng-show= item.completed \n  [[ item.completed | boxed ]] /span", 
            "title": "Tweaking the default scaffolding"
        }, 
        {
            "location": "/tutorial/#set-an-icon-for-your-model", 
            "text": "You'll notice that your new column is the only one without an icon - we set the icon by\nadding the following property to your  TODOItem  class:      _icon = 'fa fa-th-list'", 
            "title": "Set an Icon for your model"
        }, 
        {
            "location": "/tutorial/#some-other-batteries-included", 
            "text": "Let's take a look at some of the other core functionality that we now have out of the box:", 
            "title": "Some other batteries included"
        }, 
        {
            "location": "/tutorial/#search", 
            "text": "By default, we also enable the search module, which allows you to search by patient name\nor unique identifier:", 
            "title": "Search"
        }, 
        {
            "location": "/tutorial/#detail-views", 
            "text": "We also have a detail view for our patients, which you can access via search results. This\nview will typically allow for a more detailed display and editing of all the events\ncomprising a patient's care than is available on the list page.", 
            "title": "Detail views"
        }, 
        {
            "location": "/tutorial/#json-apis", 
            "text": "Opal automatically creates self-documenting JSON APIs for your interacting with the data\nin your application. You can inspect these APIs interactively at the url:  http://localhost:8000/api/v0.1/", 
            "title": "JSON APIs"
        }, 
        {
            "location": "/tutorial/#what-next", 
            "text": "This is just a glimpse at the full range of functionality that comes with Opal - there is\nmuch more to discover in the  Topic Guides .", 
            "title": "What next?"
        }, 
        {
            "location": "/tutorials/pathway_tutorial/", 
            "text": "Tutorial: Creating forms with Opal\n\n\nIn this section we walk you through creating a simple Pathway.\n\n\nYour First Pathway\n\n\nPathways are an Opal\n\nDiscoverable feature\n -\nthis means that Opal will automatically load any Pathways defined in a python module\nnamed \npathways.py\n inside a Django App.\n\n\nIndividual pathways are defined by subclassing a \nPathway\n class. You must set at least the\ndisplay name, and will\noften want to also set a slug.\n\n\nOut of the box, pathways ships with two types of pathways. A page pathway, a whole bunch of\nmodel forms on the same page, and a wizard pathway, a bunch of steps where the next step is\nonly revealed after the step before it has been completed.\n\n\nLet's look at a page pathway definition.\n\n\n# yourapp/pathways.py\nfrom opal.core import pathway\n\nclass MyPathway(pathway.PagePathway):\n    display_name = 'My Awesome Pathway'\n    slug         = 'awesomest_pathway'\n\n\n\n\nTaking Our First Steps\n\n\nA Pathway should have at least one \nStep\n - a section within the form.\n\n\nSteps\n are defined on the pathway class using the \nPathway.steps\n tuple.\n\n\nfrom opal.core import pathway\nfrom myapp import models\n\nclass SimplePathway(pathway.PagePathway):\n    display_name = 'A simple pathway'\n    steps        = (\n        pathways.Step(model=models.PastMedicalHistory)\n    )\n\n\n\n\nModel Steps\n\n\nA common case is for steps to be simply a single Opal \nSubrecord\n using the subrecord form template.\n\n\nIn fact we can simply add Opal \nSubrecords\n to the \nsteps\n tuple to achieve the same effect.\n\n\nFor instance, to create a pathway with three steps to record a\npatient's allergies, treatment and past medical history, we could use the following:\n\n\nfrom opal.core import pathway\nfrom myapp import models\n\nclass SimplePathway(pathway.PagePathway):\n    display_name = 'A simple pathway'\n    slug         = 'simples'\n    steps        = (\n        models.Allergies,\n        models.Treatment,\n        models.PastMedicalHistory\n    )\n\n\n\n\nPathways is smart enough to provide a single form step pathway if the model is a \nsingleton model\n, or a pathway that allows a user to edit/add/remove multiple models if its not a singleton model.\n\n\nViewing The Pathway\n\n\nThis pathway is then available from e.g. \nhttp://localhost:8000/pathway/#/simples\n.", 
            "title": "Pathway tutorial"
        }, 
        {
            "location": "/tutorials/pathway_tutorial/#tutorial-creating-forms-with-opal", 
            "text": "In this section we walk you through creating a simple Pathway.", 
            "title": "Tutorial: Creating forms with Opal"
        }, 
        {
            "location": "/tutorials/pathway_tutorial/#your-first-pathway", 
            "text": "Pathways are an Opal Discoverable feature  -\nthis means that Opal will automatically load any Pathways defined in a python module\nnamed  pathways.py  inside a Django App.  Individual pathways are defined by subclassing a  Pathway  class. You must set at least the\ndisplay name, and will\noften want to also set a slug.  Out of the box, pathways ships with two types of pathways. A page pathway, a whole bunch of\nmodel forms on the same page, and a wizard pathway, a bunch of steps where the next step is\nonly revealed after the step before it has been completed.  Let's look at a page pathway definition.  # yourapp/pathways.py\nfrom opal.core import pathway\n\nclass MyPathway(pathway.PagePathway):\n    display_name = 'My Awesome Pathway'\n    slug         = 'awesomest_pathway'", 
            "title": "Your First Pathway"
        }, 
        {
            "location": "/tutorials/pathway_tutorial/#taking-our-first-steps", 
            "text": "A Pathway should have at least one  Step  - a section within the form.  Steps  are defined on the pathway class using the  Pathway.steps  tuple.  from opal.core import pathway\nfrom myapp import models\n\nclass SimplePathway(pathway.PagePathway):\n    display_name = 'A simple pathway'\n    steps        = (\n        pathways.Step(model=models.PastMedicalHistory)\n    )", 
            "title": "Taking Our First Steps"
        }, 
        {
            "location": "/tutorials/pathway_tutorial/#model-steps", 
            "text": "A common case is for steps to be simply a single Opal  Subrecord  using the subrecord form template.  In fact we can simply add Opal  Subrecords  to the  steps  tuple to achieve the same effect.  For instance, to create a pathway with three steps to record a\npatient's allergies, treatment and past medical history, we could use the following:  from opal.core import pathway\nfrom myapp import models\n\nclass SimplePathway(pathway.PagePathway):\n    display_name = 'A simple pathway'\n    slug         = 'simples'\n    steps        = (\n        models.Allergies,\n        models.Treatment,\n        models.PastMedicalHistory\n    )  Pathways is smart enough to provide a single form step pathway if the model is a  singleton model , or a pathway that allows a user to edit/add/remove multiple models if its not a singleton model.", 
            "title": "Model Steps"
        }, 
        {
            "location": "/tutorials/pathway_tutorial/#viewing-the-pathway", 
            "text": "This pathway is then available from e.g.  http://localhost:8000/pathway/#/simples .", 
            "title": "Viewing The Pathway"
        }, 
        {
            "location": "/tutorials/theming_tutorial/", 
            "text": "Customising the design of your application\n\n\nTutorial WIP\n\n\nChanging the default logo and favicon\n\n\nWe can change the logo and favicon of our application by changing settings.\nCreate a logo and a favicon, place them in \n./yourapp/static/img/\n and then\nupdate the following settings:\n\n\n# ./yourapp/settings.py\n\nOPAL_FAVICON_PATH = 'img/yourapp.favicon.ico'\nOPAL_LOGO_PATH    = 'img/yourapp.logo.png'\n\n\n\n\nSome platforms require favicons to be .ico format, however .png also works\n\n\nAdding your own CSS file to change the default colours, fonts, layouts and more\n\n\nTo change the CSS used for the Opal interface, first create a CSS file with your custom application styling:\n\n\n/* ./yourapp/static/yourapp.css */\nbody {\n  /*main text style*/\n  font-family: 'Franklin Gothic Book', Arial;\n}\n\n.bg-primary {\n  background-color: #25408F; }\n\n.bg-secondary {\n  background-color: #0084FF; }\n\n\n\n\nThen include this CSS file in your Application definition:\n\n\n# ./yourapp/__init__.py\nclass Application(application.OpalApplication):\n\n    styles = [\n        \ncss/yourapp.css\n\n    ]\n\n\n\n\nMany of the classes are standard Bootstrap CSS classes, which can be identified in the Bootstrap documentation, or via the inspector in your browser's developer tools.\n\n\nKey overrides and a .sass template to reset key colours\n\n\nWIP\n\n\nChanging the layout of the application\n\n\nWIP\n\n\nBundling as a standalone theme\n\n\nWIP", 
            "title": "Theming tutorial"
        }, 
        {
            "location": "/tutorials/theming_tutorial/#customising-the-design-of-your-application", 
            "text": "Tutorial WIP", 
            "title": "Customising the design of your application"
        }, 
        {
            "location": "/tutorials/theming_tutorial/#changing-the-default-logo-and-favicon", 
            "text": "We can change the logo and favicon of our application by changing settings.\nCreate a logo and a favicon, place them in  ./yourapp/static/img/  and then\nupdate the following settings:  # ./yourapp/settings.py\n\nOPAL_FAVICON_PATH = 'img/yourapp.favicon.ico'\nOPAL_LOGO_PATH    = 'img/yourapp.logo.png'  Some platforms require favicons to be .ico format, however .png also works", 
            "title": "Changing the default logo and favicon"
        }, 
        {
            "location": "/tutorials/theming_tutorial/#adding-your-own-css-file-to-change-the-default-colours-fonts-layouts-and-more", 
            "text": "To change the CSS used for the Opal interface, first create a CSS file with your custom application styling:  /* ./yourapp/static/yourapp.css */\nbody {\n  /*main text style*/\n  font-family: 'Franklin Gothic Book', Arial;\n}\n\n.bg-primary {\n  background-color: #25408F; }\n\n.bg-secondary {\n  background-color: #0084FF; }  Then include this CSS file in your Application definition:  # ./yourapp/__init__.py\nclass Application(application.OpalApplication):\n\n    styles = [\n         css/yourapp.css \n    ]  Many of the classes are standard Bootstrap CSS classes, which can be identified in the Bootstrap documentation, or via the inspector in your browser's developer tools.", 
            "title": "Adding your own CSS file to change the default colours, fonts, layouts and more"
        }, 
        {
            "location": "/tutorials/theming_tutorial/#key-overrides-and-a-sass-template-to-reset-key-colours", 
            "text": "WIP", 
            "title": "Key overrides and a .sass template to reset key colours"
        }, 
        {
            "location": "/tutorials/theming_tutorial/#changing-the-layout-of-the-application", 
            "text": "WIP", 
            "title": "Changing the layout of the application"
        }, 
        {
            "location": "/tutorials/theming_tutorial/#bundling-as-a-standalone-theme", 
            "text": "WIP", 
            "title": "Bundling as a standalone theme"
        }, 
        {
            "location": "/guides/topic-guides/", 
            "text": "Opal Guides\n\n\nA list of all available topic guides.\n\n\nOpal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpal - Applications, Plugins\n\n\nHow Opal components hang together\n\n\n\n\n\n\nCommand line tool\n\n\nRunning admin tasks from the command line\n\n\n\n\n\n\nDiscoverable\n\n\nDesign patterns and library for creating easily reusable features\n\n\n\n\n\n\nPlugins\n\n\nAvailable interfaces for Opal plugins\n\n\n\n\n\n\nList of Plugins\n\n\nA list of available high quality plugins\n\n\n\n\n\n\n\n\nData and Business Logic\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Model\n\n\nHow Opal models clinical reality\n\n\n\n\n\n\nEpisodes\n\n\nOpal Episodes and how to customise them\n\n\n\n\n\n\nCore Clinical Model\n\n\nThe core clinical data model available to Opal applications\n\n\n\n\n\n\nReference data\n\n\nCanonical coded terms and reference data\n\n\n\n\n\n\nApp metadata\n\n\nWorking with Metadata on the front end\n\n\n\n\n\n\nFlow\n\n\nHooks to customise key moments in a patient's flow through a clinical service\n\n\n\n\n\n\nAngular models\n\n\nWorking with Clinical data in Angular\n\n\n\n\n\n\nRoles \n Permissions\n\n\nHow we handle authorization in Opal\n\n\n\n\n\n\nTagging\n\n\nTagging episodes in Opal\n\n\n\n\n\n\nJSON API\n\n\nThe Opal JSON API\n\n\n\n\n\n\n\n\nPresentation and templating\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTheming\n\n\nHow to theme your application\n\n\n\n\n\n\nTemplates\n\n\nServer and client side templating\n\n\n\n\n\n\nDefault Context Processors\n\n\nOpal Django context processors\n\n\n\n\n\n\nStatic Files\n\n\nHow Opal handles static files\n\n\n\n\n\n\nForms\n\n\nForms for entering or editing data\n\n\n\n\n\n\nPatient Detail Views\n\n\nDetailed views of a Patient\n\n\n\n\n\n\nPatient List Views\n\n\nLists of patients\n\n\n\n\n\n\n\n\nOptional Components\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSearch\n\n\nDefault search implementation\n\n\n\n\n\n\nPathway\n\n\nBuild forms with multiple models, easily\n\n\n\n\n\n\nDjango Admin\n\n\nWorking with Opal models in the Django Admin\n\n\n\n\n\n\n\n\nWorking on Opal itself\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nContributing\n\n\nContributing to Opal\n\n\n\n\n\n\nDevelopment environment\n\n\nSetting up the Opal development environment\n\n\n\n\n\n\nMaking a Release\n\n\nReleasing a version of Opal\n\n\n\n\n\n\n\n\nOther Guides\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeployment\n\n\nDeploying Opal", 
            "title": "Guides"
        }, 
        {
            "location": "/guides/topic-guides/#opal-guides", 
            "text": "A list of all available topic guides.", 
            "title": "Opal Guides"
        }, 
        {
            "location": "/guides/topic-guides/#opal", 
            "text": "Opal - Applications, Plugins  How Opal components hang together    Command line tool  Running admin tasks from the command line    Discoverable  Design patterns and library for creating easily reusable features    Plugins  Available interfaces for Opal plugins    List of Plugins  A list of available high quality plugins", 
            "title": "Opal"
        }, 
        {
            "location": "/guides/topic-guides/#data-and-business-logic", 
            "text": "Data Model  How Opal models clinical reality    Episodes  Opal Episodes and how to customise them    Core Clinical Model  The core clinical data model available to Opal applications    Reference data  Canonical coded terms and reference data    App metadata  Working with Metadata on the front end    Flow  Hooks to customise key moments in a patient's flow through a clinical service    Angular models  Working with Clinical data in Angular    Roles   Permissions  How we handle authorization in Opal    Tagging  Tagging episodes in Opal    JSON API  The Opal JSON API", 
            "title": "Data and Business Logic"
        }, 
        {
            "location": "/guides/topic-guides/#presentation-and-templating", 
            "text": "Theming  How to theme your application    Templates  Server and client side templating    Default Context Processors  Opal Django context processors    Static Files  How Opal handles static files    Forms  Forms for entering or editing data    Patient Detail Views  Detailed views of a Patient    Patient List Views  Lists of patients", 
            "title": "Presentation and templating"
        }, 
        {
            "location": "/guides/topic-guides/#optional-components", 
            "text": "Search  Default search implementation    Pathway  Build forms with multiple models, easily    Django Admin  Working with Opal models in the Django Admin", 
            "title": "Optional Components"
        }, 
        {
            "location": "/guides/topic-guides/#working-on-opal-itself", 
            "text": "Contributing  Contributing to Opal    Development environment  Setting up the Opal development environment    Making a Release  Releasing a version of Opal", 
            "title": "Working on Opal itself"
        }, 
        {
            "location": "/guides/topic-guides/#other-guides", 
            "text": "Deployment  Deploying Opal", 
            "title": "Other Guides"
        }, 
        {
            "location": "/reference/reference_guides/", 
            "text": "Opal Reference material\n\n\nThe following reference guides are available:\n\n\nModels\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nopal.models.Episode\n\n\nThe central Episode model\n\n\n\n\n\n\nopal.models.Patient\n\n\nThe Patient model\n\n\n\n\n\n\nopal.models.Subrecord\n\n\nfor subrecords of Episodes or Patients\n\n\n\n\n\n\nopal.models.UserProfile\n\n\nThe Opal UserProfile model\n\n\n\n\n\n\nopal.models.*\n\n\nMixin helpers for useful functionality\n\n\n\n\n\n\n\n\nOpal Core\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nopal.core.application\n\n\nOpal Application objects\n\n\n\n\n\n\nopal.core.detail\n\n\nDetail Views - Custom views over one or many episodes.\n\n\n\n\n\n\nopal.core.episodes\n\n\nEpisode Categories - Controlling the behaviour of different types of episode\n\n\n\n\n\n\nopal.core.schemas\n\n\nSchemas - Dynamic columns for the table views\n\n\n\n\n\n\nopal.core.patient_lists\n\n\nPatient Lists - defining different types of list\n\n\n\n\n\n\nopal.core.plugin\n\n\nPlugins - defining plugins to package reusable functionality\n\n\n\n\n\n\nopal.core.menus\n\n\nMenus - declaring application menus\n\n\n\n\n\n\nopal.core.log\n\n\nLog Helpers - custom email error loggers\n\n\n\n\n\n\nopal.core.fields\n\n\nField helpers - custom field types and utility functions\n\n\n\n\n\n\nopal.core.lookuplists\n\n\nUtilities for working with lookuplists\n\n\n\n\n\n\nopal.core.discoverable\n\n\nReusable feature groups for plugins and applications\n\n\n\n\n\n\n\n\nAngular Services\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPatient\n\n\nPatient objects\n\n\n\n\n\n\nEpisode\n\n\nEpisode objects\n\n\n\n\n\n\nItem\n\n\nSubrecord objects\n\n\n\n\n\n\nUser\n\n\nUser objects\n\n\n\n\n\n\nPatientSummary\n\n\nPatient search result summaries\n\n\n\n\n\n\nSearch Services\n\n\nServices from the Search module\n\n\n\n\n\n\nLoaders\n\n\nJS Services that load in from patient list, episode and patient apis\n\n\n\n\n\n\n\n\nHelper libraries\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe forms Templatetag library\n\n\nThe building blocks for Opal forms\n\n\n\n\n\n\nThe panels Templatetag library\n\n\nRendering record panels\n\n\n\n\n\n\nThe menus Templatetag library\n\n\nRendering application menus\n\n\n\n\n\n\nJavascript Helpers\n\n\nAngular directives, filters and $rootScope methods\n\n\n\n\n\n\n\n\nOpal core modules\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMaking Search Queries\n\n\nSearch query backends and helper functions\n\n\n\n\n\n\nPathway\n\n\nSimple or complicated multilayed forms\n\n\n\n\n\n\n\n\nMiscellaneous documentation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSettings\n\n\nOpal settings\n\n\n\n\n\n\nChangelog\n\n\nOpal Changelog\n\n\n\n\n\n\nUpgrading\n\n\nUpgrading between Opal versions\n\n\n\n\n\n\nJavascript dependencies\n\n\nExternal javascript libraries available\n\n\n\n\n\n\nTesting\n\n\nTesting\n\n\n\n\n\n\nManagement commands\n\n\nDjango management commands", 
            "title": "Reference"
        }, 
        {
            "location": "/reference/reference_guides/#opal-reference-material", 
            "text": "The following reference guides are available:", 
            "title": "Opal Reference material"
        }, 
        {
            "location": "/reference/reference_guides/#models", 
            "text": "opal.models.Episode  The central Episode model    opal.models.Patient  The Patient model    opal.models.Subrecord  for subrecords of Episodes or Patients    opal.models.UserProfile  The Opal UserProfile model    opal.models.*  Mixin helpers for useful functionality", 
            "title": "Models"
        }, 
        {
            "location": "/reference/reference_guides/#opal-core", 
            "text": "opal.core.application  Opal Application objects    opal.core.detail  Detail Views - Custom views over one or many episodes.    opal.core.episodes  Episode Categories - Controlling the behaviour of different types of episode    opal.core.schemas  Schemas - Dynamic columns for the table views    opal.core.patient_lists  Patient Lists - defining different types of list    opal.core.plugin  Plugins - defining plugins to package reusable functionality    opal.core.menus  Menus - declaring application menus    opal.core.log  Log Helpers - custom email error loggers    opal.core.fields  Field helpers - custom field types and utility functions    opal.core.lookuplists  Utilities for working with lookuplists    opal.core.discoverable  Reusable feature groups for plugins and applications", 
            "title": "Opal Core"
        }, 
        {
            "location": "/reference/reference_guides/#angular-services", 
            "text": "Patient  Patient objects    Episode  Episode objects    Item  Subrecord objects    User  User objects    PatientSummary  Patient search result summaries    Search Services  Services from the Search module    Loaders  JS Services that load in from patient list, episode and patient apis", 
            "title": "Angular Services"
        }, 
        {
            "location": "/reference/reference_guides/#helper-libraries", 
            "text": "The forms Templatetag library  The building blocks for Opal forms    The panels Templatetag library  Rendering record panels    The menus Templatetag library  Rendering application menus    Javascript Helpers  Angular directives, filters and $rootScope methods", 
            "title": "Helper libraries"
        }, 
        {
            "location": "/reference/reference_guides/#opal-core-modules", 
            "text": "Making Search Queries  Search query backends and helper functions    Pathway  Simple or complicated multilayed forms", 
            "title": "Opal core modules"
        }, 
        {
            "location": "/reference/reference_guides/#miscellaneous-documentation", 
            "text": "Settings  Opal settings    Changelog  Opal Changelog    Upgrading  Upgrading between Opal versions    Javascript dependencies  External javascript libraries available    Testing  Testing    Management commands  Django management commands", 
            "title": "Miscellaneous documentation"
        }, 
        {
            "location": "/guides/components_overview/", 
            "text": "Components of an Opal application\n\n\nOpal applications will typically be made up of several types of components.\n\n\n\n\nOpal\n\n\nThe core Opal framework provides you with a range of commonly required elements\nof clinical applications.\n\n\nIt contains a core \ndata model\n for persisting clinical information,\nas well core clinical archetypes out of the box that build on many\nyears of collaboratively modelling clinical concepts by medical domain experts.\n\n\nOpal also makes it easy to integrate standard clinical \nreference data\n\ninto your application - things like medical diagnoses, tests, drugs et cetera.\n\n\nSome common functional components end up in to most clinical applications, and many\nof these come with Opal as \"batteries included\" - immediately available modular features\nthat can be simply re-used without having to reinvent the wheel.\n\n\nFor example:\n\n\n\n\nPatient lists\n\n\nSearch\n\n\nAuthentication and \nPermissions\n\n\nForms for data entry\n\n\nJSON based REST APIs\n for all of your models\n\n\n... and \nmany more\n...\n\n\n\n\nPlugins\n\n\nOpal plugins are intended to provide high quality generic, composable, re-usable chunks of\nfunctionality that can be \"dropped in\" to an application. For example, installing the\n\nDashboards\n plugin allows you to easily\ncreate clinical dashboards within your application. The\n\nReferral\n plugin provides the plumbing for\nbuilding complex inter-team referrals within an institution.\n\n\nPlugins have a \nrich plugin API\n they can hook into to, and\nmany examples can be found by inspecting the source of \nexisting plugins\n.\n\n\nApplications\n\n\nAn application is the collection of configuration and bespoke functionality that would be\nprovided to an individual institution - it's the thing that you would look to deploy.\n\n\nExample applications include \nelCID\n - a for managing\ninfection patients, or \nOpal-Renal\n - an MDT \n\nhandover tool for Renal wards.\n\n\nA hospital might have multiple clinical services running on one application, or multiple\napplications that integrate with one another.\n\n\nOpinionated but Pluggable\n\n\nOpal is an opinionated framework. It expects the developer to structure code in a\ncertain way.\n\n\nOpal expects features to be implemented as single page Angular.js applications, with the server\nmostly figuring as an API endpoint for reading and writing data.\n\n\nThat said, the technology stack of Django, Angular \n Bootstrap allows the confident user a huge\ndegree of flexibility when writing their own applications and plugins.\n\n\nFor instance, there is nothing to \nstop\n a developer from implementing a part of the functionality\nin some other Javascript framework, and simply calling the \nJSON API\n. However, by\ndoing so, the developer will lose a large collection of pre-existing libraries, conventions et cetera.\nWhile possible, this approach is not likely to be officially supported in the medium term.", 
            "title": "Component Overview"
        }, 
        {
            "location": "/guides/components_overview/#components-of-an-opal-application", 
            "text": "Opal applications will typically be made up of several types of components.", 
            "title": "Components of an Opal application"
        }, 
        {
            "location": "/guides/components_overview/#opal", 
            "text": "The core Opal framework provides you with a range of commonly required elements\nof clinical applications.  It contains a core  data model  for persisting clinical information,\nas well core clinical archetypes out of the box that build on many\nyears of collaboratively modelling clinical concepts by medical domain experts.  Opal also makes it easy to integrate standard clinical  reference data \ninto your application - things like medical diagnoses, tests, drugs et cetera.  Some common functional components end up in to most clinical applications, and many\nof these come with Opal as \"batteries included\" - immediately available modular features\nthat can be simply re-used without having to reinvent the wheel.  For example:   Patient lists  Search  Authentication and  Permissions  Forms for data entry  JSON based REST APIs  for all of your models  ... and  many more ...", 
            "title": "Opal"
        }, 
        {
            "location": "/guides/components_overview/#plugins", 
            "text": "Opal plugins are intended to provide high quality generic, composable, re-usable chunks of\nfunctionality that can be \"dropped in\" to an application. For example, installing the Dashboards  plugin allows you to easily\ncreate clinical dashboards within your application. The Referral  plugin provides the plumbing for\nbuilding complex inter-team referrals within an institution.  Plugins have a  rich plugin API  they can hook into to, and\nmany examples can be found by inspecting the source of  existing plugins .", 
            "title": "Plugins"
        }, 
        {
            "location": "/guides/components_overview/#applications", 
            "text": "An application is the collection of configuration and bespoke functionality that would be\nprovided to an individual institution - it's the thing that you would look to deploy.  Example applications include  elCID  - a for managing\ninfection patients, or  Opal-Renal  - an MDT  \nhandover tool for Renal wards.  A hospital might have multiple clinical services running on one application, or multiple\napplications that integrate with one another.", 
            "title": "Applications"
        }, 
        {
            "location": "/guides/components_overview/#opinionated-but-pluggable", 
            "text": "Opal is an opinionated framework. It expects the developer to structure code in a\ncertain way.  Opal expects features to be implemented as single page Angular.js applications, with the server\nmostly figuring as an API endpoint for reading and writing data.  That said, the technology stack of Django, Angular   Bootstrap allows the confident user a huge\ndegree of flexibility when writing their own applications and plugins.  For instance, there is nothing to  stop  a developer from implementing a part of the functionality\nin some other Javascript framework, and simply calling the  JSON API . However, by\ndoing so, the developer will lose a large collection of pre-existing libraries, conventions et cetera.\nWhile possible, this approach is not likely to be officially supported in the medium term.", 
            "title": "Opinionated but Pluggable"
        }, 
        {
            "location": "/guides/command_line_tool/", 
            "text": "The Opal Command line tool\n\n\nOpal ships with a helpful command line tool that helps with administrative tasks.\n\n\nThe \nopal\n script should be on your system path if you installed Opal via setup.py or\npip. You can check whether it is available by running this command:\n\n\n$ opal -v\n\n\n\nstartproject \nname\n\n\nCreates a new Opal project.\n\n\nThis creates boilerplate and a default configuration for your new project, including\ncreating a new underlying Django project, updating default settings to be compatible\nwith Opal, creating directories and code boilerplate, and running initial migrations.\n\n\nstartplugin \nname\n\n\nCreates boilerplate code, and directory structures for a new Opal plugin.\n\n\ntest \nwhat\n\n\nRun our tests suites.\n\n\nDefaults to running both Python and Javascript tests.\n\n\nIf specified, will only run one specific kind of test.\n\n\n$ opal test py\n   $ opal test js\n\n\nWhen running Python tests, the \n-t\n or \n--test\n option allows the user to specify a single\ntest module, case or method to run.\n\n\n$ opal test py -t opal.tests.test_models\n\n\nThe \n--failfast\n option will end the test run on the first failing test rather than\ncontinuing with the entire run.\n\n\ncheckout\n\n\nEnsure that all of our application plugins and packages are on the correct branch.\n\n\nThis is particularly useful when working on Opal itself, or when you have multiple\nprojects that use different versions of Opal or plugins. It will assume that github\nbased requirements will be installed in development via \npython setup.py develop\n.\n\n\nThis command will parse your project's \nrequirements.txt\n, and then ensure that any\nGithub sources are checked out locally to the branch specified therein.", 
            "title": "Command Line tool"
        }, 
        {
            "location": "/guides/command_line_tool/#the-opal-command-line-tool", 
            "text": "Opal ships with a helpful command line tool that helps with administrative tasks.  The  opal  script should be on your system path if you installed Opal via setup.py or\npip. You can check whether it is available by running this command:  $ opal -v", 
            "title": "The Opal Command line tool"
        }, 
        {
            "location": "/guides/command_line_tool/#startproject-name", 
            "text": "Creates a new Opal project.  This creates boilerplate and a default configuration for your new project, including\ncreating a new underlying Django project, updating default settings to be compatible\nwith Opal, creating directories and code boilerplate, and running initial migrations.", 
            "title": "startproject &lt;name&gt;"
        }, 
        {
            "location": "/guides/command_line_tool/#startplugin-name", 
            "text": "Creates boilerplate code, and directory structures for a new Opal plugin.", 
            "title": "startplugin &lt;name&gt;"
        }, 
        {
            "location": "/guides/command_line_tool/#test-what", 
            "text": "Run our tests suites.  Defaults to running both Python and Javascript tests.  If specified, will only run one specific kind of test.  $ opal test py\n   $ opal test js  When running Python tests, the  -t  or  --test  option allows the user to specify a single\ntest module, case or method to run.  $ opal test py -t opal.tests.test_models  The  --failfast  option will end the test run on the first failing test rather than\ncontinuing with the entire run.", 
            "title": "test &lt;what&gt;"
        }, 
        {
            "location": "/guides/command_line_tool/#checkout", 
            "text": "Ensure that all of our application plugins and packages are on the correct branch.  This is particularly useful when working on Opal itself, or when you have multiple\nprojects that use different versions of Opal or plugins. It will assume that github\nbased requirements will be installed in development via  python setup.py develop .  This command will parse your project's  requirements.txt , and then ensure that any\nGithub sources are checked out locally to the branch specified therein.", 
            "title": "checkout"
        }, 
        {
            "location": "/guides/discoverable/", 
            "text": "Opal Discoverable Features\n\n\nOpal makes extensive use of the case of discoverable features. These are pieces of\ncomposable functionality that can be implemented by any plugin or application,\nsimply by declaring a class with the appropriate fields and methods implemented. (Details\nof exactly which fields and methods vary by feature.)\n\n\nDefining Discoverable Features\n\n\nThe only thing required for a discoverable feature, is that it defines the name of\nthe module in which it should expect to find instances.\n\n\nfrom opal.core import discoverable\n\nclass MyFeature(discoverable.DiscoverableFeature):\n    module_name = 'myfeature'\n\n\n\nThis now gives us access to various interfaces which come with the library. We can access\nall subclasses of \nMyFeature\n by calling \nMyFeature.list()\n - which will look through all\nDjango apps in our application, and look for a module named \nmyfeature.py\n. The \nlist()\n\nmethod then returns any subclasses of \nMyFeature\n.\n\n\nSlugs and Display Names\n\n\nWe often want to define human and machine readable strings to name our features. Display\nnames are intended for people - feel free to include spaces, numbers and punctuation. Slugs\nare intended for machines - so no spaces, numbers, hyphens, periods or other punctuation. By\ndefault, if there is a display name and no explicit slug, we will 'slugify' the display name.\n\n\nclass MyNameFeature(MyFeature):\n    display_name = 'Hello World'\n\nprint MyNameFeature.get_slug()\n# 'hello_world'\n\nclass MySlugFeature(MyFeature):\n    slug = 'this_is_a_slug'\n\nprint MySlugFeature.get_slug()\n# 'this_is_a_slug'\n\n\n\nRetrieving Subclasses\n\n\nOnce we define a \ndisplay_name\n or \nslug\n for subclasses of our feature, we can then fetch them via\nthe \nget()\n api.\n\n\nclass RedFeature(MyFeature):\n    slug = 'red_feature'\n\nMyFeature.get('red_feature') # -\n RedFeature\n\n\n\nSortable Features\n\n\nWe can make our feature sortable via an \norder\n property by including\n \ndiscoverable.SortableFeature\n as a parent class. This will ensure that \nMyFeature.list()\n\n respects the \n.order\n number of any subclass.\n\n\nclass MyFeature(discoverable.DiscoverableFeature,\n                discoverable.SortableFeature):\n    module_name = 'myfeature'\n\nclass ThirdFeature(MyFeature):\n    order = 3\n\nclass FirstFeature(MyFeature):\n    order = 1\n\nclass SecondFeature(MyFeature):\n    order = 2\n\nfor f in MyFeature.list():\n    print f, f.order\n\n# \nclass '*.*.FirstFeature'\n, 1\n# \nclass '*.*.SecondFeature'\n, 2\n# \nclass '*.*.ThirdFeature'\n, 3\n\n\n\n\nRestrictable Features\n\n\nWe can ensure that only particular users can access a feature by including\n \ndiscoverable.RestrictableFeature\n as a parent class, and implementing the \nvisible_to\n\n classmethod on any restricted subclasses.\n\n\n class MyFeature(discoverable.DiscoverableFeature, discoverable.RestrictableFeature):\n     module_name = 'myfeature'\n\n\n\nFor instance, a feature that was only visible to superusers could be implemented like this:\n\n\n class SuperuserFeature(MyFeature):\n\n     @classmethod\n     def visible_to(klass, user):\n         return user.is_superuser\n\n\n\nValidating Features\n\n\nSometimes we wish to validate features so that we don't cause unintended consequences when\nwe implement subclasses of them. This is available via the \nis_valid\n classmethod. For instance,\nif we wanted to implement a \"Bomb\" feature, which blew up every time the blow_up attribute was\ntrue, we could to this as follows:\n\n\nclass BombFeature(discoverable.DiscoverableFeature):\n    module_name = 'bombs'\n    blow_up = False\n\n    @classmethod\n    def is_valid(klass):\n        if klass.blow_up == True:\n            from opal.core.exceptions import InvalidDiscoverableFeatureError\n            raise InvalidDiscoverableFeatureError('BLOWING UP')\n\n\nclass Threat(BombFeature): pass\n# That's fine.\n\nclass Detonate(BombFeature):\n    blow_up = True\n# InvalidDiscoverableFeatureError: BLOWING UP\n\n\n\nAbstract Features\n\n\nSometimes we want to declare an abstract feature - something with reusable functionality\nthat isn't itself a new feature. We would rather not have our abstract feature show up\nwhen we \nlist()\n our base feature - because it's simply a programming convenience. This\nis made simple by using \nopal.utils.AbstractBase\n.\n\n\n    class A(discoverable.DiscoverableFeature):\n        module_name = 'a'\n\n    class AA(A, AbstractBase): pass\n\n    class B(A): pass\n\n    class C(AA): pass\n\n    class D(AA): pass\n\n\n    A.list()\n    # [B, C, D]", 
            "title": "Discoverable Features"
        }, 
        {
            "location": "/guides/discoverable/#opal-discoverable-features", 
            "text": "Opal makes extensive use of the case of discoverable features. These are pieces of\ncomposable functionality that can be implemented by any plugin or application,\nsimply by declaring a class with the appropriate fields and methods implemented. (Details\nof exactly which fields and methods vary by feature.)", 
            "title": "Opal Discoverable Features"
        }, 
        {
            "location": "/guides/discoverable/#defining-discoverable-features", 
            "text": "The only thing required for a discoverable feature, is that it defines the name of\nthe module in which it should expect to find instances.  from opal.core import discoverable\n\nclass MyFeature(discoverable.DiscoverableFeature):\n    module_name = 'myfeature'  This now gives us access to various interfaces which come with the library. We can access\nall subclasses of  MyFeature  by calling  MyFeature.list()  - which will look through all\nDjango apps in our application, and look for a module named  myfeature.py . The  list() \nmethod then returns any subclasses of  MyFeature .", 
            "title": "Defining Discoverable Features"
        }, 
        {
            "location": "/guides/discoverable/#slugs-and-display-names", 
            "text": "We often want to define human and machine readable strings to name our features. Display\nnames are intended for people - feel free to include spaces, numbers and punctuation. Slugs\nare intended for machines - so no spaces, numbers, hyphens, periods or other punctuation. By\ndefault, if there is a display name and no explicit slug, we will 'slugify' the display name.  class MyNameFeature(MyFeature):\n    display_name = 'Hello World'\n\nprint MyNameFeature.get_slug()\n# 'hello_world'\n\nclass MySlugFeature(MyFeature):\n    slug = 'this_is_a_slug'\n\nprint MySlugFeature.get_slug()\n# 'this_is_a_slug'", 
            "title": "Slugs and Display Names"
        }, 
        {
            "location": "/guides/discoverable/#retrieving-subclasses", 
            "text": "Once we define a  display_name  or  slug  for subclasses of our feature, we can then fetch them via\nthe  get()  api.  class RedFeature(MyFeature):\n    slug = 'red_feature'\n\nMyFeature.get('red_feature') # -  RedFeature", 
            "title": "Retrieving Subclasses"
        }, 
        {
            "location": "/guides/discoverable/#sortable-features", 
            "text": "We can make our feature sortable via an  order  property by including\n  discoverable.SortableFeature  as a parent class. This will ensure that  MyFeature.list() \n respects the  .order  number of any subclass.  class MyFeature(discoverable.DiscoverableFeature,\n                discoverable.SortableFeature):\n    module_name = 'myfeature'\n\nclass ThirdFeature(MyFeature):\n    order = 3\n\nclass FirstFeature(MyFeature):\n    order = 1\n\nclass SecondFeature(MyFeature):\n    order = 2\n\nfor f in MyFeature.list():\n    print f, f.order\n\n#  class '*.*.FirstFeature' , 1\n#  class '*.*.SecondFeature' , 2\n#  class '*.*.ThirdFeature' , 3", 
            "title": "Sortable Features"
        }, 
        {
            "location": "/guides/discoverable/#restrictable-features", 
            "text": "We can ensure that only particular users can access a feature by including\n  discoverable.RestrictableFeature  as a parent class, and implementing the  visible_to \n classmethod on any restricted subclasses.   class MyFeature(discoverable.DiscoverableFeature, discoverable.RestrictableFeature):\n     module_name = 'myfeature'  For instance, a feature that was only visible to superusers could be implemented like this:   class SuperuserFeature(MyFeature):\n\n     @classmethod\n     def visible_to(klass, user):\n         return user.is_superuser", 
            "title": "Restrictable Features"
        }, 
        {
            "location": "/guides/discoverable/#validating-features", 
            "text": "Sometimes we wish to validate features so that we don't cause unintended consequences when\nwe implement subclasses of them. This is available via the  is_valid  classmethod. For instance,\nif we wanted to implement a \"Bomb\" feature, which blew up every time the blow_up attribute was\ntrue, we could to this as follows:  class BombFeature(discoverable.DiscoverableFeature):\n    module_name = 'bombs'\n    blow_up = False\n\n    @classmethod\n    def is_valid(klass):\n        if klass.blow_up == True:\n            from opal.core.exceptions import InvalidDiscoverableFeatureError\n            raise InvalidDiscoverableFeatureError('BLOWING UP')\n\n\nclass Threat(BombFeature): pass\n# That's fine.\n\nclass Detonate(BombFeature):\n    blow_up = True\n# InvalidDiscoverableFeatureError: BLOWING UP", 
            "title": "Validating Features"
        }, 
        {
            "location": "/guides/discoverable/#abstract-features", 
            "text": "Sometimes we want to declare an abstract feature - something with reusable functionality\nthat isn't itself a new feature. We would rather not have our abstract feature show up\nwhen we  list()  our base feature - because it's simply a programming convenience. This\nis made simple by using  opal.utils.AbstractBase .      class A(discoverable.DiscoverableFeature):\n        module_name = 'a'\n\n    class AA(A, AbstractBase): pass\n\n    class B(A): pass\n\n    class C(AA): pass\n\n    class D(AA): pass\n\n\n    A.list()\n    # [B, C, D]", 
            "title": "Abstract Features"
        }, 
        {
            "location": "/guides/plugins/", 
            "text": "Writing Plugins\n\n\nOpal Plugins are Django apps on the server side, and collections of angular.js\nmodels for the client.\n\n\nGetting started with your plugin\n\n\nThe Opal commandline tool will bootstrap your plugin for you - just run:\n\n\n$ opal startplugin yourcoolplugin\n\n\n\n\nAdding Discoverable Functionality\n\n\nA common pattern for plugins is to add functionality that other plugins or applications\ncan use by inheriting a base class that you define in a file with a magic name. (In\nmuch the same way that Django provides models.)\n\n\nFor example, if you're creating an appointments plugin that helps people to book and schedule\nappointments in clinics, you would create a base \nClinic\n class that can be subclassed to\ncreate specific clinics.\n\n\nclass Clinic(opal.core.discoverable.DiscoverableFeature):\n    module_name = 'clinics'\n\n\n\n\nWe can then create clinics in any installed app, and they will be available from \nClinic.list()\n\n\nclass OutpatientsClinic(Clinic):\n    name = 'Outpatients'\n\n    # Add your custom clinic functionality here e.g.\n    def book_appointment(self, date, patient):\n        pass\n\n\nClinic.list()\n# -\n Generator including OutPatientsClinic\n\nClinic.get('outpatients)\n# -\n OutpatientsClinic\n\n\n\n\nGetting a plugin directory\n\n\nEach plugin has a \ndirectory()\n method that returns the file system location of the module.\n\n\nAdding URLS\n\n\nAdd an urls.py, then add to your plugin class as YourPlugin.urls\n\n\nNaturally, these can point to views in your plugin!\n\n\nAdding Javascript\n\n\nAdd to static, then add to your plugin class as YourPlugin.javascripts\n\n\nThere are some restricted namespaces for these...\n\n\nAdding APIs\n\n\nOpal uses Django Rest Framework to provide APIs, and you may add to these from your plugin.\nBy convention, APIs live in \nyourplugin/api.py\n. You are expected to provide a\n\nrest_framework.viewsets.ViewSet\n subclass, which you then detail as the \n.apis\n attribute\nof your plugin.\n\n\n# yourplugin/api.py\nfrom rest_framework.viewsets import ViewSet\nfrom rest_framework.response import Response\n\nclass PingViewSet(ViewSet):\n    def list(self, request): return Response('pong')\n\n# yourplugin/plugin.py\nfrom opal.core.plugins import OpalPlugin\nfrom yourplugin import api\n\nclass YourPlugin(OpalPlugin):\n    apis = [\n        ('ping', api.PingViewSet)\n    ]\n\n\n\n\nThese APIs will then be available and self-documenting from the standard Opal url \n/api/v0.1/\n\n\nPermissioning\n\n\nDevelopers are strongly encouraged to ensure that APIs which\nserve patient data are restricted to logged in users. Django Rest Framework \nViewSet\n classes\nhave an \nextensive permissioning system\n.\n\n\nOpal ships with the base ViewSet class \nopal.core.api.LoginRequiredViewset\n which adds the Django\nRest Framework permission class IsAuthenticated to your viewset.\n\n\nclass PingViewSet(LoginRequiredViewset):\n    def list(self, request):\n        return Response('pong')\n\n\n\n\nAdding Actions to the sidebar\n\n\nActions can be added to the sidebar by setting the \nactions\n attribute of your plugin.\nActions is expected to be an iterable of strings which are templates to be included in\nthe sidebar. By convention, actions will live in \n./templates/actions/\n .\n\n\n# plugin.py:\nclass Plugin(OpalPlugin):\n    actions = ('actions/javascript_alert.html', 'actions/dummy_button.html')\n\n\n\n\nAnd then in the template:\n\n\np ng-show=\nepisode.category == 'YourEpisodeCategory'\n\n  \nbutton class=\nbtn btn-primary\n ng-click=\nalert('Boom!')\n\n    \ni href=\nfa fa-warning\n/i\n\n    ALERT ME\n  \n/button\n\n\n/p\n\n\n\n\n\nAdding dependencies globally to our angular modules\n\n\nDependencies listed in \nangular_module_deps\n will be added to all Angular modules (as long as they\nuse the OPAL.module() API. If not, you're on your own. We could monkey patch angular.module, but we\nwon't for now.\n\n\nAdding Menu items\n\n\nPlugins may add items to the main Opal Menu by setting the \nmenuitems\n attribute.\nThis attribute should be an iterable of \nMenuItem\n objects.\n\n\nfrom opal.core import menus\n\nclass YourPlugin(OpalPlugin):\n    menuitems = [\n        menus.MenuItem(href=\n/your-url\n, icon=\nfa-user\n)\n    ]\n\n\n\n\nInstalling plugins\n\n\n\n\n\n\nAdd the plugin's name to the \nINSTALLED_APPS\n list in your \nsettings.py\n\n\n\n\n\n\nAdd the plugin's name to \nrequirements.txt\n and run \npip install -r requirements.txt\n (if appropriate, eg if you are distributing your plugin via Pypi or GitHub) \n\n\n\n\n\n\nAdding extra markup to the \n tag\n\n\nAny templates you define in the property .head_extra will be included in the", 
            "title": "Plugins"
        }, 
        {
            "location": "/guides/plugins/#writing-plugins", 
            "text": "Opal Plugins are Django apps on the server side, and collections of angular.js\nmodels for the client.", 
            "title": "Writing Plugins"
        }, 
        {
            "location": "/guides/plugins/#getting-started-with-your-plugin", 
            "text": "The Opal commandline tool will bootstrap your plugin for you - just run:  $ opal startplugin yourcoolplugin", 
            "title": "Getting started with your plugin"
        }, 
        {
            "location": "/guides/plugins/#adding-discoverable-functionality", 
            "text": "A common pattern for plugins is to add functionality that other plugins or applications\ncan use by inheriting a base class that you define in a file with a magic name. (In\nmuch the same way that Django provides models.)  For example, if you're creating an appointments plugin that helps people to book and schedule\nappointments in clinics, you would create a base  Clinic  class that can be subclassed to\ncreate specific clinics.  class Clinic(opal.core.discoverable.DiscoverableFeature):\n    module_name = 'clinics'  We can then create clinics in any installed app, and they will be available from  Clinic.list()  class OutpatientsClinic(Clinic):\n    name = 'Outpatients'\n\n    # Add your custom clinic functionality here e.g.\n    def book_appointment(self, date, patient):\n        pass\n\n\nClinic.list()\n# -  Generator including OutPatientsClinic\n\nClinic.get('outpatients)\n# -  OutpatientsClinic", 
            "title": "Adding Discoverable Functionality"
        }, 
        {
            "location": "/guides/plugins/#getting-a-plugin-directory", 
            "text": "Each plugin has a  directory()  method that returns the file system location of the module.", 
            "title": "Getting a plugin directory"
        }, 
        {
            "location": "/guides/plugins/#adding-urls", 
            "text": "Add an urls.py, then add to your plugin class as YourPlugin.urls  Naturally, these can point to views in your plugin!", 
            "title": "Adding URLS"
        }, 
        {
            "location": "/guides/plugins/#adding-javascript", 
            "text": "Add to static, then add to your plugin class as YourPlugin.javascripts  There are some restricted namespaces for these...", 
            "title": "Adding Javascript"
        }, 
        {
            "location": "/guides/plugins/#adding-apis", 
            "text": "Opal uses Django Rest Framework to provide APIs, and you may add to these from your plugin.\nBy convention, APIs live in  yourplugin/api.py . You are expected to provide a rest_framework.viewsets.ViewSet  subclass, which you then detail as the  .apis  attribute\nof your plugin.  # yourplugin/api.py\nfrom rest_framework.viewsets import ViewSet\nfrom rest_framework.response import Response\n\nclass PingViewSet(ViewSet):\n    def list(self, request): return Response('pong')\n\n# yourplugin/plugin.py\nfrom opal.core.plugins import OpalPlugin\nfrom yourplugin import api\n\nclass YourPlugin(OpalPlugin):\n    apis = [\n        ('ping', api.PingViewSet)\n    ]  These APIs will then be available and self-documenting from the standard Opal url  /api/v0.1/", 
            "title": "Adding APIs"
        }, 
        {
            "location": "/guides/plugins/#permissioning", 
            "text": "Developers are strongly encouraged to ensure that APIs which\nserve patient data are restricted to logged in users. Django Rest Framework  ViewSet  classes\nhave an  extensive permissioning system .  Opal ships with the base ViewSet class  opal.core.api.LoginRequiredViewset  which adds the Django\nRest Framework permission class IsAuthenticated to your viewset.  class PingViewSet(LoginRequiredViewset):\n    def list(self, request):\n        return Response('pong')", 
            "title": "Permissioning"
        }, 
        {
            "location": "/guides/plugins/#adding-actions-to-the-sidebar", 
            "text": "Actions can be added to the sidebar by setting the  actions  attribute of your plugin.\nActions is expected to be an iterable of strings which are templates to be included in\nthe sidebar. By convention, actions will live in  ./templates/actions/  .  # plugin.py:\nclass Plugin(OpalPlugin):\n    actions = ('actions/javascript_alert.html', 'actions/dummy_button.html')  And then in the template:  p ng-show= episode.category == 'YourEpisodeCategory' \n   button class= btn btn-primary  ng-click= alert('Boom!') \n     i href= fa fa-warning /i \n    ALERT ME\n   /button  /p", 
            "title": "Adding Actions to the sidebar"
        }, 
        {
            "location": "/guides/plugins/#adding-dependencies-globally-to-our-angular-modules", 
            "text": "Dependencies listed in  angular_module_deps  will be added to all Angular modules (as long as they\nuse the OPAL.module() API. If not, you're on your own. We could monkey patch angular.module, but we\nwon't for now.", 
            "title": "Adding dependencies globally to our angular modules"
        }, 
        {
            "location": "/guides/plugins/#adding-menu-items", 
            "text": "Plugins may add items to the main Opal Menu by setting the  menuitems  attribute.\nThis attribute should be an iterable of  MenuItem  objects.  from opal.core import menus\n\nclass YourPlugin(OpalPlugin):\n    menuitems = [\n        menus.MenuItem(href= /your-url , icon= fa-user )\n    ]", 
            "title": "Adding Menu items"
        }, 
        {
            "location": "/guides/plugins/#installing-plugins", 
            "text": "Add the plugin's name to the  INSTALLED_APPS  list in your  settings.py    Add the plugin's name to  requirements.txt  and run  pip install -r requirements.txt  (if appropriate, eg if you are distributing your plugin via Pypi or GitHub)", 
            "title": "Installing plugins"
        }, 
        {
            "location": "/guides/plugins/#adding-extra-markup-to-the-tag", 
            "text": "Any templates you define in the property .head_extra will be included in the", 
            "title": "Adding extra markup to the  tag"
        }, 
        {
            "location": "/guides/plugins_list/", 
            "text": "Opal Plugins list\n\n\nThe Opal ecosystem has a rich array of re-usable Open Source plugins that can be used as composable\nunits of functionality to build your application. This page lists some of the best available:\n\n\nopal.core.search\n\n\nThe Search plugin bundled with Opal core provides a default database based search implementation\nfor your application, and is scheduled to provide hooks for e.g. using Elastic Search as your\nsearch backend.\n\n\nopal-wardround\n\n\nThe \nWardround\n plugin provides structured virtual\nward rounds - sequential subsets of patients matching arbitrary criteria that the user may step\nthrough in order.\n\n\nopal-dischargesummary\n\n\nThe \nDischarge Summary\n plugin allows the\nuser to generate templated letters from the data concerning an episode already held in the Application.\n\n\nopal-referral\n\n\nThe \nReferral\n plugin provides the plumbing for\nbuilding complex inter-team referrals within an institution.\n\n\nopal-dashboard\n\n\nThe \nDashboard\n plugin allows for realtime clinical\ndashboards featuring arbitrary metrics, displayed within your application.\n\n\nopal-observations\n\n\nThe \nObservations\n plugin caters for the recording and\ndisplay of electronic observations data.\n\n\nopal-guidelines\n\n\nThe \nGuidelines\n plugin presents contextual links to clinical\nguidelines in use at your institution when viewing records of patients whose condition matches those guidelines.\n\n\nCan be used with national or local guidelines.\n\n\nopal-pathway\n\n\nThe \nPathway\n plugin provides a comprehensive extensible\nforms library for Opal applications.", 
            "title": "Plugin List"
        }, 
        {
            "location": "/guides/plugins_list/#opal-plugins-list", 
            "text": "The Opal ecosystem has a rich array of re-usable Open Source plugins that can be used as composable\nunits of functionality to build your application. This page lists some of the best available:", 
            "title": "Opal Plugins list"
        }, 
        {
            "location": "/guides/plugins_list/#opalcoresearch", 
            "text": "The Search plugin bundled with Opal core provides a default database based search implementation\nfor your application, and is scheduled to provide hooks for e.g. using Elastic Search as your\nsearch backend.", 
            "title": "opal.core.search"
        }, 
        {
            "location": "/guides/plugins_list/#opal-wardround", 
            "text": "The  Wardround  plugin provides structured virtual\nward rounds - sequential subsets of patients matching arbitrary criteria that the user may step\nthrough in order.", 
            "title": "opal-wardround"
        }, 
        {
            "location": "/guides/plugins_list/#opal-dischargesummary", 
            "text": "The  Discharge Summary  plugin allows the\nuser to generate templated letters from the data concerning an episode already held in the Application.", 
            "title": "opal-dischargesummary"
        }, 
        {
            "location": "/guides/plugins_list/#opal-referral", 
            "text": "The  Referral  plugin provides the plumbing for\nbuilding complex inter-team referrals within an institution.", 
            "title": "opal-referral"
        }, 
        {
            "location": "/guides/plugins_list/#opal-dashboard", 
            "text": "The  Dashboard  plugin allows for realtime clinical\ndashboards featuring arbitrary metrics, displayed within your application.", 
            "title": "opal-dashboard"
        }, 
        {
            "location": "/guides/plugins_list/#opal-observations", 
            "text": "The  Observations  plugin caters for the recording and\ndisplay of electronic observations data.", 
            "title": "opal-observations"
        }, 
        {
            "location": "/guides/plugins_list/#opal-guidelines", 
            "text": "The  Guidelines  plugin presents contextual links to clinical\nguidelines in use at your institution when viewing records of patients whose condition matches those guidelines.  Can be used with national or local guidelines.", 
            "title": "opal-guidelines"
        }, 
        {
            "location": "/guides/plugins_list/#opal-pathway", 
            "text": "The  Pathway  plugin provides a comprehensive extensible\nforms library for Opal applications.", 
            "title": "opal-pathway"
        }, 
        {
            "location": "/guides/datamodel/", 
            "text": "The Opal Data model\n\n\nThe Opal data model allows for patients to have multiple sequential or concurrent\n\nEpisodes of care\n. Some information is linked to an \nEpisode\n, some is linked to\na \nPatient\n.\n\n\n\n\nPatients\n\n\nA \nPatient\n may have many \nEpisodes\n. An \nEpisode\n is something like an Inpatient admission,\na telephone liaison, care under an outpatient clinic, an appointment at a drop in clinic.\nApplications or plugins may define their own \nEpisode\n categories, and a common pattern is to\nalter the display or available functionality by episode type. (e.g. You may associate\ntemplates for discharge summaries with particular episode types)\n\n\nA \nPatient\n will have \nSubrecords\n (such as e.g. Demographics) which follow them across multiple\nepisodes. These are information linked to a particular person, and should be implemented as\nDjango models that inherit from the \nopal.models.PatientSubrecord\n base class.\n\n\nEpisodes\n\n\nAn \nEpisode\n is linked to a \nPatient\n, and will contain some metadata about the type and date\nof the episode. The field \nEpisode.category_name\n stores a string representing the relevant\n\nEpisodeCategory\n e.g. ('Inpatient', 'Outpatient', ...), while a category object is returned\nfrom the \nepisode.category\n field. The start and end dates of an \nEpisode\n may be retrieved\nfrom the \nstart\n and \nend\n properties.\n\n\nAn \nEpisode\n will have \nSubrecords\n (such as e.g. Diagnosis) which are linked to this episode of\ncare. These should be implemented as Django models that inherit from the \nopal.models.EpisodeSubRecord\n\nbase class.\n\n\nRecords\n\n\nA \nSubrecord\n consists of a collection of fields that constitute a record. For example, one could\nimplement a Demographics \nSubrecord\n as follows:\n\n\nclass Demographics(PatientSubrecord):\n    name             = models.CharField(max_length=255, blank=True)\n    hospital_number  = models.CharField(max_length=255, blank=True)\n    date_of_birth    = models.DateField(null=True, blank=True)\n    ethnicity        = models.CharField(max_length=255, blank=True,\n                                        null=True)\n    gender           = models.CharField(max_length=255, blank=True,\n                                        null=True)\n\n\n\nSubrecords also define various properties that will provide metadata about their\ndisplay or structure, which are documented in the\n\nSubrecord reference material\n\n\nCore Clinical Data Model\n\n\nOpal ships with a wide range of core clinical concepts implemented as Abstract Subrecords.\nApplications that are generated via the \n$ opal startproject\n command will automatically\ncontain concrete implementations of these models in the application.\n\n\nFull documentation of these models is available in the \nArchetypes\n documentation.\n\n\nReference Data\n\n\nOpal comes with a set of clinical terminology data models out of the box. - we often\nwant to link our records to one of these - for example to record a type of condition\na patient might have, or a drug they are taking.\n\n\nFull documentation of these is available in the \nReference Data\n documentation.", 
            "title": "Data Model"
        }, 
        {
            "location": "/guides/datamodel/#the-opal-data-model", 
            "text": "The Opal data model allows for patients to have multiple sequential or concurrent Episodes of care . Some information is linked to an  Episode , some is linked to\na  Patient .", 
            "title": "The Opal Data model"
        }, 
        {
            "location": "/guides/datamodel/#patients", 
            "text": "A  Patient  may have many  Episodes . An  Episode  is something like an Inpatient admission,\na telephone liaison, care under an outpatient clinic, an appointment at a drop in clinic.\nApplications or plugins may define their own  Episode  categories, and a common pattern is to\nalter the display or available functionality by episode type. (e.g. You may associate\ntemplates for discharge summaries with particular episode types)  A  Patient  will have  Subrecords  (such as e.g. Demographics) which follow them across multiple\nepisodes. These are information linked to a particular person, and should be implemented as\nDjango models that inherit from the  opal.models.PatientSubrecord  base class.", 
            "title": "Patients"
        }, 
        {
            "location": "/guides/datamodel/#episodes", 
            "text": "An  Episode  is linked to a  Patient , and will contain some metadata about the type and date\nof the episode. The field  Episode.category_name  stores a string representing the relevant EpisodeCategory  e.g. ('Inpatient', 'Outpatient', ...), while a category object is returned\nfrom the  episode.category  field. The start and end dates of an  Episode  may be retrieved\nfrom the  start  and  end  properties.  An  Episode  will have  Subrecords  (such as e.g. Diagnosis) which are linked to this episode of\ncare. These should be implemented as Django models that inherit from the  opal.models.EpisodeSubRecord \nbase class.", 
            "title": "Episodes"
        }, 
        {
            "location": "/guides/datamodel/#records", 
            "text": "A  Subrecord  consists of a collection of fields that constitute a record. For example, one could\nimplement a Demographics  Subrecord  as follows:  class Demographics(PatientSubrecord):\n    name             = models.CharField(max_length=255, blank=True)\n    hospital_number  = models.CharField(max_length=255, blank=True)\n    date_of_birth    = models.DateField(null=True, blank=True)\n    ethnicity        = models.CharField(max_length=255, blank=True,\n                                        null=True)\n    gender           = models.CharField(max_length=255, blank=True,\n                                        null=True)  Subrecords also define various properties that will provide metadata about their\ndisplay or structure, which are documented in the Subrecord reference material", 
            "title": "Records"
        }, 
        {
            "location": "/guides/datamodel/#core-clinical-data-model", 
            "text": "Opal ships with a wide range of core clinical concepts implemented as Abstract Subrecords.\nApplications that are generated via the  $ opal startproject  command will automatically\ncontain concrete implementations of these models in the application.  Full documentation of these models is available in the  Archetypes  documentation.", 
            "title": "Core Clinical Data Model"
        }, 
        {
            "location": "/guides/datamodel/#reference-data", 
            "text": "Opal comes with a set of clinical terminology data models out of the box. - we often\nwant to link our records to one of these - for example to record a type of condition\na patient might have, or a drug they are taking.  Full documentation of these is available in the  Reference Data  documentation.", 
            "title": "Reference Data"
        }, 
        {
            "location": "/guides/episodes/", 
            "text": "Opal Episodes\n\n\nIn Opal a Patient may have one or many Episodes. An Episode contains some metadata\nsuch as a start and end date, and the type of episode. This may be an inpatient\nstay, an outpatient treatment, a telephone consultation  - or any other arbitrarily\ndefined period of care.\n\n\nEpisode Categories\n\n\nAn episode must have a related category. An Opal \nEpisodeCategory\n is a discoverable\nsubclass of \nopal.core.episodes.EpisodeCategory\n - such as \nInpatientEpisode\n,\n\nOutpatientEpisode\n or \nLiaisonEpisode\n.\n\n\nYou can access the current category of an episode via the \ncategory\n property, while\nit is represented in the database in the field \ncategory_name\n which will contain\nthe \ndisplay_name\n attribute of the relevant category.\n\n\nepisode = patient.episode_set.first()\nprint episode.category\n# \nopal.core.episode.InpatientEpisode object\n\n\nprint episode.category.display_name\n# \nInpatient\n\n\nprint episode.category_name\n# \nInpatient\n\n\n\n\n\nDetail templates\n\n\nThe category of an episode determines which template will be used to display it\non the detail page for the patient. This template is determined by looking up\nthe \ndetail_template\n attribute of the \nEpisodeCategory\n.\n\n\nepisode.category\nprint episode.category\n# \nopal.core.episode.InpatientEpisode object\n\n\nprint episode.category.detail_template\n# detail/inpatient.html\n\n\n\n\nDefault Category\n\n\nThe default category of episodes in an Opal application is set by the\n\nOpalApplication\n object's default_episode_category\nproperty.\n\n\nclass Application(application.OpalApplication):\n    default_episode_category = MyCategory.display_name\n\n\n\n\nEpisode stages\n\n\nAn Episode will frequently consist of a number of possible stages. For instance,\nfor an inpatient episode, a patient will first be an inpatient, and then an\nbe discharged, with an optional interim follow up stage for inpatients who have been\ndischarged but requrie further follow up.\n\n\nOpal stores the stage of an episode as a string in the \nstage\n property of an\n\nEpisode\n. The valid possible stages for a category are accessed from the\n\nget_stages\n method of the category.\n\n\nepisode.category.get_stages()\n# ['Inpatient', 'Followup', 'Discharged']\n\nepisode.category.has_stage('Followup')\n# True\n\n\n\n\nDefining your own EpisodeCategory\n\n\nAs EpisodeCategory is a \ndiscoverable\n we can define our own to\nmeet custom requirements.\n\n\nEpisode categories should be defined in a file named \nepisode_categories\n of\nyour application or plugin.\n\n\n# yourapp/episode_categories.py\n\nfrom opal.core import episodes\n\n\nclass DropInClinicEpisode(episodes.EpisodeCategory):\n    display_name = \nDrop-in clinic\n\n    detail_template = \ndetail/drop_in.html", 
            "title": "Episodes"
        }, 
        {
            "location": "/guides/episodes/#opal-episodes", 
            "text": "In Opal a Patient may have one or many Episodes. An Episode contains some metadata\nsuch as a start and end date, and the type of episode. This may be an inpatient\nstay, an outpatient treatment, a telephone consultation  - or any other arbitrarily\ndefined period of care.", 
            "title": "Opal Episodes"
        }, 
        {
            "location": "/guides/episodes/#episode-categories", 
            "text": "An episode must have a related category. An Opal  EpisodeCategory  is a discoverable\nsubclass of  opal.core.episodes.EpisodeCategory  - such as  InpatientEpisode , OutpatientEpisode  or  LiaisonEpisode .  You can access the current category of an episode via the  category  property, while\nit is represented in the database in the field  category_name  which will contain\nthe  display_name  attribute of the relevant category.  episode = patient.episode_set.first()\nprint episode.category\n#  opal.core.episode.InpatientEpisode object \n\nprint episode.category.display_name\n#  Inpatient \n\nprint episode.category_name\n#  Inpatient", 
            "title": "Episode Categories"
        }, 
        {
            "location": "/guides/episodes/#detail-templates", 
            "text": "The category of an episode determines which template will be used to display it\non the detail page for the patient. This template is determined by looking up\nthe  detail_template  attribute of the  EpisodeCategory .  episode.category\nprint episode.category\n#  opal.core.episode.InpatientEpisode object \n\nprint episode.category.detail_template\n# detail/inpatient.html", 
            "title": "Detail templates"
        }, 
        {
            "location": "/guides/episodes/#default-category", 
            "text": "The default category of episodes in an Opal application is set by the OpalApplication  object's default_episode_category\nproperty.  class Application(application.OpalApplication):\n    default_episode_category = MyCategory.display_name", 
            "title": "Default Category"
        }, 
        {
            "location": "/guides/episodes/#episode-stages", 
            "text": "An Episode will frequently consist of a number of possible stages. For instance,\nfor an inpatient episode, a patient will first be an inpatient, and then an\nbe discharged, with an optional interim follow up stage for inpatients who have been\ndischarged but requrie further follow up.  Opal stores the stage of an episode as a string in the  stage  property of an Episode . The valid possible stages for a category are accessed from the get_stages  method of the category.  episode.category.get_stages()\n# ['Inpatient', 'Followup', 'Discharged']\n\nepisode.category.has_stage('Followup')\n# True", 
            "title": "Episode stages"
        }, 
        {
            "location": "/guides/episodes/#defining-your-own-episodecategory", 
            "text": "As EpisodeCategory is a  discoverable  we can define our own to\nmeet custom requirements.  Episode categories should be defined in a file named  episode_categories  of\nyour application or plugin.  # yourapp/episode_categories.py\n\nfrom opal.core import episodes\n\n\nclass DropInClinicEpisode(episodes.EpisodeCategory):\n    display_name =  Drop-in clinic \n    detail_template =  detail/drop_in.html", 
            "title": "Defining your own EpisodeCategory"
        }, 
        {
            "location": "/guides/archetypes/", 
            "text": "Core Clinical Archetypes\n\n\nOpal ships with a wide range of core clinical concepts implemented as Abstract Subrecords.\nApplications that are generated via the \n$ opal startproject\n command will automatically\ncontain concrete implementations of these models in the application.\n\n\nCommon Metadata fields\n\n\nAll subrecords will contain the following fields, which are not repeated individually\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\ncreated_by\n\n\nFK\n\n\nUser ID\n\n\n\n\n\n\ncreated\n\n\nDate\n\n\n\n\n\n\n\n\nupdated_by\n\n\nFK User ID\n\n\n\n\n\n\n\n\nupdate\n\n\nDate\n\n\n\n\n\n\n\n\n\n\nThe details of each individual archetype are set out below:\n\n\nPatient Subrecords\n\n\nDemographics\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\nhospital_number\n\n\nChar\n\n\n255\n\n\n\n\n\n\nnhs_number\n\n\nChar\n\n\n255\n\n\n\n\n\n\ndate_of_birth\n\n\nDate\n\n\n\n\n\n\n\n\nplace_of_birth\n\n\nFKorFT(Destination)\n\n\n\n\n\n\n\n\nethnicity\n\n\nFKorFT(Ethnicity)\n\n\n\n\n\n\n\n\nsurname\n\n\nChar\n\n\n255\n\n\n\n\n\n\nfirst_name\n\n\nChar\n\n\n255\n\n\n\n\n\n\nmiddle_name\n\n\nChar\n\n\n255\n\n\n\n\n\n\nsex\n\n\nFKorFT(Gender)\n\n\n\n\n\n\n\n\n\n\nAllergies\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\ndrug\n\n\nFKorFT(Drug)\n\n\n\n\n\n\n\n\nprovisional\n\n\nBoolean\n\n\n\n\n\n\n\n\ndetails\n\n\nChar\n\n\n255\n\n\n\n\n\n\n\n\nEpisode Subrecords\n\n\nLocation\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\ncategory\n\n\nChar\n\n\n255\n\n\n\n\n\n\nhospital\n\n\nChar\n\n\n255\n\n\n\n\n\n\nward\n\n\nChar\n\n\n255\n\n\n\n\n\n\nbed\n\n\nChar\n\n\n255\n\n\n\n\n\n\n\n\nTreatment\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\ndrug\n\n\nFKorFT(Drug)\n\n\n\n\n\n\n\n\ndose\n\n\nChar\n\n\n255\n\n\n\n\n\n\nroute\n\n\nFKorFT(Drugroute)\n\n\n\n\n\n\n\n\nstart_date\n\n\nDate\n\n\n\n\n\n\n\n\nend_date\n\n\nDate\n\n\n\n\n\n\n\n\nfrequency\n\n\nFKorFT(Drugfreq)\n\n\n\n\n\n\n\n\n\n\nDiagnosis\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\ncondition\n\n\nFKorFT(Condition)\n\n\n\n\n\n\n\n\nprovisional\n\n\nBoolean\n\n\n\n\n\n\n\n\ndetails\n\n\nChar\n\n\n255\n\n\n\n\n\n\ndate_of_diagnosis\n\n\nDate\n\n\n\n\n\n\n\n\n\n\nPastMedicalHistory\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\ncondition\n\n\nFKorFT(Condition)\n\n\n\n\n\n\n\n\nyear\n\n\nChar\n\n\n4\n\n\n\n\n\n\ndetails\n\n\nChar\n\n\n255\n\n\n\n\n\n\n\n\nSymptomComplex\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\nsymptoms\n\n\nManyToMany(Symptom)\n\n\n\n\n\n\n\n\nduration\n\n\nChar\n\n\n255\n\n\n\n\n\n\ndetails\n\n\nText\n\n\n\n\n\n\n\n\n\n\nReferralRoute\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\ninternal\n\n\nNullBoolean\n\n\n\n\n\n\n\n\nreferral_route\n\n\nFKorFT(ReferralOrganisation)\n\n\n\n\n\n\n\n\nreferral_name\n\n\nChar\n\n\n255\n\n\n\n\n\n\ndate_of_referral\n\n\nDate\n\n\n\n\n\n\n\n\nreferral_team\n\n\nFKorFT(Speciality)\n\n\n\n\n\n\n\n\nreferral_reason\n\n\nFKorFT(ReferralReason)\n\n\n\n\n\n\n\n\n\n\nPatientConsultation\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\nwhen\n\n\nDatetime\n\n\n\n\n\n\n\n\ninitials\n\n\nChar\n\n\n255\n\n\n\n\n\n\nreason_for_interaction\n\n\nFKorFT(Patient_consultation_reason_for_interaction)\n\n\n\n\n\n\n\n\ndiscussion\n\n\nText\n\n\n\n\n\n\n\n\n\n\nInvestigation\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\ntest\n\n\nChar\n\n\n255\n\n\n\n\n\n\ndate_ordered\n\n\nDate\n\n\n\n\n\n\n\n\ndetails\n\n\nChar\n\n\n255\n\n\n\n\n\n\nmicroscopy\n\n\nChar\n\n\n255\n\n\n\n\n\n\norganism\n\n\nChar\n\n\n255\n\n\n\n\n\n\nsensitive_antibiotics\n\n\nChar\n\n\n255\n\n\n\n\n\n\nresistant_antibiotics\n\n\nChar\n\n\n255\n\n\n\n\n\n\nresult\n\n\nChar\n\n\n255\n\n\n\n\n\n\nigm\n\n\nChar\n\n\n20\n\n\n\n\n\n\nigg\n\n\nChar\n\n\n20\n\n\n\n\n\n\nvca_igm\n\n\nChar\n\n\n20\n\n\n\n\n\n\nvca_igg\n\n\nChar\n\n\n20\n\n\n\n\n\n\nebna_igg\n\n\nChar\n\n\n20\n\n\n\n\n\n\nhbsag\n\n\nChar\n\n\n20\n\n\n\n\n\n\nanti_hbs\n\n\nChar\n\n\n20\n\n\n\n\n\n\nanti_hbcore_igm\n\n\nChar\n\n\n20\n\n\n\n\n\n\nanti_hbcore_igg\n\n\nChar\n\n\n20\n\n\n\n\n\n\nrpr\n\n\nChar\n\n\n20\n\n\n\n\n\n\ntppa\n\n\nChar\n\n\n20\n\n\n\n\n\n\nviral_load\n\n\nChar\n\n\n20\n\n\n\n\n\n\nparasitaemia\n\n\nChar\n\n\n20\n\n\n\n\n\n\nhsv\n\n\nChar\n\n\n20\n\n\n\n\n\n\nvzv\n\n\nChar\n\n\n20\n\n\n\n\n\n\nsyphilis\n\n\nChar\n\n\n20\n\n\n\n\n\n\nc_difficile_antigen\n\n\nChar\n\n\n20\n\n\n\n\n\n\nc_difficile_toxin\n\n\nChar\n\n\n20\n\n\n\n\n\n\nspecies\n\n\nChar\n\n\n20\n\n\n\n\n\n\nhsv_1\n\n\nChar\n\n\n20\n\n\n\n\n\n\nhsv_2\n\n\nChar\n\n\n20\n\n\n\n\n\n\nenterovirus\n\n\nChar\n\n\n20\n\n\n\n\n\n\ncmv\n\n\nChar\n\n\n20\n\n\n\n\n\n\nebv\n\n\nChar\n\n\n20\n\n\n\n\n\n\ninfluenza_a\n\n\nChar\n\n\n20\n\n\n\n\n\n\ninfluenza_b\n\n\nChar\n\n\n20\n\n\n\n\n\n\nparainfluenza\n\n\nChar\n\n\n20\n\n\n\n\n\n\nmetapneumovirus\n\n\nChar\n\n\n20\n\n\n\n\n\n\nrsv\n\n\nChar\n\n\n20\n\n\n\n\n\n\nadenovirus\n\n\nChar\n\n\n20\n\n\n\n\n\n\nnorovirus\n\n\nChar\n\n\n20\n\n\n\n\n\n\nrotavirus\n\n\nChar\n\n\n20\n\n\n\n\n\n\ngiardia\n\n\nChar\n\n\n20\n\n\n\n\n\n\nentamoeba_histolytica\n\n\nChar\n\n\n20\n\n\n\n\n\n\ncryptosporidium\n\n\nChar\n\n\n20", 
            "title": "Archetypes"
        }, 
        {
            "location": "/guides/archetypes/#core-clinical-archetypes", 
            "text": "Opal ships with a wide range of core clinical concepts implemented as Abstract Subrecords.\nApplications that are generated via the  $ opal startproject  command will automatically\ncontain concrete implementations of these models in the application.", 
            "title": "Core Clinical Archetypes"
        }, 
        {
            "location": "/guides/archetypes/#common-metadata-fields", 
            "text": "All subrecords will contain the following fields, which are not repeated individually     Field  Type  Length      created_by  FK  User ID    created  Date     updated_by  FK User ID     update  Date      The details of each individual archetype are set out below:", 
            "title": "Common Metadata fields"
        }, 
        {
            "location": "/guides/archetypes/#patient-subrecords", 
            "text": "", 
            "title": "Patient Subrecords"
        }, 
        {
            "location": "/guides/archetypes/#demographics", 
            "text": "Field  Type  Length      hospital_number  Char  255    nhs_number  Char  255    date_of_birth  Date     place_of_birth  FKorFT(Destination)     ethnicity  FKorFT(Ethnicity)     surname  Char  255    first_name  Char  255    middle_name  Char  255    sex  FKorFT(Gender)", 
            "title": "Demographics"
        }, 
        {
            "location": "/guides/archetypes/#allergies", 
            "text": "Field  Type  Length      drug  FKorFT(Drug)     provisional  Boolean     details  Char  255", 
            "title": "Allergies"
        }, 
        {
            "location": "/guides/archetypes/#episode-subrecords", 
            "text": "", 
            "title": "Episode Subrecords"
        }, 
        {
            "location": "/guides/archetypes/#location", 
            "text": "Field  Type  Length      category  Char  255    hospital  Char  255    ward  Char  255    bed  Char  255", 
            "title": "Location"
        }, 
        {
            "location": "/guides/archetypes/#treatment", 
            "text": "Field  Type  Length      drug  FKorFT(Drug)     dose  Char  255    route  FKorFT(Drugroute)     start_date  Date     end_date  Date     frequency  FKorFT(Drugfreq)", 
            "title": "Treatment"
        }, 
        {
            "location": "/guides/archetypes/#diagnosis", 
            "text": "Field  Type  Length      condition  FKorFT(Condition)     provisional  Boolean     details  Char  255    date_of_diagnosis  Date", 
            "title": "Diagnosis"
        }, 
        {
            "location": "/guides/archetypes/#pastmedicalhistory", 
            "text": "Field  Type  Length      condition  FKorFT(Condition)     year  Char  4    details  Char  255", 
            "title": "PastMedicalHistory"
        }, 
        {
            "location": "/guides/archetypes/#symptomcomplex", 
            "text": "Field  Type  Length      symptoms  ManyToMany(Symptom)     duration  Char  255    details  Text", 
            "title": "SymptomComplex"
        }, 
        {
            "location": "/guides/archetypes/#referralroute", 
            "text": "Field  Type  Length      internal  NullBoolean     referral_route  FKorFT(ReferralOrganisation)     referral_name  Char  255    date_of_referral  Date     referral_team  FKorFT(Speciality)     referral_reason  FKorFT(ReferralReason)", 
            "title": "ReferralRoute"
        }, 
        {
            "location": "/guides/archetypes/#patientconsultation", 
            "text": "Field  Type  Length      when  Datetime     initials  Char  255    reason_for_interaction  FKorFT(Patient_consultation_reason_for_interaction)     discussion  Text", 
            "title": "PatientConsultation"
        }, 
        {
            "location": "/guides/archetypes/#investigation", 
            "text": "Field  Type  Length      test  Char  255    date_ordered  Date     details  Char  255    microscopy  Char  255    organism  Char  255    sensitive_antibiotics  Char  255    resistant_antibiotics  Char  255    result  Char  255    igm  Char  20    igg  Char  20    vca_igm  Char  20    vca_igg  Char  20    ebna_igg  Char  20    hbsag  Char  20    anti_hbs  Char  20    anti_hbcore_igm  Char  20    anti_hbcore_igg  Char  20    rpr  Char  20    tppa  Char  20    viral_load  Char  20    parasitaemia  Char  20    hsv  Char  20    vzv  Char  20    syphilis  Char  20    c_difficile_antigen  Char  20    c_difficile_toxin  Char  20    species  Char  20    hsv_1  Char  20    hsv_2  Char  20    enterovirus  Char  20    cmv  Char  20    ebv  Char  20    influenza_a  Char  20    influenza_b  Char  20    parainfluenza  Char  20    metapneumovirus  Char  20    rsv  Char  20    adenovirus  Char  20    norovirus  Char  20    rotavirus  Char  20    giardia  Char  20    entamoeba_histolytica  Char  20    cryptosporidium  Char  20", 
            "title": "Investigation"
        }, 
        {
            "location": "/guides/referencedata/", 
            "text": "Reference data\n\n\nLookup Lists allow us to create or reference canonical lists of available terminology as a\nforeign key, while also allowing synonymous terms, and a free text override.\n\n\nCore referencedata\n\n\nBy default, Opal will install some lookuplists for common things such as countries, drugs,\nconditions, and symptoms amongst others. The data for these is found in the\n\nopal.core.referencedata\n package.\n\n\nAdding a lookup list\n\n\nLookup lists are subclasses of \nopal.core.lookuplists.LookupList\n. Typically, a specific named\nlookup list will not need to do anything other than define a class that inherits from the base\nclass.\n\n\nThe custom field type \nopal.core.fields.ForeignKeyOrFreeText\n allows you to build interfaces\nthat cater for synonyms, and also allow the user to enter a free text string that is not in\nthe lookup list.\n\n\n# yourapp.models\nfrom django.db import models\nfrom opal.core import lookuplists\nfrom opal.core.fields import ForeignKeyOrFreeText\nfrom opal.models import EpisodeSubrecord\n\nclass TreatmentType(lookuplists.LookupList): pass\n\nclass Treatment(EpisodeSubrecord):\n    treatment = ForeignKeyOrFreeText(TreatmentType)\n    notes     = models.CharField(max_length=200)\n\n\n\n\nWhen you create your lookup list, you are creating a new model, so you will need a new migration\nto accompany it.\n\n\n$ python manage.py schemamigration --atuo yourapp\n$ python manage.py migrate yourapp\n\n\n\n\nThe lookup list will automatically be added to the admin, where you can manually add entries.\n\n\nReference data JSON API\n\n\nReference data is available over the Opal JSON API.\n\n\nYou may either load all lookuplists at once via the \n/api/v0.1/referencedata/\n endpoint, or\nindividual lookuplists by name - for example all diagnoses from \n/api/v0.1/referencedata/diagnosis/\n.\n\n\nThe reference data API also loads all synonyms in a flat list - the conversion of synonyms to their\ncanonical form is handled by the save mechanism of subrecords using \nForeignKeyOrFreeText\n fields.\n\n\nWorking with reference data on the front end\n\n\nThe Angular service \nReferencedata\n can be used to fetch all lookuplists at once - for instance\nloaded in the Angular routing for a controller in your application\n\n\nwhen('/my/route', {\n    controller: 'MyCtrl',\n    resolve: {\n           referencedata: function(Referencedata){ return Referencedata; }\n         }\n    }\n\n\n\n\nLookuplists will then be available either as properties of the \nreferencedata\n object.\n\n\nUsing referencedata in forms\n\n\nThe Opal \nform templatetag library\n allow us to easily incorporate\nreferencedata into the forms we build, either by detecting their use automatically when we have\n\nForeignKeyOrFreeText\n fields, or explicitly by passing an argument.\n\n\n{% load forms %}\n{% input field=\nDiagnosis.condition\n %}\n{% select label=\nList of Conditions\n lookuplist=\nreferencedata.diagnosis\n %}\n\n\n\n\nProviding data for lookuplists\n\n\nReference data can be provided at application or plugin level in a file named \nlookuplists.json\n found in the\n\n{{ app_or_plugin }}/data/lookuplists\n directory. This data should be in the Opal JSON format. The name value\nof each lookuplist should be the return value of that lookuplist's \nget_api_name()\n method (otherwise they\nwill fail to load), these can be found via \nSchemas\n\n\n{\n    \nname_of_lookuplist\n: [\n        {\n            \nname\n: \nValue of lookuplist item\n,\n            \nsynonyms\n: [\nSynonym 1\n,]\n\n        },\n    ]\n}\n\n\n\n\nOnce this data is stored in the lookuplists file, we can batch load it into our application with the command\n\n\npython manage.py load_lookup_lists\n\n\n\n\nManagement commands\n\n\nOpal ships with some management commands for importing and exporting lookup lists\n\n\ndump_lookup_lists\n\n\nPrints all loockuplists as JSON to stdout.\n\n\nWhen the \n--many-files\n argument is passd, the command will write each installed\nlookup list to a separate file in the \n./data/lookuplists\n directory of the\napplication.\n\n\nload_lookup_lists\n\n\nLoads lookup lists from all plugins/apps in the Opal JSON format. The lookup\nlists are expected to be in \n{{ app }}/data/lookuplists/lookuplists.json\n\n\nOptionally you can pass in an explicit filename with the \n-f\n argument.\n\n\ndelete_all_lookup_lists\n\n\nDeletes all currently lookuplist values and related synonyms", 
            "title": "Referencedata"
        }, 
        {
            "location": "/guides/referencedata/#reference-data", 
            "text": "Lookup Lists allow us to create or reference canonical lists of available terminology as a\nforeign key, while also allowing synonymous terms, and a free text override.", 
            "title": "Reference data"
        }, 
        {
            "location": "/guides/referencedata/#core-referencedata", 
            "text": "By default, Opal will install some lookuplists for common things such as countries, drugs,\nconditions, and symptoms amongst others. The data for these is found in the opal.core.referencedata  package.", 
            "title": "Core referencedata"
        }, 
        {
            "location": "/guides/referencedata/#adding-a-lookup-list", 
            "text": "Lookup lists are subclasses of  opal.core.lookuplists.LookupList . Typically, a specific named\nlookup list will not need to do anything other than define a class that inherits from the base\nclass.  The custom field type  opal.core.fields.ForeignKeyOrFreeText  allows you to build interfaces\nthat cater for synonyms, and also allow the user to enter a free text string that is not in\nthe lookup list.  # yourapp.models\nfrom django.db import models\nfrom opal.core import lookuplists\nfrom opal.core.fields import ForeignKeyOrFreeText\nfrom opal.models import EpisodeSubrecord\n\nclass TreatmentType(lookuplists.LookupList): pass\n\nclass Treatment(EpisodeSubrecord):\n    treatment = ForeignKeyOrFreeText(TreatmentType)\n    notes     = models.CharField(max_length=200)  When you create your lookup list, you are creating a new model, so you will need a new migration\nto accompany it.  $ python manage.py schemamigration --atuo yourapp\n$ python manage.py migrate yourapp  The lookup list will automatically be added to the admin, where you can manually add entries.", 
            "title": "Adding a lookup list"
        }, 
        {
            "location": "/guides/referencedata/#reference-data-json-api", 
            "text": "Reference data is available over the Opal JSON API.  You may either load all lookuplists at once via the  /api/v0.1/referencedata/  endpoint, or\nindividual lookuplists by name - for example all diagnoses from  /api/v0.1/referencedata/diagnosis/ .  The reference data API also loads all synonyms in a flat list - the conversion of synonyms to their\ncanonical form is handled by the save mechanism of subrecords using  ForeignKeyOrFreeText  fields.", 
            "title": "Reference data JSON API"
        }, 
        {
            "location": "/guides/referencedata/#working-with-reference-data-on-the-front-end", 
            "text": "The Angular service  Referencedata  can be used to fetch all lookuplists at once - for instance\nloaded in the Angular routing for a controller in your application  when('/my/route', {\n    controller: 'MyCtrl',\n    resolve: {\n           referencedata: function(Referencedata){ return Referencedata; }\n         }\n    }  Lookuplists will then be available either as properties of the  referencedata  object.", 
            "title": "Working with reference data on the front end"
        }, 
        {
            "location": "/guides/referencedata/#using-referencedata-in-forms", 
            "text": "The Opal  form templatetag library  allow us to easily incorporate\nreferencedata into the forms we build, either by detecting their use automatically when we have ForeignKeyOrFreeText  fields, or explicitly by passing an argument.  {% load forms %}\n{% input field= Diagnosis.condition  %}\n{% select label= List of Conditions  lookuplist= referencedata.diagnosis  %}", 
            "title": "Using referencedata in forms"
        }, 
        {
            "location": "/guides/referencedata/#providing-data-for-lookuplists", 
            "text": "Reference data can be provided at application or plugin level in a file named  lookuplists.json  found in the {{ app_or_plugin }}/data/lookuplists  directory. This data should be in the Opal JSON format. The name value\nof each lookuplist should be the return value of that lookuplist's  get_api_name()  method (otherwise they\nwill fail to load), these can be found via  Schemas  {\n     name_of_lookuplist : [\n        {\n             name :  Value of lookuplist item ,\n             synonyms : [ Synonym 1 ,]\n\n        },\n    ]\n}  Once this data is stored in the lookuplists file, we can batch load it into our application with the command  python manage.py load_lookup_lists", 
            "title": "Providing data for lookuplists"
        }, 
        {
            "location": "/guides/referencedata/#management-commands", 
            "text": "Opal ships with some management commands for importing and exporting lookup lists", 
            "title": "Management commands"
        }, 
        {
            "location": "/guides/referencedata/#dump_lookup_lists", 
            "text": "Prints all loockuplists as JSON to stdout.  When the  --many-files  argument is passd, the command will write each installed\nlookup list to a separate file in the  ./data/lookuplists  directory of the\napplication.", 
            "title": "dump_lookup_lists"
        }, 
        {
            "location": "/guides/referencedata/#load_lookup_lists", 
            "text": "Loads lookup lists from all plugins/apps in the Opal JSON format. The lookup\nlists are expected to be in  {{ app }}/data/lookuplists/lookuplists.json  Optionally you can pass in an explicit filename with the  -f  argument.", 
            "title": "load_lookup_lists"
        }, 
        {
            "location": "/guides/referencedata/#delete_all_lookup_lists", 
            "text": "Deletes all currently lookuplist values and related synonyms", 
            "title": "delete_all_lookup_lists"
        }, 
        {
            "location": "/guides/metadata/", 
            "text": "Application Metadata\n\n\nApplications commonly need to pass data to the front end which is not either clinical\ndata about a patient or episode of care, or coded \nreference data\n.\n\n\nOpal provides a simple API for working with such data via the \nopal.core.metadata.Metadata\n\n\ndiscoverable\n.\n\n\nmetadata is made available on the scopes for patient lists and\npatient details\n\n\nDefining Metadata\n\n\nDefining metadata uses the same pattern as all \ndiscoverable\n features, we\ndefine a subclass:\n\n\nfrom django.conf import settings\nfrom opal.core import metadata\n\nclass FavouriteColours(metadata.Metadata):\n    slug = 'favourite-colour'\n\n    @classmethod\n    def to_dict(klass, **kwargs):\n        return {'favourite_colour': settings.FAVOURITE_COLOUR}\n\n\n\n\nThe to_dict method will be passed the current user as a keyword argument.\n\n\nAccessing Metadata on the front end\n\n\nWe can access our metadata with the Angular \nMetadata\n service.\n\n\n// yourapp/routes.js\nwhen('/my/route', {\n    controller: 'MyCtrl',\n    resolve: {\n           metadata: function(Metadata){ return Metadata; }\n         }\n    }\n\n// yourapp/yourctrl.js\nangular.module('yourapp.controllers').controller(\n    'MyCtrl', function($scope, metadata){\n\n      $scope.favourite_colour = metadata.favourite_colour;\n      console.log($scope.favourite_colour);\n      // -\n Whatever settings.FAVOURITE_COLOUR is set to\n\n});", 
            "title": "Metadata"
        }, 
        {
            "location": "/guides/metadata/#application-metadata", 
            "text": "Applications commonly need to pass data to the front end which is not either clinical\ndata about a patient or episode of care, or coded  reference data .  Opal provides a simple API for working with such data via the  opal.core.metadata.Metadata  discoverable .  metadata is made available on the scopes for patient lists and\npatient details", 
            "title": "Application Metadata"
        }, 
        {
            "location": "/guides/metadata/#defining-metadata", 
            "text": "Defining metadata uses the same pattern as all  discoverable  features, we\ndefine a subclass:  from django.conf import settings\nfrom opal.core import metadata\n\nclass FavouriteColours(metadata.Metadata):\n    slug = 'favourite-colour'\n\n    @classmethod\n    def to_dict(klass, **kwargs):\n        return {'favourite_colour': settings.FAVOURITE_COLOUR}  The to_dict method will be passed the current user as a keyword argument.", 
            "title": "Defining Metadata"
        }, 
        {
            "location": "/guides/metadata/#accessing-metadata-on-the-front-end", 
            "text": "We can access our metadata with the Angular  Metadata  service.  // yourapp/routes.js\nwhen('/my/route', {\n    controller: 'MyCtrl',\n    resolve: {\n           metadata: function(Metadata){ return Metadata; }\n         }\n    }\n\n// yourapp/yourctrl.js\nangular.module('yourapp.controllers').controller(\n    'MyCtrl', function($scope, metadata){\n\n      $scope.favourite_colour = metadata.favourite_colour;\n      console.log($scope.favourite_colour);\n      // -  Whatever settings.FAVOURITE_COLOUR is set to\n\n});", 
            "title": "Accessing Metadata on the front end"
        }, 
        {
            "location": "/guides/working_with_data_in_angular/", 
            "text": "Working with Clinical Data in Angular\n\n\nOpal provides a range of Angular services for working with clinical data on\nthe front end.\n\n\nThe Episode Service\n\n\nThe \nEpisode\n Service will return an Episode object that represents an individual\nepisode of care, and provides various methods for interacting with both episodes and\nsubrecords.\n\n\nvar episode = new Episode(my_episode_data);\nvar editing = episode.makeCopy();\nediting.start_date = new Date();\nepisode.save(editing);\n\n\n\n\nThe Item Service\n\n\nThe \nItem\n Service returns Item objects that represent individual instances of\nsubrecords. They must be initialised with an episode and a schema representing\nthe available data fields for this subrecord type.\n\n\nvar diagnosis = new Item({}, episode, $rootScope.fields.diagnosis);\nvar editing = diagnosis.makeCopy();\nediting.date_of_diagnosis = new Date();\ndiagnosis.save(editing);\n\n\n\n\nSubrecord CRUD modals\n\n\nThe \nEpisode\n service has a convenient API that allows you to open a modal to edit\na new or existing subrecord.\n\n\nepisode.recordEditor.newItem('diagnosis'):\n// -\n Opens a modal with the diagnosis form and will create a new diagnosis on save\n\nepisode.recordEditor.editItem('diagnosis', 0);\n// -\n Opens a modal that allows the user to edit the first diagnosis\n\nepisode.recordEditor.deleteItem('diagnosis', 0);\n// -\n Prompts the user to confirm the deletion of the first diagnosis\n\n\n\n\nCustomising Subrecords\n\n\nSometimes our application will wish to customise a subrecord of a particular type - for\ninstance to set default values. We do this by setting a custom record service.\n\n\nFirst, we set the name of the service to use as a constructor for this record type as\na property on the model.\n\n\n# yourapp/models.py\nclass Diagnosis(models.Diagnosis):\n    _angular_service = 'Diagnosis'\n\n\n\n\nNext we must include the file with our new service in our application.\n\n\n# yourapp/__init__.py\nclass YourApp(application.OpalApplication):\n    javascripts = [..., 'js/diagnosis.js', ...]\n\n\n\n\nFinally we define an Angular service which expects to be passed the record in order\nto set defaults.\n\n\n// yourapp/static/js/diagnosis.js\nangular.module('opal.records').factory('Diagnosis', function(){\n    return function(record){\n        if(!record.date_of_diagnosis){ record.date_of_diagnosis = moment()}\n        return record;\n    }\n});", 
            "title": "Angular Models"
        }, 
        {
            "location": "/guides/working_with_data_in_angular/#working-with-clinical-data-in-angular", 
            "text": "Opal provides a range of Angular services for working with clinical data on\nthe front end.", 
            "title": "Working with Clinical Data in Angular"
        }, 
        {
            "location": "/guides/working_with_data_in_angular/#the-episode-service", 
            "text": "The  Episode  Service will return an Episode object that represents an individual\nepisode of care, and provides various methods for interacting with both episodes and\nsubrecords.  var episode = new Episode(my_episode_data);\nvar editing = episode.makeCopy();\nediting.start_date = new Date();\nepisode.save(editing);", 
            "title": "The Episode Service"
        }, 
        {
            "location": "/guides/working_with_data_in_angular/#the-item-service", 
            "text": "The  Item  Service returns Item objects that represent individual instances of\nsubrecords. They must be initialised with an episode and a schema representing\nthe available data fields for this subrecord type.  var diagnosis = new Item({}, episode, $rootScope.fields.diagnosis);\nvar editing = diagnosis.makeCopy();\nediting.date_of_diagnosis = new Date();\ndiagnosis.save(editing);", 
            "title": "The Item Service"
        }, 
        {
            "location": "/guides/working_with_data_in_angular/#subrecord-crud-modals", 
            "text": "The  Episode  service has a convenient API that allows you to open a modal to edit\na new or existing subrecord.  episode.recordEditor.newItem('diagnosis'):\n// -  Opens a modal with the diagnosis form and will create a new diagnosis on save\n\nepisode.recordEditor.editItem('diagnosis', 0);\n// -  Opens a modal that allows the user to edit the first diagnosis\n\nepisode.recordEditor.deleteItem('diagnosis', 0);\n// -  Prompts the user to confirm the deletion of the first diagnosis", 
            "title": "Subrecord CRUD modals"
        }, 
        {
            "location": "/guides/working_with_data_in_angular/#customising-subrecords", 
            "text": "Sometimes our application will wish to customise a subrecord of a particular type - for\ninstance to set default values. We do this by setting a custom record service.  First, we set the name of the service to use as a constructor for this record type as\na property on the model.  # yourapp/models.py\nclass Diagnosis(models.Diagnosis):\n    _angular_service = 'Diagnosis'  Next we must include the file with our new service in our application.  # yourapp/__init__.py\nclass YourApp(application.OpalApplication):\n    javascripts = [..., 'js/diagnosis.js', ...]  Finally we define an Angular service which expects to be passed the record in order\nto set defaults.  // yourapp/static/js/diagnosis.js\nangular.module('opal.records').factory('Diagnosis', function(){\n    return function(record){\n        if(!record.date_of_diagnosis){ record.date_of_diagnosis = moment()}\n        return record;\n    }\n});", 
            "title": "Customising Subrecords"
        }, 
        {
            "location": "/guides/flow/", 
            "text": "Flow hooks in Opal\n\n\nOpal provides various hooks that developers can use to customise behaviour at certain key points\nin a patient's journey through a clinical service - for example when a patient is discharged.\n\n\nThese hooks are associated with verbs \nenter\n, \nexit\n.\n\n\nThe Flow service\n\n\nYour application scaffold will have created a file at\n\n./yourapp/assets/js/yourapp/services/flow.js\n. This file will declare an angular service that\nyour application will use to determine how to move to the correct next step for a patient.\n\n\nTo enable this, we must set the following setting:\n\n\n# settings.py\nOPAL_FLOW_SERVICE = 'MyAppFlow'\n\n\n\n\nFlow services must define an \nenter\n and an \nexit\n method, which both return the appropriate\nangular controller and template to use. Although Opal provides sensible default controllers and\ntemplates for these common actions, applications with custom flows may customise these methods\nas required.\n\n\nThe enter verb\n\n\nThe enter verb is called when a patient is added to a service - for instance by adding a patient\nto a team list.\n\n\nImplementations of enter are expected to return a dictionary of the controller and template they\nwish to be called.\n\n\nenter: function(){\n        return {\n            'controller': 'HospitalNumberCtrl',\n            'template'  : '/templates/modals/hospital_number.html/'\n        }\n    }\n\n\n\nA common strategy is to examine angular \n$route\n or \n$routeParams\n to determine where the user is\nin the application.\nFor instance you may wish to have custom controllers for a particular patient list, or the search\nresults page.\n\n\nThe exit verb\n\n\nThe exit verb is called when a patient is moving through a service - for instance when we\ndischarge a patient, or end\none phase of a clinical pathway.\n\n\nImplementations of exit are expected to return a dictionary of the controller and template\nthey wish to be called.\n\n\nThe enter verb will receive the episode that we are acting on - for instance a controller\nthat acts differently for deceased patients might look as follows\n\n\nexit: function(episode){\n      if(episode.demographics[0].deceased){\n          return {\n              'controller': 'DeceasedDischargeEpisodeCtrl',\n              'template'  : '/templates/modals/deceased_discharge.html/'\n          }\n      }\n      return {\n          'controller': 'DischargeEpisodeCtrl',\n          'template'  : '/templates/modals/discharge_episode.html/'\n      }\n    }", 
            "title": "Flow"
        }, 
        {
            "location": "/guides/flow/#flow-hooks-in-opal", 
            "text": "Opal provides various hooks that developers can use to customise behaviour at certain key points\nin a patient's journey through a clinical service - for example when a patient is discharged.  These hooks are associated with verbs  enter ,  exit .", 
            "title": "Flow hooks in Opal"
        }, 
        {
            "location": "/guides/flow/#the-flow-service", 
            "text": "Your application scaffold will have created a file at ./yourapp/assets/js/yourapp/services/flow.js . This file will declare an angular service that\nyour application will use to determine how to move to the correct next step for a patient.  To enable this, we must set the following setting:  # settings.py\nOPAL_FLOW_SERVICE = 'MyAppFlow'  Flow services must define an  enter  and an  exit  method, which both return the appropriate\nangular controller and template to use. Although Opal provides sensible default controllers and\ntemplates for these common actions, applications with custom flows may customise these methods\nas required.", 
            "title": "The Flow service"
        }, 
        {
            "location": "/guides/flow/#the-enter-verb", 
            "text": "The enter verb is called when a patient is added to a service - for instance by adding a patient\nto a team list.  Implementations of enter are expected to return a dictionary of the controller and template they\nwish to be called.  enter: function(){\n        return {\n            'controller': 'HospitalNumberCtrl',\n            'template'  : '/templates/modals/hospital_number.html/'\n        }\n    }  A common strategy is to examine angular  $route  or  $routeParams  to determine where the user is\nin the application.\nFor instance you may wish to have custom controllers for a particular patient list, or the search\nresults page.", 
            "title": "The enter verb"
        }, 
        {
            "location": "/guides/flow/#the-exit-verb", 
            "text": "The exit verb is called when a patient is moving through a service - for instance when we\ndischarge a patient, or end\none phase of a clinical pathway.  Implementations of exit are expected to return a dictionary of the controller and template\nthey wish to be called.  The enter verb will receive the episode that we are acting on - for instance a controller\nthat acts differently for deceased patients might look as follows  exit: function(episode){\n      if(episode.demographics[0].deceased){\n          return {\n              'controller': 'DeceasedDischargeEpisodeCtrl',\n              'template'  : '/templates/modals/deceased_discharge.html/'\n          }\n      }\n      return {\n          'controller': 'DischargeEpisodeCtrl',\n          'template'  : '/templates/modals/discharge_episode.html/'\n      }\n    }", 
            "title": "The exit verb"
        }, 
        {
            "location": "/guides/roles_and_permissions/", 
            "text": "Roles \n Permissions in Opal\n\n\nOpal provides some global per-user flags, which are set in the UserProfile model, as well\nas more detailed permissions available via roles.\n\n\nThe UserProfile model\n\n\nSome global properties about Users are set in the \nopal.models.UserProfile\n\nmodel.\n\n\nUserProfile._can_extract\n\n\nBoolean flag to determine whether this user is allowed to download data extracts\nfrom the system\n\n\nUserProfile._force_password_change\n\n\nBoolean flag to determine whether we would like to force this user to change\ntheir password on their next login. This defaults to \nTrue\n when the \nUser\n is\nfirst created.\n\n\nUserProfile._readonly\n\n\nBoolean flag to determine whether this user has read-only access.\n\n\nUserProfile._restricted_only\n\n\nBoolean flag to determine whether this user should be only shown teams for which they\nhave explicitly been given permission to view or whether they should also see the list of\ngeneral access teams.\n\n\nUserProfile.get_roles()\n\n\nReturn a dictionary of roles in various contexts for our user\n\n\nprofile.get_roles() # -\n\n{\n    'default': ['doctor'],\n    'some_research_study': ['Clinical Lead']\n}\n\n\n\nUserProfile.get_teams()\n\n\nReturn a list of \nTeam\n objects that this user should be allowed to see.\n\n\nRoles\n\n\nA user may be given a particular role. These can be either global - in which case they are\nreturned in the 'default' section of the roles dict from \nget_roles()\n, or specific to\na team.", 
            "title": "Roles & Permissions"
        }, 
        {
            "location": "/guides/roles_and_permissions/#roles-permissions-in-opal", 
            "text": "Opal provides some global per-user flags, which are set in the UserProfile model, as well\nas more detailed permissions available via roles.", 
            "title": "Roles &amp; Permissions in Opal"
        }, 
        {
            "location": "/guides/roles_and_permissions/#the-userprofile-model", 
            "text": "Some global properties about Users are set in the  opal.models.UserProfile \nmodel.", 
            "title": "The UserProfile model"
        }, 
        {
            "location": "/guides/roles_and_permissions/#userprofile_can_extract", 
            "text": "Boolean flag to determine whether this user is allowed to download data extracts\nfrom the system", 
            "title": "UserProfile._can_extract"
        }, 
        {
            "location": "/guides/roles_and_permissions/#userprofile_force_password_change", 
            "text": "Boolean flag to determine whether we would like to force this user to change\ntheir password on their next login. This defaults to  True  when the  User  is\nfirst created.", 
            "title": "UserProfile._force_password_change"
        }, 
        {
            "location": "/guides/roles_and_permissions/#userprofile_readonly", 
            "text": "Boolean flag to determine whether this user has read-only access.", 
            "title": "UserProfile._readonly"
        }, 
        {
            "location": "/guides/roles_and_permissions/#userprofile_restricted_only", 
            "text": "Boolean flag to determine whether this user should be only shown teams for which they\nhave explicitly been given permission to view or whether they should also see the list of\ngeneral access teams.", 
            "title": "UserProfile._restricted_only"
        }, 
        {
            "location": "/guides/roles_and_permissions/#userprofileget_roles", 
            "text": "Return a dictionary of roles in various contexts for our user  profile.get_roles() # - \n{\n    'default': ['doctor'],\n    'some_research_study': ['Clinical Lead']\n}", 
            "title": "UserProfile.get_roles()"
        }, 
        {
            "location": "/guides/roles_and_permissions/#userprofileget_teams", 
            "text": "Return a list of  Team  objects that this user should be allowed to see.", 
            "title": "UserProfile.get_teams()"
        }, 
        {
            "location": "/guides/roles_and_permissions/#roles", 
            "text": "A user may be given a particular role. These can be either global - in which case they are\nreturned in the 'default' section of the roles dict from  get_roles() , or specific to\na team.", 
            "title": "Roles"
        }, 
        {
            "location": "/guides/tagging/", 
            "text": "Tagging\n\n\nEpisodes in Opal may be tagged. This is commonly used as a mechanism to\nrecord that a particular team is looking after a patient - via \nTaggedPatientList\n,\nbut also to group patients.\n\n\nFor instance, we might like to 'tag' episodes with a particular string when some\nparticular event occurs so that we can run reports or analyse these groups later.\n\n\nThe \"Teams\" modal in list and detail views, is actually an interface over updating\nthe tagging of the episode in question.\n\n\nMetadata concerning tags can be found via the Options API.", 
            "title": "Tagging"
        }, 
        {
            "location": "/guides/tagging/#tagging", 
            "text": "Episodes in Opal may be tagged. This is commonly used as a mechanism to\nrecord that a particular team is looking after a patient - via  TaggedPatientList ,\nbut also to group patients.  For instance, we might like to 'tag' episodes with a particular string when some\nparticular event occurs so that we can run reports or analyse these groups later.  The \"Teams\" modal in list and detail views, is actually an interface over updating\nthe tagging of the episode in question.  Metadata concerning tags can be found via the Options API.", 
            "title": "Tagging"
        }, 
        {
            "location": "/guides/json_api/", 
            "text": "The Opal JSON API\n\n\nOpal features a rich, self documenting set of open JSON APIs.\n\n\nOpal applications are generally simply a collection of Browser-based clients\nfor these APIs.\n\n\nOpal uses Django Rest Framework to provide it's APIs.\n\n\nYou may examine the API of any running Opal application by navigating to the url \n/api/v0.1/\n\n\nAdding your own APIs\n\n\nYou can add your own APIs to the Opal API namespace \nfrom plugins\n or\nby registering them directly with the router.\n\n\nfrom rest_framework.viewsets import ViewSet\nfrom rest_framework.response import Response\nfrom opal.core.api import router\n\n\nclass PingViewSet(ViewSet):\n    def list(self, request): return Response('pong')\n\nrouter.register('ping', PingViewSet)\n\n\n\n\nAPIs can make use of method decorators \nitem_from_pk\n, \nepisode_from_pk\n and \npatient_from_pk\n that will replace a pk passed into a method with self.model, Episode or Patient respectively.\n\n\ne.g.\n\n\nclass SomeBespokeViewset(viewsets.Viewset):\n  model = ClinicalInformation\n\n  @item_from_pk\n  def some_api_endpoint(self, request, clinical_information):\n    # Some logic\n\n\n\n\nAuthentication\n\n\nOpal uses\n\nDjango Rest Framework\n (DRF) to\nprovide APIs. DRF ships with multiple authentication\nmechanisms which are highly configurable. By default, Opal applications (e.g. created with\nthe Opal scaffolding) will enable Session and Token based authentication.\n\n\nMore details on DRF authentication are available in\n\ntheir excellent documentation\n.\n\n\nPermissioning\n\n\nOpal uses the DRF permissions system for JSON APIs.\n\n\nOpal ships with \nopal.core.api.LoginRequiredViewset\n which adds the permission class\nIsAuthenticated by default. Developers are strongly encouraged to ensure that APIs which\nserve patient data are restricted to logged in users.\n\n\nMore details on DRF permissions are available \nin the DRF documentation\n\n.\n\n\nSession Based\n\n\nSession based authentication enables users logged in via the standard Django auth mechanism\nto use the API. This is what most Opal applications in the browser will use.\n\n\nToken Based\n\n\nToken based authentication is targeted at other applications consuming the Opal API, and\nrequires the application to pass an API token as a header. These tokens must be associated\nwith a Django user, and can be created in the Django Admin.\n\n\nAn example of a client using token based authentication is found in the\n\nOpalAPI\n project.", 
            "title": "JSON API"
        }, 
        {
            "location": "/guides/json_api/#the-opal-json-api", 
            "text": "Opal features a rich, self documenting set of open JSON APIs.  Opal applications are generally simply a collection of Browser-based clients\nfor these APIs.  Opal uses Django Rest Framework to provide it's APIs.  You may examine the API of any running Opal application by navigating to the url  /api/v0.1/", 
            "title": "The Opal JSON API"
        }, 
        {
            "location": "/guides/json_api/#adding-your-own-apis", 
            "text": "You can add your own APIs to the Opal API namespace  from plugins  or\nby registering them directly with the router.  from rest_framework.viewsets import ViewSet\nfrom rest_framework.response import Response\nfrom opal.core.api import router\n\n\nclass PingViewSet(ViewSet):\n    def list(self, request): return Response('pong')\n\nrouter.register('ping', PingViewSet)  APIs can make use of method decorators  item_from_pk ,  episode_from_pk  and  patient_from_pk  that will replace a pk passed into a method with self.model, Episode or Patient respectively.  e.g.  class SomeBespokeViewset(viewsets.Viewset):\n  model = ClinicalInformation\n\n  @item_from_pk\n  def some_api_endpoint(self, request, clinical_information):\n    # Some logic", 
            "title": "Adding your own APIs"
        }, 
        {
            "location": "/guides/json_api/#authentication", 
            "text": "Opal uses Django Rest Framework  (DRF) to\nprovide APIs. DRF ships with multiple authentication\nmechanisms which are highly configurable. By default, Opal applications (e.g. created with\nthe Opal scaffolding) will enable Session and Token based authentication.  More details on DRF authentication are available in their excellent documentation .", 
            "title": "Authentication"
        }, 
        {
            "location": "/guides/json_api/#permissioning", 
            "text": "Opal uses the DRF permissions system for JSON APIs.  Opal ships with  opal.core.api.LoginRequiredViewset  which adds the permission class\nIsAuthenticated by default. Developers are strongly encouraged to ensure that APIs which\nserve patient data are restricted to logged in users.  More details on DRF permissions are available  in the DRF documentation \n.", 
            "title": "Permissioning"
        }, 
        {
            "location": "/guides/json_api/#session-based", 
            "text": "Session based authentication enables users logged in via the standard Django auth mechanism\nto use the API. This is what most Opal applications in the browser will use.", 
            "title": "Session Based"
        }, 
        {
            "location": "/guides/json_api/#token-based", 
            "text": "Token based authentication is targeted at other applications consuming the Opal API, and\nrequires the application to pass an API token as a header. These tokens must be associated\nwith a Django user, and can be created in the Django Admin.  An example of a client using token based authentication is found in the OpalAPI  project.", 
            "title": "Token Based"
        }, 
        {
            "location": "/guides/theming/", 
            "text": "Theming your Opal application\n\n\nOpal applicatoins ship with a basic theme that is good enough to use in production,\nbut we expect that most applications will wish to customise the look and feel.\nAccordingly, we support a range of different theming options.\n\n\nBasic Options\n\n\nBasic theming comes in the form of settings which can be tweaked.\nYou can give your application a different name, logo, and set the version number.\n\n\nOverriding CSS and templates\n\n\nYou can override the CSS to change the core colours et cetera, and there are some\nkey templates that you can tweak.\n\n\nChanging the home page.\n\n\nBy default, the home page of an opal application simply renders the \nwelcome.html\n\ntemplate.\n\n\nForm styles\n\n\nOpal defaults to using Bootstrap \nform-horizontal\n style widgets. That means that the\nlabel is rendered on the same line as the form widget. You can change this to the\nvertical (default Bootstrap style )for an individual form widget by passing the \nstyle\n\nargument:\n\n\n{% input field=\nDemographics.first_name\n style=\nvertical\n %}\n\n\n\n\nCustom Themes\n\n\nComprehensive re-skins likely require you to write your own Opal theme. You can\ndo this within an application directly, or if you definitely have a theme you\nwant to use in multiple applications, you can write a theme plugin.\n\n\nExample themes\n\n\nWe have created a number of example themes for Opal. These are intended to demonstrate\nthe possibilities rather than for production use.\n\n\n\n\nSlack Skin\n\n\nGoogle Inbox Skin", 
            "title": "Theming"
        }, 
        {
            "location": "/guides/theming/#theming-your-opal-application", 
            "text": "Opal applicatoins ship with a basic theme that is good enough to use in production,\nbut we expect that most applications will wish to customise the look and feel.\nAccordingly, we support a range of different theming options.", 
            "title": "Theming your Opal application"
        }, 
        {
            "location": "/guides/theming/#basic-options", 
            "text": "Basic theming comes in the form of settings which can be tweaked.\nYou can give your application a different name, logo, and set the version number.", 
            "title": "Basic Options"
        }, 
        {
            "location": "/guides/theming/#overriding-css-and-templates", 
            "text": "You can override the CSS to change the core colours et cetera, and there are some\nkey templates that you can tweak.", 
            "title": "Overriding CSS and templates"
        }, 
        {
            "location": "/guides/theming/#changing-the-home-page", 
            "text": "By default, the home page of an opal application simply renders the  welcome.html \ntemplate.", 
            "title": "Changing the home page."
        }, 
        {
            "location": "/guides/theming/#form-styles", 
            "text": "Opal defaults to using Bootstrap  form-horizontal  style widgets. That means that the\nlabel is rendered on the same line as the form widget. You can change this to the\nvertical (default Bootstrap style )for an individual form widget by passing the  style \nargument:  {% input field= Demographics.first_name  style= vertical  %}", 
            "title": "Form styles"
        }, 
        {
            "location": "/guides/theming/#custom-themes", 
            "text": "Comprehensive re-skins likely require you to write your own Opal theme. You can\ndo this within an application directly, or if you definitely have a theme you\nwant to use in multiple applications, you can write a theme plugin.", 
            "title": "Custom Themes"
        }, 
        {
            "location": "/guides/theming/#example-themes", 
            "text": "We have created a number of example themes for Opal. These are intended to demonstrate\nthe possibilities rather than for production use.   Slack Skin  Google Inbox Skin", 
            "title": "Example themes"
        }, 
        {
            "location": "/guides/templates/", 
            "text": "Templates in Opal\n\n\nOpal uses a mixture of Django and Angular templates.\n\n\nAngular and Django templates, living in harmony\n\n\nNatively, both Angular and Django use the {{ ... }} syntax for interpolation in\ntemplates. In order for Opal to be compatible with both Django \nand\n Angular\ninterpolation, we use the \n[[ ... ]]\n notation for Angular interpolation and\nthe {{ ... }} syntax for Django interpolation, which allows us to include\nDjango template interpolation in templates designed to be rendered by Angular on\nthe client side.\n\n\n!-- app_details_snippet.html --\n\n\n\n!-- Django interpolation uses {{ ... }} --\n\n{{ OPAL_BRAND_NAME }}\n\n\n!-- Angular interpolation uses [[ ... ]] --\n\n[[ OPAL_BRAND_NAME ]]\n\n\n\n\nGeneric Template URL\n\n\nOn many occasions we want to fetch a template from the server in our Angular code\nwithout any further processing. Opal provides a default catchall HTML template url which\nwill render .html files direct from disk.\n\n\n# opal.urls\n\nurl(r'templates/(?P\ntemplate_name\n[a-z_/]+.html)', views.RawTemplateView.as_view())\n\n\n\n\nSo if our template is at \n./myapp/templates/foo/bar.html\n, then the url\n\n/templates/foo/bar.html\n will return it.\n\n\nOverriding Opal templates\n\n\nOpal's built-in templates can help you be productive rapidly, and prototype an\napplication quickly. However, as your application develops you are likely to\nneed to override Opal's templates.\n\n\nHow to override a template\n\n\nIn general, if you want to override an Opal template, you will need to place a file\nin your application with the same filename, and at the same relative location\nas that file in Opal's source code. The Django template loader system will then\nselect the file from your application rather than the file in the Opal templates\ndirectory.\n\n\nFor example if you want to override the default form for the Demographics\nmodel, you create a new template:\n\n\nyourapp/\n    templates/\n        forms/\n            demographic_form.html\n\n\n\n\nHow do I know which template I need to override?\n\n\nYou will need to look at the templates in the Opal source\ncode and work out which one is being used.\n\n\nTemplates related to the display or editing of \nsubrecords\n, are named\naccording to the \nAPI name\n of the subrecord\nand can be found in \n./templates/forms\n or \n./templates/records/\n.\n\n\nFor instance, the demographics form is located in \n./templates/forms/demographics_form.html\n and\nthe display template for a demographics instance is located in\n\n./templates/records/demographics.html\n.\n\n\nTemplates related to \nform widgets\n are found in \n./templates/_helpers\n and named after the\ntype of widget they represent. For instance, the template for the \n{% input %}\n\ntemplatetag is found at \n./templates/_helpers/input.html\n\n\nOnce logged in, the \nmain layout\n of the application is provided by the template at\n\n./templates/opal.html\n. By default, this simply extends\n\n./templates/app_layouts/layout_base.html\n.\n\n\nThe \npatient detail\n page is provided by the template at \n./templates/patient_detail.html\n. By\ndefault this uses the page layout from \n./templates/patient_detail_base.html\n.\n\n\nThe detail template for an \nepisode\n of any given episode category is set on the\n\ncategory class\n.", 
            "title": "Templates"
        }, 
        {
            "location": "/guides/templates/#templates-in-opal", 
            "text": "Opal uses a mixture of Django and Angular templates.", 
            "title": "Templates in Opal"
        }, 
        {
            "location": "/guides/templates/#angular-and-django-templates-living-in-harmony", 
            "text": "Natively, both Angular and Django use the {{ ... }} syntax for interpolation in\ntemplates. In order for Opal to be compatible with both Django  and  Angular\ninterpolation, we use the  [[ ... ]]  notation for Angular interpolation and\nthe {{ ... }} syntax for Django interpolation, which allows us to include\nDjango template interpolation in templates designed to be rendered by Angular on\nthe client side.  !-- app_details_snippet.html --  !-- Django interpolation uses {{ ... }} -- \n{{ OPAL_BRAND_NAME }} !-- Angular interpolation uses [[ ... ]] -- \n[[ OPAL_BRAND_NAME ]]", 
            "title": "Angular and Django templates, living in harmony"
        }, 
        {
            "location": "/guides/templates/#generic-template-url", 
            "text": "On many occasions we want to fetch a template from the server in our Angular code\nwithout any further processing. Opal provides a default catchall HTML template url which\nwill render .html files direct from disk.  # opal.urls\n\nurl(r'templates/(?P template_name [a-z_/]+.html)', views.RawTemplateView.as_view())  So if our template is at  ./myapp/templates/foo/bar.html , then the url /templates/foo/bar.html  will return it.", 
            "title": "Generic Template URL"
        }, 
        {
            "location": "/guides/templates/#overriding-opal-templates", 
            "text": "Opal's built-in templates can help you be productive rapidly, and prototype an\napplication quickly. However, as your application develops you are likely to\nneed to override Opal's templates.", 
            "title": "Overriding Opal templates"
        }, 
        {
            "location": "/guides/templates/#how-to-override-a-template", 
            "text": "In general, if you want to override an Opal template, you will need to place a file\nin your application with the same filename, and at the same relative location\nas that file in Opal's source code. The Django template loader system will then\nselect the file from your application rather than the file in the Opal templates\ndirectory.  For example if you want to override the default form for the Demographics\nmodel, you create a new template:  yourapp/\n    templates/\n        forms/\n            demographic_form.html", 
            "title": "How to override a template"
        }, 
        {
            "location": "/guides/templates/#how-do-i-know-which-template-i-need-to-override", 
            "text": "You will need to look at the templates in the Opal source\ncode and work out which one is being used.  Templates related to the display or editing of  subrecords , are named\naccording to the  API name  of the subrecord\nand can be found in  ./templates/forms  or  ./templates/records/ .  For instance, the demographics form is located in  ./templates/forms/demographics_form.html  and\nthe display template for a demographics instance is located in ./templates/records/demographics.html .  Templates related to  form widgets  are found in  ./templates/_helpers  and named after the\ntype of widget they represent. For instance, the template for the  {% input %} \ntemplatetag is found at  ./templates/_helpers/input.html  Once logged in, the  main layout  of the application is provided by the template at ./templates/opal.html . By default, this simply extends ./templates/app_layouts/layout_base.html .  The  patient detail  page is provided by the template at  ./templates/patient_detail.html . By\ndefault this uses the page layout from  ./templates/patient_detail_base.html .  The detail template for an  episode  of any given episode category is set on the category class .", 
            "title": "How do I know which template I need to override?"
        }, 
        {
            "location": "/guides/context_processors/", 
            "text": "Default context processors\n\n\nContext processors are part of the Django template language. In Opal we use this to give all templates access to some generic information about the internals of Opal applications.\n\n\nSettings\n\n\nAll Opal settings are copied into the context of the template.\n\n\nModels\n\n\nAll \nsubrecords\n (the underlying clinical models of Opal) are copied into the context of the template context and can be accessed from the variable \nmodels\n, e.g. the Allergies subrecord can be referred to by \n\n\n{{ models.Allergy }}\n\n\n\n\nPathways\n\n\nPathways are copied in to the context of the template and can be accessed from the variable \npathways\n. For an example Pathway you would be able to access attributes of a Pathway thus: \n\n\n{{ pathways.MyPathway.get_display_name }}\n\n\n\n\nIt is important to note that since the context processor is applied \nafter\n the request context, this can lead to the context processor over-writing elements of context data. For further information on this see the Django documentation.", 
            "title": "Context Processors"
        }, 
        {
            "location": "/guides/context_processors/#default-context-processors", 
            "text": "Context processors are part of the Django template language. In Opal we use this to give all templates access to some generic information about the internals of Opal applications.", 
            "title": "Default context processors"
        }, 
        {
            "location": "/guides/context_processors/#settings", 
            "text": "All Opal settings are copied into the context of the template.", 
            "title": "Settings"
        }, 
        {
            "location": "/guides/context_processors/#models", 
            "text": "All  subrecords  (the underlying clinical models of Opal) are copied into the context of the template context and can be accessed from the variable  models , e.g. the Allergies subrecord can be referred to by   {{ models.Allergy }}", 
            "title": "Models"
        }, 
        {
            "location": "/guides/context_processors/#pathways", 
            "text": "Pathways are copied in to the context of the template and can be accessed from the variable  pathways . For an example Pathway you would be able to access attributes of a Pathway thus:   {{ pathways.MyPathway.get_display_name }}  It is important to note that since the context processor is applied  after  the request context, this can lead to the context processor over-writing elements of context data. For further information on this see the Django documentation.", 
            "title": "Pathways"
        }, 
        {
            "location": "/guides/static_files/", 
            "text": "Static Files in Opal\n\n\nAs with any Javascript heavy application, Opal apps can quickly accumulate large numbers\nof static files. Opal ships with the \nDjango Compressor\n\nlibrary out of the box, and uses it to manage the Javascript asset pipeline.\n\n\nDo consult the excellent Django Compressor documentation for more details on exactly how this process works.", 
            "title": "Static Files"
        }, 
        {
            "location": "/guides/static_files/#static-files-in-opal", 
            "text": "As with any Javascript heavy application, Opal apps can quickly accumulate large numbers\nof static files. Opal ships with the  Django Compressor \nlibrary out of the box, and uses it to manage the Javascript asset pipeline.  Do consult the excellent Django Compressor documentation for more details on exactly how this process works.", 
            "title": "Static Files in Opal"
        }, 
        {
            "location": "/guides/forms/", 
            "text": "Forms\n\n\nEditing Records\n\n\nThe editing of records is a key component of any Opal application. A key pattern is to edit\nor create an individual record in a modal containing the form for just that record. Opal provides\nthe Angular Controller \nopal.controllers.EditItemCtrl\n for doing just this\n\n\nCustomising the Angular Controller\n\n\nOpal uses the \nformController\n attribute of an \nItem\n to determine which Angular Controller to use. This\ndefaults to \nopal.controllers.EditItemCtrl\n. Individual Subrecords may customise this by implementing an Angualar record Service\nand overriding the formController attribute.\n\n\n# yourapp/models.py\nclass Diagnosis(models.Diagnosis):\n    _angular_service = 'Diagnosis'\n\n\n\n\n// yourapp/static/js/diagnosis.js\nangular.module('opal.records').factory('Diagnosis', function(){\n    return function(record){\n        record.formController = 'MyCustomDiagnosisFormController';\n        return record;\n    }\n});\n\n\n\n\n\nCustom form controllers can use the preSave(itemToBeSaved) hook to add their own custom logic before the item is saved\n\n\nForm and modal templates\n\n\nSubrecords have \nget_form_template()\n and \nget_modal_template()\n methods, which are used for\nfiguring out how to render forms for interacting with them. These use the following template\npaths based on the context in which they are called:\n\n\n# Forms\nforms/{episode_type}/{list slug}/{record_name}_form.html\nforms/{list_slug}/{record_name}_form.html\nforms/{episode_type}/{record_name}_form.html\nforms/{record_name}_form.html\n\n# Modals\nmodals/{episode_type}/{list slug}/{record_name}_modal.html\nmodals/{list_slug}/{record_name}_modal.html\nmodals/{episode_type}/{record_name}_modal.html\nmodals/{record_name}_modal.html\n\n\n\nAutogenerating forms\n\n\nThe \nopal\n commandline tool has a scaffold command, which will autogenerate missing form templates\nfor subrecord models. Simply run the following command to generate.\n\n\n$ opal scaffold $DJANGO_APP_WHERE_MODELS_LIVE\n\n\n\n(Note this will also generate and run migrations for any unmigrated models.xb)\n\n\nClient side Validation\n\n\nClient side validation for forms requires a pattern and a help block \n uses ng-pattern, ng-disabled (https://docs.angularjs.org/api/ng/directive/input)\n\n\nHelpers\n\n\nOpal contains a number of helpers for developing forms and input modals.\n\n\nMany of these are located in the forms template tag library, which is a\nDjango templatetag library that understands the context of common patterns with\nOpal for creating forms and modals.\n\n\nIt provides helpers for various input types that will allow you to render consistent\nforms, with less verbose templates.\n\n\n{% load forms %}\n\nform class=\"form-horizontal\"\n\n  {% input \"autofocus\" label=\"Destination\" model=\"editing.destination\" lookuplist=\"destination_list\" %}\n  {% datepicker label=\"Date\" model=\"editing.date\" %}\n  {% checkbox label=\"Alone?\" model=\"editing.alone\" %}\n\n/form\n\n\n\n\nFor full documentation of the options, please see the \nForm templatetags reference material", 
            "title": "Forms"
        }, 
        {
            "location": "/guides/forms/#forms", 
            "text": "", 
            "title": "Forms"
        }, 
        {
            "location": "/guides/forms/#editing-records", 
            "text": "The editing of records is a key component of any Opal application. A key pattern is to edit\nor create an individual record in a modal containing the form for just that record. Opal provides\nthe Angular Controller  opal.controllers.EditItemCtrl  for doing just this", 
            "title": "Editing Records"
        }, 
        {
            "location": "/guides/forms/#customising-the-angular-controller", 
            "text": "Opal uses the  formController  attribute of an  Item  to determine which Angular Controller to use. This\ndefaults to  opal.controllers.EditItemCtrl . Individual Subrecords may customise this by implementing an Angualar record Service\nand overriding the formController attribute.  # yourapp/models.py\nclass Diagnosis(models.Diagnosis):\n    _angular_service = 'Diagnosis'  // yourapp/static/js/diagnosis.js\nangular.module('opal.records').factory('Diagnosis', function(){\n    return function(record){\n        record.formController = 'MyCustomDiagnosisFormController';\n        return record;\n    }\n});  Custom form controllers can use the preSave(itemToBeSaved) hook to add their own custom logic before the item is saved", 
            "title": "Customising the Angular Controller"
        }, 
        {
            "location": "/guides/forms/#form-and-modal-templates", 
            "text": "Subrecords have  get_form_template()  and  get_modal_template()  methods, which are used for\nfiguring out how to render forms for interacting with them. These use the following template\npaths based on the context in which they are called:  # Forms\nforms/{episode_type}/{list slug}/{record_name}_form.html\nforms/{list_slug}/{record_name}_form.html\nforms/{episode_type}/{record_name}_form.html\nforms/{record_name}_form.html\n\n# Modals\nmodals/{episode_type}/{list slug}/{record_name}_modal.html\nmodals/{list_slug}/{record_name}_modal.html\nmodals/{episode_type}/{record_name}_modal.html\nmodals/{record_name}_modal.html", 
            "title": "Form and modal templates"
        }, 
        {
            "location": "/guides/forms/#autogenerating-forms", 
            "text": "The  opal  commandline tool has a scaffold command, which will autogenerate missing form templates\nfor subrecord models. Simply run the following command to generate.  $ opal scaffold $DJANGO_APP_WHERE_MODELS_LIVE  (Note this will also generate and run migrations for any unmigrated models.xb)", 
            "title": "Autogenerating forms"
        }, 
        {
            "location": "/guides/forms/#client-side-validation", 
            "text": "Client side validation for forms requires a pattern and a help block   uses ng-pattern, ng-disabled (https://docs.angularjs.org/api/ng/directive/input)", 
            "title": "Client side Validation"
        }, 
        {
            "location": "/guides/forms/#helpers", 
            "text": "Opal contains a number of helpers for developing forms and input modals.  Many of these are located in the forms template tag library, which is a\nDjango templatetag library that understands the context of common patterns with\nOpal for creating forms and modals.  It provides helpers for various input types that will allow you to render consistent\nforms, with less verbose templates.  {% load forms %} form class=\"form-horizontal\" \n  {% input \"autofocus\" label=\"Destination\" model=\"editing.destination\" lookuplist=\"destination_list\" %}\n  {% datepicker label=\"Date\" model=\"editing.date\" %}\n  {% checkbox label=\"Alone?\" model=\"editing.alone\" %} /form   For full documentation of the options, please see the  Form templatetags reference material", 
            "title": "Helpers"
        }, 
        {
            "location": "/guides/patient_detail_views/", 
            "text": "Opal Patient Detail Views\n\n\nOpal provides all patients with a detail view.\n\n\nThe default detail view will allow the user to switch between all of a patient's\n\nepisodes\n, as well as editing patient information linked to the patient\nrather than an episode. (Allergies for example.)\n\n\nTemplate selection\n\n\nThe base template for a patient detail view is \n./opal/templates/patient_detail_base.html\n,\nalthough you can override or customise that for your application most easily by implementing\na \n./templates/patient_detail.html\n and customising specific blocks, as the Opal implementation\nsimply includes the base template.\n\n\nEach episode will display using the template appropriate for it's \nEpisodeCategory\n - for instance\nan \nInpatientEpisode\n will use \n./templates/detail/inpatient.html\n. You may \ndefine your own\nepisode types\n should you require.\n\n\nRecord Panels\n\n\nA frequent pattern when constructing detail views is to render a panel for a particular \nSubrecord\n\ntype. The panels templatetag library contains some useful helpers for rendering panels based on\nmodels.\n\n\n{% load panels %}\n{% record_panel Diagnosis %}\n\n\n\nThe above code will render a panel for your episode, including the \nSubrecord\n detail template for\neach instance, and allowing editing, deletion and creation of instances of your \nSubrecord\n.\n\n\nYou may also consult the Detailed \nreference documentation\n for\nRecord Panels.\n\n\nCustom Patient Detail Views\n\n\nSometimes we also need to display information about a patient across multiple episodes, or simply\na particular view of one episode. For instance, you might like to have a specific view for showing\nall of the lab results for a patient, which would be overwhelming were they all displayed in the\nepisode detail view.\n\n\nOpal's PatientDetailView allows you to do just this. To add an additional view to a patient you\nsimply declare a PatientDetailView class:\n\n\n# detail.py\nfrom opal.core import detail\n\nclass MyCustomView(detail.PatientDetailView):\n    name = 'my_custom_view'\n    title = 'Special View'\n    template = 'detail/my_custom_view.html'\n\n\n\nThis will then be available in the Patient Detail view in the episode switcher menu. You can\nfind details of all the various options for PatientDetailViews in the\n\nreference documentation\n.", 
            "title": "Patient Detail Views"
        }, 
        {
            "location": "/guides/patient_detail_views/#opal-patient-detail-views", 
            "text": "Opal provides all patients with a detail view.  The default detail view will allow the user to switch between all of a patient's episodes , as well as editing patient information linked to the patient\nrather than an episode. (Allergies for example.)", 
            "title": "Opal Patient Detail Views"
        }, 
        {
            "location": "/guides/patient_detail_views/#template-selection", 
            "text": "The base template for a patient detail view is  ./opal/templates/patient_detail_base.html ,\nalthough you can override or customise that for your application most easily by implementing\na  ./templates/patient_detail.html  and customising specific blocks, as the Opal implementation\nsimply includes the base template.  Each episode will display using the template appropriate for it's  EpisodeCategory  - for instance\nan  InpatientEpisode  will use  ./templates/detail/inpatient.html . You may  define your own\nepisode types  should you require.", 
            "title": "Template selection"
        }, 
        {
            "location": "/guides/patient_detail_views/#record-panels", 
            "text": "A frequent pattern when constructing detail views is to render a panel for a particular  Subrecord \ntype. The panels templatetag library contains some useful helpers for rendering panels based on\nmodels.  {% load panels %}\n{% record_panel Diagnosis %}  The above code will render a panel for your episode, including the  Subrecord  detail template for\neach instance, and allowing editing, deletion and creation of instances of your  Subrecord .  You may also consult the Detailed  reference documentation  for\nRecord Panels.", 
            "title": "Record Panels"
        }, 
        {
            "location": "/guides/patient_detail_views/#custom-patient-detail-views", 
            "text": "Sometimes we also need to display information about a patient across multiple episodes, or simply\na particular view of one episode. For instance, you might like to have a specific view for showing\nall of the lab results for a patient, which would be overwhelming were they all displayed in the\nepisode detail view.  Opal's PatientDetailView allows you to do just this. To add an additional view to a patient you\nsimply declare a PatientDetailView class:  # detail.py\nfrom opal.core import detail\n\nclass MyCustomView(detail.PatientDetailView):\n    name = 'my_custom_view'\n    title = 'Special View'\n    template = 'detail/my_custom_view.html'  This will then be available in the Patient Detail view in the episode switcher menu. You can\nfind details of all the various options for PatientDetailViews in the reference documentation .", 
            "title": "Custom Patient Detail Views"
        }, 
        {
            "location": "/guides/list_views/", 
            "text": "Opal Patient List views\n\n\nOpal provides support for displaying lists of patients, both via a spreadsheet like view,\nand with a card based view.\n\n\nDefining lists\n\n\nOpal patient lists are subclasses of \nopal.core.patient_lists.PatientList\n.\n\n\nTypically these are found in a \npatient_lists.py\n module of your application or plugin. (Lists \ncan\n be\ndefined elsewhere, but may not be auto discovered.)\n\n\nA basic list needs only define its \ndisplay_name\n a \nqueryset\n of episodes to display, and\na \nschema\n of subrecords to show for each episode.\n\n\n# patient_lists.py\nfrom opal.models import Episode\nfrom opal.core import patient_lists\n\nfrom myapplication import models\n\nclass AlphabetListA(patient_lists.PatientList):\n    display_name = 'A Patients'\n\n    queryset = Episode.objects.filter(demographics__name__istartswith='a')\n\n    schema = [\n        models.Demographics,\n        models.Location,\n        models.Diagnosis,\n        models.Treatment\n    ]\n\n\n\nThe \ndisplay_name\n property is the human readable name for our list - which is displayed as\nlink text to our list.\n\n\nSchemas\n\n\nThe schema attribute declares the columns of a PatientList. The entries in a schema may either\nbe \nSubrecord\n instances, or instances of \nopal.core.patient_lists.Column\n.\n\n\nCustom Columns\n\n\nAlthough most schema entries will be subrecords, it can be useful to have non-subrecord columns.\nFor instance because you want to allow a composite\ncolumn of multiple \nSubrecords\n or because we want to simply render arbitrary markup.\n\n\nColumns require the title, and template_path to be set, and are simply included in the schema\nlist.\n\n\nclass MyMarkupList(patient_lists.PatientList):\n    schema = [\n        patient_lists.Column(title='Foo', template_path='foo/bar')\n    ]\n\n\n\n\n\nTemplate selection\n\n\nThe list view is constructed by rendering a column for each record, in the order\ndefined in the schema, and a row for each episode in the list.\n\n\nThe template for each cell should live in \n./templates/records/*\n. In order to\nselect the appropriate template for a given episode, Opal looks in the following\nlocations:\n\n\nrecords/{episode_type}/{list slug}/{record_name}.html\nrecords/{list_slug}/{record_name}.html\nrecords/{episode_type}/{record_name}.html\nrecords/{record_name}.html\n\n\n\nQuerysets\n\n\nThe queryset property of your list should contain all of the episodes for this particular\nlist. On occasion we require a more dynamic queryset, in which case we can override the\n\nget_queryset\n method.\n\n\n# patient_lists.py\nimport datetime\nfrom opal.models import Episode\nfrom opal.core import patient_lists\n\nclass MyWeeklyList(patient_lists.PatientList):\n    def get_queryset(self):\n        one_week_ago = datetime.date.today() - datetime.timedelta(days=1)\n        return Episode.objects.filter(start__gte=one_week_ago)\n\n\n\nOrdering Lists\n\n\nAs a \ndiscoverable.SortableFeature\n lists may be ordered by setting the\n\norder\n property to an integer. Lists will display in drop-downs, tables et cetera, in\nthis order.\n\n\nSlug\n\n\nAs a \ndiscoverable\n feature, the slug for each list is determined by\neither setting the \nslug\n property, or returning a string from the \nget_slug\n classmethod.\n\n\nTagged Patient Lists\n\n\nA common model for working with lists is to use lists based on the tags assigned to an episode.\nThis allows users to add and remove patients from lists as they see fit, rather than attempting\nto infer it from other properties of the patient (e.g. their current location for instance.)\nwhich can be particularly challenging for some clinical services.\n\n\nOpal provides a specific subclass for working with Tagged Patient Lists:\n\n\n# patient_lists.py\nfrom opal.core import patient_lists\n\nclass MyTagList(patient_lists.TaggedPatientList):\n    display_name = 'Tagged blue'\n    tag = 'blue'\n\n\n\nTagged lists will automatically fetch the appropriate queryset for patients tagged with the tag\nyou specify.\n\n\nInvalid Tagged Patient Lists\n\n\nTag names may not have hyphens in them - Opal uses hyphens to distinguish between tags and subtags\nin the urls for lists, so attempting to define one will raise an exception.\n\n\nclass MyList(TaggedPatientList):\n    tag = 'foo-bar'\n\n# This will raise InvalidDiscoverableFeatureError !\n\n\n\nDirect Add\n\n\nSometimes, we want to control the flow of patients onto, off, or between lists a little more closely.\nFor instance, we might need to ensure additional data collection at points in a patient journey.\n\n\nIn order to accomplish this, we often implement custom patient flows that will programatically tag\nepisodes to tagged lists. In those cases we will want to prevent users from manually adding or\nremoving the tags themselves. This can be easily accomplished via the \ndirect_add\n property. When\nset to false, users will not be able to add the tag for this list.\n\n\nclass MyLockedDownList(TaggedPatientList):\n    tag = 'liaisonpatients'\n    direct_add = False\n\n\n\nCustomising Sort order of Episodes\n\n\nBy default, PatientLists sort according by \nstart\n, then \nfirst_name\n, then \nsurname\n using\nthe Angular method \nEpisode.compare\n. You may override this\non a list-by-list basis by setting the \ncomparator_service\n attribute.\n\n\nclass MySortedList(PatientList):\n    comparator_service = 'MyComparatorService'\n\n\n\n\nThis attribute should be the name of an Angular service that returns a list of comparator functions.\nFor instance, to sort by Episode.category_name then Episode id:\n\n\nangular.module('opal.services')\n    .factory('MyComparatorService', function(){\n        \nuse strict\n;\n        return [\n            function(e){ return e.category_name },\n            function(e){ return e.id }\n        ]\n    })\n\n\n\n\n\nThe file containing your comparator service must be included in the javascripts \n\nof your application or plugin in order to be available on the client.\n\n\n\n\nAccess Control\n\n\nAs PatientLists are a \nRestrictableFeature\n, Access control\nfor lists is set by overriding the \nvisible_to\n classmethod. Your list will only be visible to\nthose users for whom this method returns \nTrue\n.\n\n\nFor instance, we could define a Patient List that was only available to Django Superusers:\n\n\nclass SuperuserPatientList(PatientList):\n\n    @classmethod\n    def visible_to(klass, user):\n        return user.is_superuser\n\n\n\nGrouping related Patient Lists\n\n\nWe commonly require groups of patient lists for a single clinical service. For example a busy\noutpatients clinic might have one list of people in the waiting room, one list of people being\ntriaged, one list for people waiting to see the medical staff, and another for people who have\nbeen seen but need review - for instance because they have outstanding test results.\n\n\nOpal provides the \nTabbedPatientListGroup\n class to help with this case. Tabbed Patient List\nGroups are an ordered collection of related Patient Lists that are displayed as tabs at the\ntop of any list in the group.\n\n\nDefining a Tabbed Patient List Group\n\n\nDefining a group can be as simple as declaring member lists in a property.\n\n\n# yourapp/patient_lists.py\n\nfrom opal.core import patient_lists\n\n# ... Define your lists here\n\nclass MyListGroup(patient_lists.TabbedPatientListGroup):\n    member_lists = [MyFirstPatientList, MySecondPatientList, ...]\n\n\n\n\n\nTabbed Patient List Groups are a Discoverable feature, we expect them to be in a\nmodule named patient_lists.py in one of the Django apps in your application.\n\n\n\n\nCustomising membership\n\n\nThe members of your group can be determined dynamically by overriding the \nget_member_lists\n\nclassmethod of your group:\n\n\nclass MyListGroup(patient_lists.TabbedPatientListGroup):\n    @classmethod\n    def get_member_lists(klass):\n        # return an iterable of PatientList subclasses\n\n\n\n\nRestricting access\n\n\nBy default, the UI for a \nTabbedPatientListGroup\n is shown at the top of any member \nPatientList\n\nas long as there are more than one members of the group visible to the given user.\n\n\nThis behaviour can be customised by overriding the \nvisible_to\n classmethod:\n\n\nclass MyListGroup(patient_lists.TabbedPatientListGroup):\n    @classmethod\n    def visible_to(klass, user):\n        # return True or False appropriately\n\n\n\n\nCustomising templates\n\n\nApplications may customise the UI for Tabbed Patient List Groups by customising the template\n\npatient_lists/tabbed_list_group.html\n.\n\n\nThe default template simply extends \npatient_lists/tabbed_list_group_base.html\n.", 
            "title": "Patient List Views"
        }, 
        {
            "location": "/guides/list_views/#opal-patient-list-views", 
            "text": "Opal provides support for displaying lists of patients, both via a spreadsheet like view,\nand with a card based view.", 
            "title": "Opal Patient List views"
        }, 
        {
            "location": "/guides/list_views/#defining-lists", 
            "text": "Opal patient lists are subclasses of  opal.core.patient_lists.PatientList .  Typically these are found in a  patient_lists.py  module of your application or plugin. (Lists  can  be\ndefined elsewhere, but may not be auto discovered.)  A basic list needs only define its  display_name  a  queryset  of episodes to display, and\na  schema  of subrecords to show for each episode.  # patient_lists.py\nfrom opal.models import Episode\nfrom opal.core import patient_lists\n\nfrom myapplication import models\n\nclass AlphabetListA(patient_lists.PatientList):\n    display_name = 'A Patients'\n\n    queryset = Episode.objects.filter(demographics__name__istartswith='a')\n\n    schema = [\n        models.Demographics,\n        models.Location,\n        models.Diagnosis,\n        models.Treatment\n    ]  The  display_name  property is the human readable name for our list - which is displayed as\nlink text to our list.", 
            "title": "Defining lists"
        }, 
        {
            "location": "/guides/list_views/#schemas", 
            "text": "The schema attribute declares the columns of a PatientList. The entries in a schema may either\nbe  Subrecord  instances, or instances of  opal.core.patient_lists.Column .", 
            "title": "Schemas"
        }, 
        {
            "location": "/guides/list_views/#custom-columns", 
            "text": "Although most schema entries will be subrecords, it can be useful to have non-subrecord columns.\nFor instance because you want to allow a composite\ncolumn of multiple  Subrecords  or because we want to simply render arbitrary markup.  Columns require the title, and template_path to be set, and are simply included in the schema\nlist.  class MyMarkupList(patient_lists.PatientList):\n    schema = [\n        patient_lists.Column(title='Foo', template_path='foo/bar')\n    ]", 
            "title": "Custom Columns"
        }, 
        {
            "location": "/guides/list_views/#template-selection", 
            "text": "The list view is constructed by rendering a column for each record, in the order\ndefined in the schema, and a row for each episode in the list.  The template for each cell should live in  ./templates/records/* . In order to\nselect the appropriate template for a given episode, Opal looks in the following\nlocations:  records/{episode_type}/{list slug}/{record_name}.html\nrecords/{list_slug}/{record_name}.html\nrecords/{episode_type}/{record_name}.html\nrecords/{record_name}.html", 
            "title": "Template selection"
        }, 
        {
            "location": "/guides/list_views/#querysets", 
            "text": "The queryset property of your list should contain all of the episodes for this particular\nlist. On occasion we require a more dynamic queryset, in which case we can override the get_queryset  method.  # patient_lists.py\nimport datetime\nfrom opal.models import Episode\nfrom opal.core import patient_lists\n\nclass MyWeeklyList(patient_lists.PatientList):\n    def get_queryset(self):\n        one_week_ago = datetime.date.today() - datetime.timedelta(days=1)\n        return Episode.objects.filter(start__gte=one_week_ago)", 
            "title": "Querysets"
        }, 
        {
            "location": "/guides/list_views/#ordering-lists", 
            "text": "As a  discoverable.SortableFeature  lists may be ordered by setting the order  property to an integer. Lists will display in drop-downs, tables et cetera, in\nthis order.", 
            "title": "Ordering Lists"
        }, 
        {
            "location": "/guides/list_views/#slug", 
            "text": "As a  discoverable  feature, the slug for each list is determined by\neither setting the  slug  property, or returning a string from the  get_slug  classmethod.", 
            "title": "Slug"
        }, 
        {
            "location": "/guides/list_views/#tagged-patient-lists", 
            "text": "A common model for working with lists is to use lists based on the tags assigned to an episode.\nThis allows users to add and remove patients from lists as they see fit, rather than attempting\nto infer it from other properties of the patient (e.g. their current location for instance.)\nwhich can be particularly challenging for some clinical services.  Opal provides a specific subclass for working with Tagged Patient Lists:  # patient_lists.py\nfrom opal.core import patient_lists\n\nclass MyTagList(patient_lists.TaggedPatientList):\n    display_name = 'Tagged blue'\n    tag = 'blue'  Tagged lists will automatically fetch the appropriate queryset for patients tagged with the tag\nyou specify.", 
            "title": "Tagged Patient Lists"
        }, 
        {
            "location": "/guides/list_views/#invalid-tagged-patient-lists", 
            "text": "Tag names may not have hyphens in them - Opal uses hyphens to distinguish between tags and subtags\nin the urls for lists, so attempting to define one will raise an exception.  class MyList(TaggedPatientList):\n    tag = 'foo-bar'\n\n# This will raise InvalidDiscoverableFeatureError !", 
            "title": "Invalid Tagged Patient Lists"
        }, 
        {
            "location": "/guides/list_views/#direct-add", 
            "text": "Sometimes, we want to control the flow of patients onto, off, or between lists a little more closely.\nFor instance, we might need to ensure additional data collection at points in a patient journey.  In order to accomplish this, we often implement custom patient flows that will programatically tag\nepisodes to tagged lists. In those cases we will want to prevent users from manually adding or\nremoving the tags themselves. This can be easily accomplished via the  direct_add  property. When\nset to false, users will not be able to add the tag for this list.  class MyLockedDownList(TaggedPatientList):\n    tag = 'liaisonpatients'\n    direct_add = False", 
            "title": "Direct Add"
        }, 
        {
            "location": "/guides/list_views/#customising-sort-order-of-episodes", 
            "text": "By default, PatientLists sort according by  start , then  first_name , then  surname  using\nthe Angular method  Episode.compare . You may override this\non a list-by-list basis by setting the  comparator_service  attribute.  class MySortedList(PatientList):\n    comparator_service = 'MyComparatorService'  This attribute should be the name of an Angular service that returns a list of comparator functions.\nFor instance, to sort by Episode.category_name then Episode id:  angular.module('opal.services')\n    .factory('MyComparatorService', function(){\n         use strict ;\n        return [\n            function(e){ return e.category_name },\n            function(e){ return e.id }\n        ]\n    })  \nThe file containing your comparator service must be included in the javascripts  \nof your application or plugin in order to be available on the client.", 
            "title": "Customising Sort order of Episodes"
        }, 
        {
            "location": "/guides/list_views/#access-control", 
            "text": "As PatientLists are a  RestrictableFeature , Access control\nfor lists is set by overriding the  visible_to  classmethod. Your list will only be visible to\nthose users for whom this method returns  True .  For instance, we could define a Patient List that was only available to Django Superusers:  class SuperuserPatientList(PatientList):\n\n    @classmethod\n    def visible_to(klass, user):\n        return user.is_superuser", 
            "title": "Access Control"
        }, 
        {
            "location": "/guides/list_views/#grouping-related-patient-lists", 
            "text": "We commonly require groups of patient lists for a single clinical service. For example a busy\noutpatients clinic might have one list of people in the waiting room, one list of people being\ntriaged, one list for people waiting to see the medical staff, and another for people who have\nbeen seen but need review - for instance because they have outstanding test results.  Opal provides the  TabbedPatientListGroup  class to help with this case. Tabbed Patient List\nGroups are an ordered collection of related Patient Lists that are displayed as tabs at the\ntop of any list in the group.", 
            "title": "Grouping related Patient Lists"
        }, 
        {
            "location": "/guides/list_views/#defining-a-tabbed-patient-list-group", 
            "text": "Defining a group can be as simple as declaring member lists in a property.  # yourapp/patient_lists.py\n\nfrom opal.core import patient_lists\n\n# ... Define your lists here\n\nclass MyListGroup(patient_lists.TabbedPatientListGroup):\n    member_lists = [MyFirstPatientList, MySecondPatientList, ...]  \nTabbed Patient List Groups are a Discoverable feature, we expect them to be in a\nmodule named patient_lists.py in one of the Django apps in your application.", 
            "title": "Defining a Tabbed Patient List Group"
        }, 
        {
            "location": "/guides/list_views/#customising-membership", 
            "text": "The members of your group can be determined dynamically by overriding the  get_member_lists \nclassmethod of your group:  class MyListGroup(patient_lists.TabbedPatientListGroup):\n    @classmethod\n    def get_member_lists(klass):\n        # return an iterable of PatientList subclasses", 
            "title": "Customising membership"
        }, 
        {
            "location": "/guides/list_views/#restricting-access", 
            "text": "By default, the UI for a  TabbedPatientListGroup  is shown at the top of any member  PatientList \nas long as there are more than one members of the group visible to the given user.  This behaviour can be customised by overriding the  visible_to  classmethod:  class MyListGroup(patient_lists.TabbedPatientListGroup):\n    @classmethod\n    def visible_to(klass, user):\n        # return True or False appropriately", 
            "title": "Restricting access"
        }, 
        {
            "location": "/guides/list_views/#customising-templates", 
            "text": "Applications may customise the UI for Tabbed Patient List Groups by customising the template patient_lists/tabbed_list_group.html .  The default template simply extends  patient_lists/tabbed_list_group_base.html .", 
            "title": "Customising templates"
        }, 
        {
            "location": "/guides/search/", 
            "text": "Opal Search overview\n\n\nThe Opal Search backend is switchable using the settings value OPAL_SEARCH_BACKEND.\n\n\nBy default it will do a database query.\n\n\nThe backend takes in a dictionary with the following fields\n\n\n{\n      \nqueryType\n: either \nEquals\n or \nContains\n,\n      \nfield\n: the label of the column that will be queried, e.g. Hospital Number,\n      \nquery\n: the value to be queried, e.g. \n1111\n,\n      'combine': whether the query is 'and' or 'or' in conjunction with other dictionaries\n      'column': the model to be queried e.g. 'demographics'\n}\n\n\n\n\nThe Advanced search interface\n\n\nThe Opal advanced search interface at \n/#/extract\n allows users to specify rules\nby which to query for episodes.\n\n\nBy default this allows users to construct simple logical queries based on the\nvalues of any subrecord field.\n\n\nThe interface respects the types of fields - for instance using before/after for\ndate fields or equals/contains for text fields.\n\n\nThis screen also allows users to download episode data for the cohort that matches\nthe specified rules.\n\n\nCustom Search Rules\n\n\nThese rules are extensible, allowing custom rules that perform more advanced\nqueries to be inserted.\n\n\nopal.core.search.SearchRule\n\n\nIs a \ndiscoverable\n.\n\n\nIt is defined with a group of SearchRuleFields that appear like subrecord model\nfields in the front end.\n\n\nThe SearchRuleField has a query method that returns a list of Episodes.\n\n\nThe SearchRuleField must define a field_type, these then provide the following\noperators to the front end\n\n\n\n\n\n\n\n\nfield_type\n\n\nqueryType\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nequals, contains\n\n\n\n\n\n\ndate_time\n\n\nbefore, after\n\n\n\n\n\n\ndate\n\n\nbefore, after\n\n\n\n\n\n\nboolean\n\n\ntrue, false\n\n\n\n\n\n\nnull_boolean\n\n\ntrue, false\n\n\n\n\n\n\nmany_to_many\n\n\na list of the lookup list for this field\n\n\n\n\n\n\nmany_to_many_multi_select\n\n\na multi select field, defined by the enum field from the rule\n\n\n\n\n\n\n\n\nie if you state the field is a string, the user will be provided with an\nequals/contains, which will be passed to the query as given_query[\"queryType\"]\n\n\nFor example\n\n\nclass SomeField(SearchRuleField):\n    display_name = \nSome Field\n # the display name of the field\n    description = \nA Description for the user to explain what this field means\n\n    field_type = \ndate_time\n # what kind of filter that is offered, datetime will off before and after\n\n    def query(self, given_query):\n        return Episode.objects.all()\n\n\nclass MyCustomQuery(SearchRule):\n    display_name = \nMy Custom Query\n\n    fields = (SomeField,)\n\n\n\n\nAutocomplete search\n\n\nOpal contains autocomplete search functionality for the navbar search box.\n\n\nYou can enable it with the setting \nOPAL_AUTOCOMPLETE_SEARCH\n (defaults to False).\n\n\n# yourapp/settings.py\nOPAL_AUTOCOMPLETE_SEARCH = True", 
            "title": "Search Overview"
        }, 
        {
            "location": "/guides/search/#opal-search-overview", 
            "text": "The Opal Search backend is switchable using the settings value OPAL_SEARCH_BACKEND.  By default it will do a database query.  The backend takes in a dictionary with the following fields  {\n       queryType : either  Equals  or  Contains ,\n       field : the label of the column that will be queried, e.g. Hospital Number,\n       query : the value to be queried, e.g.  1111 ,\n      'combine': whether the query is 'and' or 'or' in conjunction with other dictionaries\n      'column': the model to be queried e.g. 'demographics'\n}", 
            "title": "Opal Search overview"
        }, 
        {
            "location": "/guides/search/#the-advanced-search-interface", 
            "text": "The Opal advanced search interface at  /#/extract  allows users to specify rules\nby which to query for episodes.  By default this allows users to construct simple logical queries based on the\nvalues of any subrecord field.  The interface respects the types of fields - for instance using before/after for\ndate fields or equals/contains for text fields.  This screen also allows users to download episode data for the cohort that matches\nthe specified rules.", 
            "title": "The Advanced search interface"
        }, 
        {
            "location": "/guides/search/#custom-search-rules", 
            "text": "These rules are extensible, allowing custom rules that perform more advanced\nqueries to be inserted.", 
            "title": "Custom Search Rules"
        }, 
        {
            "location": "/guides/search/#opalcoresearchsearchrule", 
            "text": "Is a  discoverable .  It is defined with a group of SearchRuleFields that appear like subrecord model\nfields in the front end.  The SearchRuleField has a query method that returns a list of Episodes.  The SearchRuleField must define a field_type, these then provide the following\noperators to the front end     field_type  queryType      string  equals, contains    date_time  before, after    date  before, after    boolean  true, false    null_boolean  true, false    many_to_many  a list of the lookup list for this field    many_to_many_multi_select  a multi select field, defined by the enum field from the rule     ie if you state the field is a string, the user will be provided with an\nequals/contains, which will be passed to the query as given_query[\"queryType\"]  For example  class SomeField(SearchRuleField):\n    display_name =  Some Field  # the display name of the field\n    description =  A Description for the user to explain what this field means \n    field_type =  date_time  # what kind of filter that is offered, datetime will off before and after\n\n    def query(self, given_query):\n        return Episode.objects.all()\n\n\nclass MyCustomQuery(SearchRule):\n    display_name =  My Custom Query \n    fields = (SomeField,)", 
            "title": "opal.core.search.SearchRule"
        }, 
        {
            "location": "/guides/search/#autocomplete-search", 
            "text": "Opal contains autocomplete search functionality for the navbar search box.  You can enable it with the setting  OPAL_AUTOCOMPLETE_SEARCH  (defaults to False).  # yourapp/settings.py\nOPAL_AUTOCOMPLETE_SEARCH = True", 
            "title": "Autocomplete search"
        }, 
        {
            "location": "/guides/pathways/", 
            "text": "Guide: The pathway module\n\n\nThe pathway module provides developers with a highly extensible method of\nworking with complex forms.\n\n\nTypically pathways are forms that allow the user to enter information that spans multiple\n\nSubrecords\n - which can be challenging with the \nSubrecord forms\n.\n\n\nThe pathway provides Wizards, long multi-model forms, custom validation and much more,\nall usable either in full page or modal contexts.\n\n\nIf you're new to using pathways, you might like to go through the\n\nPathway tutorial\n.\n\n\n\nSee the\n\nPathway reference documentation\n\nfor detailed class and method level information \n\non the pathway module.\n\n\n\n\nPathway steps\n\n\nA pathway is comprised of a sequence of \nStep\ns. These are sections within a form.\n\n\nThey can be defined as HTML forms with custom attributes and Angular controllers,\nor inferred by passing models to the \nsteps\n attribute of your pathway.\n\n\nIn the simplest case a pathway re-uses the forms for a sequence of subrecords, and we would\ncreate one by subclassing \nopal.core.pathway.PagePathway\n in a file called\n\n{{ your app }}/pathways.py\n like so:\n\n\nfrom opal.core import pathway\nfrom myapp import models\n\nclass SimplePathway(pathway.PagePathway):\n    display_name = 'A simple pathway'\n    slug = \nsimples\n\n    steps        = (\n        models.Demographics,\n        models.PastMedicalHistory\n    )\n\n\n\n\nThis will give you form at \nhttp://localhost:8000/pathway/#/simples\n that\nlets the user create a patient with their demographics and past medical history\n\n\nCustomising Steps\n\n\nWhen passed a model, a step will infer the details of form templates, display names et\ncetera from the subrecord. However a model is not required - you can also pass arbitrary\nchunks of html with the two required fields:\n\n\nStep(\n  template=\npathway/steps/my_step.html\n\n  display_name=\nMy Display Only Step\n\n)\n\n\n\n\nAlternatively, you can override any fields that it would usually take from the model.\nThe below example, will override the template and not just use the Demographics form template.\n\n\nStep(\n  template=\npathway/steps/my_step.html\n\n  model=Demographics\n)\n\n\n\n\nThe \nStep.base_template\n wraps the form template for each step.\n\n\nBy default this is a bootstrap panel,\nwith the step display name and step icon in the header and the form template in the panel body.\n\n\nYou can override this by overriding the \nbase_template\n.\n\n\nStep(\n  base_template=\npathway/steps/addicted_to_base.html\n\n  model=Demographics\n)\n\n\n\n\nIf you want to add any custom save logic for your step, you can put in a \npre_save\n method.\nThis is passed the full data dictionary that has been received from the client and the patient\nand episode that the pathways been saved for, if they exist (If you're saving a pathway for a\nnew patient/episode, they won't have been created at this time).\n\n\nLoading Data From Existing Episodes\n\n\nA URL without a patient id or episode id will create a new patent/episode when\nyou save it.\n\n\nTo update a particular patient with a new episode, the URL should be:\n\nhttp://localhost:8000/pathway/#/simples/{{ patient_id }}\n\n\nTo update a particular episode the URL should be:\n\nhttp://localhost:8000/pathway/#/simples/{{ patient_id }}/{{ episode_id }}\n\n\nWhen you visit these urls with the ids for existing patients and episodes,\nthe form will be prepulated with the existing data for that patient/episode.\n\n\nMultiple Instances Of Records\n\n\nIf the model is not a singleton, by default it will be show in the form as\na multiple section that allows the user to add one or more models.\n\n\nIf you don't wish this to happen, pass \nmultiple=False\n to the Step\n\n\nThis displays a delete button for existing subrecords.\n\n\nBy default, any subrecords that are deleted, or are not included in the data sent back\nto the server are deleted.\n\n\nIf you don't wish this to happen, pass \ndelete_others=False\n to the Step.\n\n\nfrom opal.core import pathway\nfrom myapp import models\n\nclass SimplePathway(pathway.Pathway):\n    display_name = 'A simple pathway'\n    slug         = 'simples'\n    steps        = (\n        pathway.Step(model=models.Allergies, delete_others=True),\n        models.Treatment,\n        models.PastMedicalHistory\n    )\n\n\n\n\nIn this case, the pathway will delete any existing instances of the given Subrecord Model that\nare not sent back to the API in the JSON data.\n\n\nComplex Steps\n\n\nIf we want to save multiple types of subrecords at the same step, we can do that by including the\nrelevant form templates in a custom step template.\n\n\nfrom opal.core import pathway\nfrom myapp import models\n\nclass SimplePathway(pathway.Pathway):\n    display_name = 'A simple pathway'\n    slug         = 'simples'\n    steps        = (\n        pathways.Step(\n            display_name='Demographics and Diagnosis',\n            icon='fa fa-clock',\n            template='pathways/demographics_and_diagnosis_step.html'\n            ),\n    )\n\n\n\n\nThe display name and icon are rendered in the header for this step in your pathway, which\nexist outside the scope of the step template itself. Then all we would need is the template\nitself:\n\n\n!-- pathways/demographics_and_diagnosis_step.html --\n\n{% include models.Demographics.get_form_template %}\n{% include models.Diagnosis.get_form_template %}\n\n\n\n\n\nPathways created in this way will not add in the model defaults.\n\n\n\n\nComplex step logic\n\n\nPathway steps can be rendered with a custom controller.\nYou can do this by declaring an angular step in your controller.\n\n\nsteps = (\n    Step(\n        model=MyModel,\n        step_controller=\nFindPatientCtrl\n,\n    ),\n)\n\n\n\n\nYour javascript controller should then look something like...\n\n\nangular.module('opal.controllers').controller('FindPatientCtrl',\n    function(scope, step, episode) {\n    \nuse strict\n;\n    // your custom logic\n});\n\n\n\n\noWe can pass in custom controllers to individual steps. Custom\ncontrollers are sandboxed, they share \nscope.editing\n with other scopes but\nnothing else.\n\n\nThe scope passed in comes with reference data and meta data set as attributes.\nIt also comes with the scope.editing. This is the dictionary that will\nappear in the form and will be saved back at the end.\n\n\nThe step is the step definition from the server - the output of\n\nstep.to_dict\n.\n\n\nThe \nepisode\n is an instance of the javascript Episode class - not the output\nof \nEpisode.makeCopy()\n.\n\n\nBefore a copy of the form data is sent back to the server, it is passed to the\n\npreSave\n method of each step controller. Step controllers may alter this data\nhere if required to e.g. add implicit data points not contained in the form.\n\n\nComplex Steps With Multiple Instances Per Subrecord\n\n\nIf we need to also save multiple types of the same subrecord e.g. \nTreatment\n in this step,\nwe simply use the \nmultisave\n template tag.\n\n\n{% load pathways %}\n\n{% include models.Demographics.get_form_template %}\n{% include models.Diagnosis.get_form_template %}\n{% multisave models.Treatment %}\n\n\n\n\nAlternatively you may want to create your own multisave step forms, you can use the\ndirective \nmulti-save-wrapper\n for this.\n\n\n\n\ndiv save-multiple-wrapper=\nediting.treatment\n\n  \ndiv ng-repeat=\nediting in model.subrecords\n\n    {% input field=\nTreatment.drug\n %}\n    \nbutton ng-click=\nremove($index)\n/button\n\n  \n/div\n\n\n  \nbutton ng-click=\naddAnother()\n/button\n\n\n/div\n\n\n\n\n\nValidation\n\n\nIf you want to add custom validation, the method \nStepController.valid(form)\n is\ncalled on each step controller.\n\n\nThis means you can set validation rules on the form.\n\n\nAn invalid form will have the save button disabled, until the form is valid.\n\n\nWizards\n\n\nWizard pathways look for a \nhideFooter\n variable that defaults to false. If set to true, this will hide the default next/save button. If you don't want the wizard pathway to be a linear progression.\nThis is useful when you want the user to go to different\nsteps based on options they chose.\n\n\nIf you want to handle complex order, this is best done in a custom controller\nfor you step class. You can set this with.\n\n\nSuccess Redirects\n\n\nOften, after successfully saving a pathway, we want to redirect the user to a different\nURL - we do this by overriding the \nredirect_url\n method on the pathway. For example -\nto create a pathway that always logged the user out after a successful save:\n\n\nclass LogoutPathway(pathway.Pathway):\n    display_name = 'Logout-O-Matic'\n    steps        = (...)\n\n    def redirect_url(self, patient):\n        return '/accounts/logout/'\n\n\n\n\nRedirect Mixins\n\n\nBy default any full page pathway (ie not a modal) will redirect to the episode\ndetail view of that episode.\n\n\nIf you do not wish this to be the case you can override the redirect_url.\n\n\nPathways comes with the \nRedirectsToPatientMixin\n, which redirects to the Patient\ndetail view and can be used as follows.\n\n\nfrom opal.core.pathway import RedirectsToPatientMixin\n\nclass PatientRedirectPathway(pathway.RedirectsToPatientMixin, pathway.PagePathway):\n    display_name = 'Redirector example Pathway'\n    steps = (...)\n\n\n\n\nModal Pathways\n\n\nPathways detect when you're opening a pathway from a modal.\n\n\nYou can use a different template for your modal pathway by adding a modal_template attribute to your pathway\n\n\nPathways ships with a no footer modal template, the same as the normal modal template but it doesn't display the section at the bottom with the save/cancel button.\n\n\nTo open a modal pathway in a template you can use the open-pathway directive:\n\n\na open-pathway=\ntest_results\nopen test results pathway\n/a\n\n\n\n\n\nThe open-pathway directive also includes an optional callback, that is called with the context of the result of the modal.save method, ie episode_id, patient_id and redirect_url.\n\n\nBy default the pathway is opened with whichever episode is on $scope.episode, you can use pathway-episode to define a different episode.\n\n\na open-pathway=\ntest_results\n\n   pathway-episode=\nsomeOtherEpisode\n\n   pathway-callback=\nrefreshEpisode(episode_id)\n\n   open test results pathway\n\n/a", 
            "title": "Pathway Overview"
        }, 
        {
            "location": "/guides/pathways/#guide-the-pathway-module", 
            "text": "The pathway module provides developers with a highly extensible method of\nworking with complex forms.  Typically pathways are forms that allow the user to enter information that spans multiple Subrecords  - which can be challenging with the  Subrecord forms .  The pathway provides Wizards, long multi-model forms, custom validation and much more,\nall usable either in full page or modal contexts.  If you're new to using pathways, you might like to go through the Pathway tutorial .  \nSee the Pathway reference documentation \nfor detailed class and method level information  \non the pathway module.", 
            "title": "Guide: The pathway module"
        }, 
        {
            "location": "/guides/pathways/#pathway-steps", 
            "text": "A pathway is comprised of a sequence of  Step s. These are sections within a form.  They can be defined as HTML forms with custom attributes and Angular controllers,\nor inferred by passing models to the  steps  attribute of your pathway.  In the simplest case a pathway re-uses the forms for a sequence of subrecords, and we would\ncreate one by subclassing  opal.core.pathway.PagePathway  in a file called {{ your app }}/pathways.py  like so:  from opal.core import pathway\nfrom myapp import models\n\nclass SimplePathway(pathway.PagePathway):\n    display_name = 'A simple pathway'\n    slug =  simples \n    steps        = (\n        models.Demographics,\n        models.PastMedicalHistory\n    )  This will give you form at  http://localhost:8000/pathway/#/simples  that\nlets the user create a patient with their demographics and past medical history", 
            "title": "Pathway steps"
        }, 
        {
            "location": "/guides/pathways/#customising-steps", 
            "text": "When passed a model, a step will infer the details of form templates, display names et\ncetera from the subrecord. However a model is not required - you can also pass arbitrary\nchunks of html with the two required fields:  Step(\n  template= pathway/steps/my_step.html \n  display_name= My Display Only Step \n)  Alternatively, you can override any fields that it would usually take from the model.\nThe below example, will override the template and not just use the Demographics form template.  Step(\n  template= pathway/steps/my_step.html \n  model=Demographics\n)  The  Step.base_template  wraps the form template for each step.  By default this is a bootstrap panel,\nwith the step display name and step icon in the header and the form template in the panel body.  You can override this by overriding the  base_template .  Step(\n  base_template= pathway/steps/addicted_to_base.html \n  model=Demographics\n)  If you want to add any custom save logic for your step, you can put in a  pre_save  method.\nThis is passed the full data dictionary that has been received from the client and the patient\nand episode that the pathways been saved for, if they exist (If you're saving a pathway for a\nnew patient/episode, they won't have been created at this time).", 
            "title": "Customising Steps"
        }, 
        {
            "location": "/guides/pathways/#loading-data-from-existing-episodes", 
            "text": "A URL without a patient id or episode id will create a new patent/episode when\nyou save it.  To update a particular patient with a new episode, the URL should be: http://localhost:8000/pathway/#/simples/{{ patient_id }}  To update a particular episode the URL should be: http://localhost:8000/pathway/#/simples/{{ patient_id }}/{{ episode_id }}  When you visit these urls with the ids for existing patients and episodes,\nthe form will be prepulated with the existing data for that patient/episode.", 
            "title": "Loading Data From Existing Episodes"
        }, 
        {
            "location": "/guides/pathways/#multiple-instances-of-records", 
            "text": "If the model is not a singleton, by default it will be show in the form as\na multiple section that allows the user to add one or more models.  If you don't wish this to happen, pass  multiple=False  to the Step  This displays a delete button for existing subrecords.  By default, any subrecords that are deleted, or are not included in the data sent back\nto the server are deleted.  If you don't wish this to happen, pass  delete_others=False  to the Step.  from opal.core import pathway\nfrom myapp import models\n\nclass SimplePathway(pathway.Pathway):\n    display_name = 'A simple pathway'\n    slug         = 'simples'\n    steps        = (\n        pathway.Step(model=models.Allergies, delete_others=True),\n        models.Treatment,\n        models.PastMedicalHistory\n    )  In this case, the pathway will delete any existing instances of the given Subrecord Model that\nare not sent back to the API in the JSON data.", 
            "title": "Multiple Instances Of Records"
        }, 
        {
            "location": "/guides/pathways/#complex-steps", 
            "text": "If we want to save multiple types of subrecords at the same step, we can do that by including the\nrelevant form templates in a custom step template.  from opal.core import pathway\nfrom myapp import models\n\nclass SimplePathway(pathway.Pathway):\n    display_name = 'A simple pathway'\n    slug         = 'simples'\n    steps        = (\n        pathways.Step(\n            display_name='Demographics and Diagnosis',\n            icon='fa fa-clock',\n            template='pathways/demographics_and_diagnosis_step.html'\n            ),\n    )  The display name and icon are rendered in the header for this step in your pathway, which\nexist outside the scope of the step template itself. Then all we would need is the template\nitself:  !-- pathways/demographics_and_diagnosis_step.html -- \n{% include models.Demographics.get_form_template %}\n{% include models.Diagnosis.get_form_template %}  \nPathways created in this way will not add in the model defaults.", 
            "title": "Complex Steps"
        }, 
        {
            "location": "/guides/pathways/#complex-step-logic", 
            "text": "Pathway steps can be rendered with a custom controller.\nYou can do this by declaring an angular step in your controller.  steps = (\n    Step(\n        model=MyModel,\n        step_controller= FindPatientCtrl ,\n    ),\n)  Your javascript controller should then look something like...  angular.module('opal.controllers').controller('FindPatientCtrl',\n    function(scope, step, episode) {\n     use strict ;\n    // your custom logic\n});  oWe can pass in custom controllers to individual steps. Custom\ncontrollers are sandboxed, they share  scope.editing  with other scopes but\nnothing else.  The scope passed in comes with reference data and meta data set as attributes.\nIt also comes with the scope.editing. This is the dictionary that will\nappear in the form and will be saved back at the end.  The step is the step definition from the server - the output of step.to_dict .  The  episode  is an instance of the javascript Episode class - not the output\nof  Episode.makeCopy() .  Before a copy of the form data is sent back to the server, it is passed to the preSave  method of each step controller. Step controllers may alter this data\nhere if required to e.g. add implicit data points not contained in the form.", 
            "title": "Complex step logic"
        }, 
        {
            "location": "/guides/pathways/#complex-steps-with-multiple-instances-per-subrecord", 
            "text": "If we need to also save multiple types of the same subrecord e.g.  Treatment  in this step,\nwe simply use the  multisave  template tag.  {% load pathways %}\n\n{% include models.Demographics.get_form_template %}\n{% include models.Diagnosis.get_form_template %}\n{% multisave models.Treatment %}  Alternatively you may want to create your own multisave step forms, you can use the\ndirective  multi-save-wrapper  for this.   div save-multiple-wrapper= editing.treatment \n   div ng-repeat= editing in model.subrecords \n    {% input field= Treatment.drug  %}\n     button ng-click= remove($index) /button \n   /div \n\n   button ng-click= addAnother() /button  /div", 
            "title": "Complex Steps With Multiple Instances Per Subrecord"
        }, 
        {
            "location": "/guides/pathways/#validation", 
            "text": "If you want to add custom validation, the method  StepController.valid(form)  is\ncalled on each step controller.  This means you can set validation rules on the form.  An invalid form will have the save button disabled, until the form is valid.", 
            "title": "Validation"
        }, 
        {
            "location": "/guides/pathways/#wizards", 
            "text": "Wizard pathways look for a  hideFooter  variable that defaults to false. If set to true, this will hide the default next/save button. If you don't want the wizard pathway to be a linear progression.\nThis is useful when you want the user to go to different\nsteps based on options they chose.  If you want to handle complex order, this is best done in a custom controller\nfor you step class. You can set this with.", 
            "title": "Wizards"
        }, 
        {
            "location": "/guides/pathways/#success-redirects", 
            "text": "Often, after successfully saving a pathway, we want to redirect the user to a different\nURL - we do this by overriding the  redirect_url  method on the pathway. For example -\nto create a pathway that always logged the user out after a successful save:  class LogoutPathway(pathway.Pathway):\n    display_name = 'Logout-O-Matic'\n    steps        = (...)\n\n    def redirect_url(self, patient):\n        return '/accounts/logout/'", 
            "title": "Success Redirects"
        }, 
        {
            "location": "/guides/pathways/#redirect-mixins", 
            "text": "By default any full page pathway (ie not a modal) will redirect to the episode\ndetail view of that episode.  If you do not wish this to be the case you can override the redirect_url.  Pathways comes with the  RedirectsToPatientMixin , which redirects to the Patient\ndetail view and can be used as follows.  from opal.core.pathway import RedirectsToPatientMixin\n\nclass PatientRedirectPathway(pathway.RedirectsToPatientMixin, pathway.PagePathway):\n    display_name = 'Redirector example Pathway'\n    steps = (...)", 
            "title": "Redirect Mixins"
        }, 
        {
            "location": "/guides/pathways/#modal-pathways", 
            "text": "Pathways detect when you're opening a pathway from a modal.  You can use a different template for your modal pathway by adding a modal_template attribute to your pathway  Pathways ships with a no footer modal template, the same as the normal modal template but it doesn't display the section at the bottom with the save/cancel button.  To open a modal pathway in a template you can use the open-pathway directive:  a open-pathway= test_results open test results pathway /a   The open-pathway directive also includes an optional callback, that is called with the context of the result of the modal.save method, ie episode_id, patient_id and redirect_url.  By default the pathway is opened with whichever episode is on $scope.episode, you can use pathway-episode to define a different episode.  a open-pathway= test_results \n   pathway-episode= someOtherEpisode \n   pathway-callback= refreshEpisode(episode_id) \n   open test results pathway /a", 
            "title": "Modal Pathways"
        }, 
        {
            "location": "/guides/django_admin/", 
            "text": "Working with the Django Admin\n\n\nOne of the great features of Django is the\n\nAdmin application\n it provides for\ndevelopers and administrators.\n\n\nBy default, you can access the Django admin by visiting the \n/admin/\n url of your application.\n\n\nOpal will automatically register Patients, Episodes, Lookup lists, and all Subrecords with the\nDjango Admin for you.\n\n\nCustomising the Admin\n\n\nIf you need to customise the admin for a particular subrecord you will need to 'unregister' the\nadmin class that Opal has registered it with.\n\n\n# myapp/admin.py\nfrom django.contrib import admin\nfrom opal.admin import EpisodeSubrecordAdmin\nfrom myapp import models\n\nadmin.site.unregister(models.Diagnosis)\n\nclass DiagnosisAdmin(EpisodeSubrecordAdmin):\n  list_display = ['__unicode__', 'condition']\n\nadmin.site.register(models.Diagnosis, DiagnosisAdmin)\n\n\n\n\nIt is strongly suggested that any custom Admin implementation inherits from the Django\nReversion \nReversionAdmin\n base class. It is through this registering step that our automatic\naudit trail is enabled for a particular model.\n\n\nThe base subrecord admin classes \nopal.admin.EpisodeSubrecordAdmin\n and\n\nopal.admin.PatientSubrecordAdmin\n allow searching by basic patient demographics (name,\nidentifier), and also inherits from \nReversionAdmin\n.", 
            "title": "Django Admin"
        }, 
        {
            "location": "/guides/django_admin/#working-with-the-django-admin", 
            "text": "One of the great features of Django is the Admin application  it provides for\ndevelopers and administrators.  By default, you can access the Django admin by visiting the  /admin/  url of your application.  Opal will automatically register Patients, Episodes, Lookup lists, and all Subrecords with the\nDjango Admin for you.", 
            "title": "Working with the Django Admin"
        }, 
        {
            "location": "/guides/django_admin/#customising-the-admin", 
            "text": "If you need to customise the admin for a particular subrecord you will need to 'unregister' the\nadmin class that Opal has registered it with.  # myapp/admin.py\nfrom django.contrib import admin\nfrom opal.admin import EpisodeSubrecordAdmin\nfrom myapp import models\n\nadmin.site.unregister(models.Diagnosis)\n\nclass DiagnosisAdmin(EpisodeSubrecordAdmin):\n  list_display = ['__unicode__', 'condition']\n\nadmin.site.register(models.Diagnosis, DiagnosisAdmin)  It is strongly suggested that any custom Admin implementation inherits from the Django\nReversion  ReversionAdmin  base class. It is through this registering step that our automatic\naudit trail is enabled for a particular model.  The base subrecord admin classes  opal.admin.EpisodeSubrecordAdmin  and opal.admin.PatientSubrecordAdmin  allow searching by basic patient demographics (name,\nidentifier), and also inherits from  ReversionAdmin .", 
            "title": "Customising the Admin"
        }, 
        {
            "location": "/guides/CONTRIBUTING/", 
            "text": "Contributing to Opal\n\n\nOpal is developed as an open source project, and as such we welcome contributions in the form of bug reports, documentation, and code.\n\n\nReporting bugs\n\n\nIf you find what looks like a bug, add an issue to the \nGithub Issue tracker\n.\n\n\nUnclear documentation, unexpected error messages definitely count as bugs - feel free to raise issues about them.\n\n\nPlease try to include steps to reproduce your bug in the issue - it helps us enormously to find and fix it.\n\n\nContributing enhancements or fixes\n\n\nIf you want to contribute an enhancement or fix to Opal:\n\n\n\n\nFork the project on Github\n\n\nMake a feature branch from the latest default branch (this will be named vX.Y.Z and set as the default branch on Github)\n\n\nMake your changes\n\n\nMake sure that our test suite still runs, and that your changes are covered by tests (running \nopal test -c\n in the root directory of the repository will\nrun both python and javascript tests, as well as generate HTML code coverage reports.)\n\n\nUpdate the Opal documentation to be\n\n\nCommit the changes and push to your fork\n\n\nSubmit a pull request to Opal\n\n\n\n\nAt this stage, we will assign someone to review your changes before merging. We might ask you to make some changes to your pull request before\nmerging, but in general, we are biased towards accepting contributions from the community.\n\n\nThat said, we won't merge your pull request if:\n\n\n\n\nIt doesn't come with tests\n\n\nIt doesn't update the relevant documentation\n\n\n\n\nDon't worry though - we're happy to guide new contributors through this process.\n\n\nIf you want to discuss ideas you have for changes before making them, you can always propose enhancements on\nthe \nGithub Issue tracker\n or post questions and open discussions on the\n\nmailing list\n.\n\n\nIssues suitable for new contributors\n\n\nIssues in the github issue tracker labelled 'easy' have been identified as particularly appropriate for new contributors.", 
            "title": "Contributing"
        }, 
        {
            "location": "/guides/CONTRIBUTING/#contributing-to-opal", 
            "text": "Opal is developed as an open source project, and as such we welcome contributions in the form of bug reports, documentation, and code.", 
            "title": "Contributing to Opal"
        }, 
        {
            "location": "/guides/CONTRIBUTING/#reporting-bugs", 
            "text": "If you find what looks like a bug, add an issue to the  Github Issue tracker .  Unclear documentation, unexpected error messages definitely count as bugs - feel free to raise issues about them.  Please try to include steps to reproduce your bug in the issue - it helps us enormously to find and fix it.", 
            "title": "Reporting bugs"
        }, 
        {
            "location": "/guides/CONTRIBUTING/#contributing-enhancements-or-fixes", 
            "text": "If you want to contribute an enhancement or fix to Opal:   Fork the project on Github  Make a feature branch from the latest default branch (this will be named vX.Y.Z and set as the default branch on Github)  Make your changes  Make sure that our test suite still runs, and that your changes are covered by tests (running  opal test -c  in the root directory of the repository will\nrun both python and javascript tests, as well as generate HTML code coverage reports.)  Update the Opal documentation to be  Commit the changes and push to your fork  Submit a pull request to Opal   At this stage, we will assign someone to review your changes before merging. We might ask you to make some changes to your pull request before\nmerging, but in general, we are biased towards accepting contributions from the community.  That said, we won't merge your pull request if:   It doesn't come with tests  It doesn't update the relevant documentation   Don't worry though - we're happy to guide new contributors through this process.  If you want to discuss ideas you have for changes before making them, you can always propose enhancements on\nthe  Github Issue tracker  or post questions and open discussions on the mailing list .", 
            "title": "Contributing enhancements or fixes"
        }, 
        {
            "location": "/guides/CONTRIBUTING/#issues-suitable-for-new-contributors", 
            "text": "Issues in the github issue tracker labelled 'easy' have been identified as particularly appropriate for new contributors.", 
            "title": "Issues suitable for new contributors"
        }, 
        {
            "location": "/guides/development_environment/", 
            "text": "The Opal development environment\n\n\nGetting the code\n\n\nIf you're planning on working on Opal we recommend installing in a Virtualenv - to make that\neasy, we would suggest installing Virtualenvwrapper. To obtain the code, set up a virtualenv\nand install Opal and the dependencies you'll need, run the following:\n\n\ngit clone git@github.com:openhealthcare/opal\ncd opal\nmkvirtualenv -a $PWD opal\npython setup.py develop\npip install -r test-requirements.txt\n\n\n\n\nRunning the tests\n\n\nIn order to run the Opal test suite you'll also need to install the Javascript test runner:\n\n\nnpm install jasmine-core karma karma-coverage karma-jasmine karma-phantomjs-launcher\n\n\n\n\nTo run the test suite:\n\n\nopal test\n\n\n\n\nYou can also run just one suite (Javascript or Python) individually:\n\n\nopal test py\nopal test js", 
            "title": "Development environment"
        }, 
        {
            "location": "/guides/development_environment/#the-opal-development-environment", 
            "text": "", 
            "title": "The Opal development environment"
        }, 
        {
            "location": "/guides/development_environment/#getting-the-code", 
            "text": "If you're planning on working on Opal we recommend installing in a Virtualenv - to make that\neasy, we would suggest installing Virtualenvwrapper. To obtain the code, set up a virtualenv\nand install Opal and the dependencies you'll need, run the following:  git clone git@github.com:openhealthcare/opal\ncd opal\nmkvirtualenv -a $PWD opal\npython setup.py develop\npip install -r test-requirements.txt", 
            "title": "Getting the code"
        }, 
        {
            "location": "/guides/development_environment/#running-the-tests", 
            "text": "In order to run the Opal test suite you'll also need to install the Javascript test runner:  npm install jasmine-core karma karma-coverage karma-jasmine karma-phantomjs-launcher  To run the test suite:  opal test  You can also run just one suite (Javascript or Python) individually:  opal test py\nopal test js", 
            "title": "Running the tests"
        }, 
        {
            "location": "/guides/releasing/", 
            "text": "Making a Release\n\n\n\n\n\n\nTag the HEAD of the release branch and push to github: \ngit tag \nversion\n \n git push --tags\n.\nOpal branch names are in the format \nvX.Y.Z\n the tag for a release should be the \nX.Y.Z\n component\nof the branch name.\n\n\n\n\n\n\nCheck version is correct in \n_version.py\n.\n\n\n\n\n\n\nMake sure you have \ntwine\n installed and then: \nmake release\n\n\n\n\n\n\nMerge the branch you are releasing into \nmaster\n\n\n\n\n\n\nUpdate the Github release page and make sure that it has the relevant Changelog contents.\n\n\n\n\n\n\nIf the branch for the next version does not already exist, create that branch. For instance, if you\nhave released \nx.y.z\n then create \nx.y.(z+1)\n. If you are creating a new version branch, ensure you have\nalso changed the version number in the documentation, \nopal._version.__version__\n, and the branches that\nany badges in the project README are pointing at.\n\n\n\n\n\n\nChange the github default branch to be the new in development version\n\n\n\n\n\n\nUpdate the Opal website: Change the current release and development version on the homepage, and run\n\nrake docs\n to regenerate the documentation site with a new latest stable release version.\n\n\n\n\n\n\nPost to the Opal mailing list to announce the new release.", 
            "title": "Releasing"
        }, 
        {
            "location": "/guides/releasing/#making-a-release", 
            "text": "Tag the HEAD of the release branch and push to github:  git tag  version    git push --tags .\nOpal branch names are in the format  vX.Y.Z  the tag for a release should be the  X.Y.Z  component\nof the branch name.    Check version is correct in  _version.py .    Make sure you have  twine  installed and then:  make release    Merge the branch you are releasing into  master    Update the Github release page and make sure that it has the relevant Changelog contents.    If the branch for the next version does not already exist, create that branch. For instance, if you\nhave released  x.y.z  then create  x.y.(z+1) . If you are creating a new version branch, ensure you have\nalso changed the version number in the documentation,  opal._version.__version__ , and the branches that\nany badges in the project README are pointing at.    Change the github default branch to be the new in development version    Update the Opal website: Change the current release and development version on the homepage, and run rake docs  to regenerate the documentation site with a new latest stable release version.    Post to the Opal mailing list to announce the new release.", 
            "title": "Making a Release"
        }, 
        {
            "location": "/guides/deployment/", 
            "text": "Deploying Opal\n\n\nIt's no use building a great application if you can't easily deploy it.\n\n\nBecause Opal is built on top of Django, we can take advantage of all the hard work that\n\nthe open source community\n has\nput into making it easy to deploy Django applications.\n\n\nOpal can be deployed on any modern web server, if you're new to deploying Django applications\nwe'd recommend you try \nApache and mod_wsgi\n\nfirst. In most cases it'll be the easiest deployment choice.\n\n\nHeroku\n\n\nThe Opal scaffold application comes with a \nProcfile\n ready for Heroku deployment, and the\ndefault \nrequirements.txt\n includes some dependencies that allow us to easily deploy to\nHeroku.\n\n\n(Other PaaS and cloud technologies are available, and Opal should deploy fairly easily\nto any of them!)\n\n\nDeploying to Heroku\n\n\nFirstly, \nsign up for Heroku\n, and install their\n\ncommand line tool\n.\n\n\nWe then need to create a new heroku application, and set up our database:\n\n\nheroku create\nheroku addons:create heroku-postgresql\n\n\n\n\nNext, we need to push our application code to the Heroku server with git:\n\n\ngit push heroku master\n\n\n\n\nThen we can run our migrations, load our lookuplists and create a user:\n\n\nheroku run python manage.py migrate\nheroku run python manage.py load_lookup_lists\nheroku run python manage.py createsuperuser\n\n\n\n\nWe should now be able to log in to our deployed app - to open it in a browser:\n\n\nheroku open", 
            "title": "Deployment"
        }, 
        {
            "location": "/guides/deployment/#deploying-opal", 
            "text": "It's no use building a great application if you can't easily deploy it.  Because Opal is built on top of Django, we can take advantage of all the hard work that the open source community  has\nput into making it easy to deploy Django applications.  Opal can be deployed on any modern web server, if you're new to deploying Django applications\nwe'd recommend you try  Apache and mod_wsgi \nfirst. In most cases it'll be the easiest deployment choice.", 
            "title": "Deploying Opal"
        }, 
        {
            "location": "/guides/deployment/#heroku", 
            "text": "The Opal scaffold application comes with a  Procfile  ready for Heroku deployment, and the\ndefault  requirements.txt  includes some dependencies that allow us to easily deploy to\nHeroku.  (Other PaaS and cloud technologies are available, and Opal should deploy fairly easily\nto any of them!)", 
            "title": "Heroku"
        }, 
        {
            "location": "/guides/deployment/#deploying-to-heroku", 
            "text": "Firstly,  sign up for Heroku , and install their command line tool .  We then need to create a new heroku application, and set up our database:  heroku create\nheroku addons:create heroku-postgresql  Next, we need to push our application code to the Heroku server with git:  git push heroku master  Then we can run our migrations, load our lookuplists and create a user:  heroku run python manage.py migrate\nheroku run python manage.py load_lookup_lists\nheroku run python manage.py createsuperuser  We should now be able to log in to our deployed app - to open it in a browser:  heroku open", 
            "title": "Deploying to Heroku"
        }, 
        {
            "location": "/reference/episode/", 
            "text": "opal.models.Episode\n\n\nThe \nopal.models.Episode\n class represents an episode of care for a patient.\nThis can be either an inpatient stay, an outpatient treatment, a telephone\nliaison, an appointment at a clinic, or any other arbitrarily defined period of care.\n\n\nFields\n\n\nEpisode.category\n\n\nThe \ncategory\n of this episode - e.g. inpatient, outpatient et cetera.\nThis defaults to whatever is set on your application's subclass of\n\nopal.core.application.OpalApplication\n - which itself defaults to 'inpatient'.\n\n\nEpisode.patient\n\n\nA foreign key relationship to the patient for whom this episode concerns.\n\n\nEpisode.active\n\n\nA boolean to provide a quick lookup for whether this is an active or closed episode.\n\n\nEpisode.start\n\n\nThis should be the start of the episode. If this is an inpatient episode, the date of admission.\n\n\nEpisode.end\n\n\nThis should be the end of the episode. If this is an inpatient episode, the date of discharge.\n\n\nEpisode.consistency_token\n\n\nA (automatically generated) hash of the above fields. This is used for detecting concurrent edits.\n\n\nMethods\n\n\nThe Episode model has the following methods:\n\n\nEpisode.to_dict\n\n\nReturn a dictionary of field value pairs for this episode\n\n\nepisode.to_dict(user)\n\n\n\nArguments:\n\n\n\n\nuser\n The User for whom we want to serialise this episode\n\n\n\n\nKeywords:\n\n\n\n\nshallow\n Boolean to indicate whether we want just this episode, or also a sorted set of\nprevious and subsequent episodes\n\n\n\n\nEpisode.get_tag_names(user)\n\n\nArguments:\n\n\n\n\nuser\n The user for whom we want the tag names.\n\n\n\n\nReturn the current active tag names for this Episode as strings.\n\n\nepisode.get_tag_names(user)\n# ['mine', 'infectioncontrol']\n\n\n\nEpisode.set_tag_names(tag_names, user)\n\n\nArguments:\n\n\n\n\ntag_names\n The list of tags that we want to be active for this Episode.\n\n\nuser\n The user for whom we want the tag names.\n\n\n\n\nSet tags for this Episode.\n\n\nepisode.set_tag_names(['mine', 'infectioncontrol'], user)\n\n\n\n\nEpisode.set_tag_names_from_tagging_dict(tagging_dict, user)\n\n\nArguments:\n\n\n\n\ntagging_dict\n The dictionary of {tag_name: boolean} tags to set\n\n\nuser\n The user for whom we want the tag names.\n\n\n\n\nSet tags for this Episode.\n\n\nepisode.set_tag_names_from_tagging_dict({'inpatient': True}, user)\n\n\n\n\nEpisode.set_stage(stage, user, data)\n\n\nSetter function for episode stage. Will validate that the stage given is\nvalid for the current \nEpisodeCategory\n and raise \nValueError\n if it is invalid.\n\n\nepisode.set_stage('Discharged', user, {})\nepisode.stage\n# -\n 'Discharged'\n\n\n\n\nManager\n\n\nThe custom manager for Episodes has the following methods:\n\n\nEpisode.objects.serialised()\n\n\nReturn a set of serialised episodes.\n\n\nEpisode.objects.serialised(User, [episode, ...], historic_tags=False)\n\n\n\nArguments:\n\n\n\n\nuser\n The User for whom we want to serialise this episode\n\n\nepisodes\n An iterable of Episode instances\n\n\n\n\nKeywords:\n\n\n\n\nhistoric_tags\n A boolean to indicate whether the user desires historic or just current tags to\nbe serialised\n\n\n\n\nEpisode.objects.search\n\n\nAs a useful utility, the episode manager has a search method that will search on first name, last name and/or hospital number, under the hood it uses \nPatient search\n\n\nopal.core.api.EpisodeViewSet\n\n\nGives you an api for create/update/list/retrieve apis for episodes. Its recommended that you use \nopal.core.patient_lists\n rather than the list api, as this gives you more flexibility.\n\n\nThe Create api accepts {\n    demographics: {{ a serialised demographics model }},\n    location: {{ a serialised location model }}.\n    tagging: {{ a dictionary of tag names to True }}\n}", 
            "title": "The Episode model"
        }, 
        {
            "location": "/reference/episode/#opalmodelsepisode", 
            "text": "The  opal.models.Episode  class represents an episode of care for a patient.\nThis can be either an inpatient stay, an outpatient treatment, a telephone\nliaison, an appointment at a clinic, or any other arbitrarily defined period of care.", 
            "title": "opal.models.Episode"
        }, 
        {
            "location": "/reference/episode/#fields", 
            "text": "", 
            "title": "Fields"
        }, 
        {
            "location": "/reference/episode/#episodecategory", 
            "text": "The  category  of this episode - e.g. inpatient, outpatient et cetera.\nThis defaults to whatever is set on your application's subclass of opal.core.application.OpalApplication  - which itself defaults to 'inpatient'.", 
            "title": "Episode.category"
        }, 
        {
            "location": "/reference/episode/#episodepatient", 
            "text": "A foreign key relationship to the patient for whom this episode concerns.", 
            "title": "Episode.patient"
        }, 
        {
            "location": "/reference/episode/#episodeactive", 
            "text": "A boolean to provide a quick lookup for whether this is an active or closed episode.", 
            "title": "Episode.active"
        }, 
        {
            "location": "/reference/episode/#episodestart", 
            "text": "This should be the start of the episode. If this is an inpatient episode, the date of admission.", 
            "title": "Episode.start"
        }, 
        {
            "location": "/reference/episode/#episodeend", 
            "text": "This should be the end of the episode. If this is an inpatient episode, the date of discharge.", 
            "title": "Episode.end"
        }, 
        {
            "location": "/reference/episode/#episodeconsistency_token", 
            "text": "A (automatically generated) hash of the above fields. This is used for detecting concurrent edits.", 
            "title": "Episode.consistency_token"
        }, 
        {
            "location": "/reference/episode/#methods", 
            "text": "The Episode model has the following methods:", 
            "title": "Methods"
        }, 
        {
            "location": "/reference/episode/#episodeto_dict", 
            "text": "Return a dictionary of field value pairs for this episode  episode.to_dict(user)  Arguments:   user  The User for whom we want to serialise this episode   Keywords:   shallow  Boolean to indicate whether we want just this episode, or also a sorted set of\nprevious and subsequent episodes", 
            "title": "Episode.to_dict"
        }, 
        {
            "location": "/reference/episode/#episodeget_tag_namesuser", 
            "text": "Arguments:   user  The user for whom we want the tag names.   Return the current active tag names for this Episode as strings.  episode.get_tag_names(user)\n# ['mine', 'infectioncontrol']", 
            "title": "Episode.get_tag_names(user)"
        }, 
        {
            "location": "/reference/episode/#episodeset_tag_namestag_names-user", 
            "text": "Arguments:   tag_names  The list of tags that we want to be active for this Episode.  user  The user for whom we want the tag names.   Set tags for this Episode.  episode.set_tag_names(['mine', 'infectioncontrol'], user)", 
            "title": "Episode.set_tag_names(tag_names, user)"
        }, 
        {
            "location": "/reference/episode/#episodeset_tag_names_from_tagging_dicttagging_dict-user", 
            "text": "Arguments:   tagging_dict  The dictionary of {tag_name: boolean} tags to set  user  The user for whom we want the tag names.   Set tags for this Episode.  episode.set_tag_names_from_tagging_dict({'inpatient': True}, user)", 
            "title": "Episode.set_tag_names_from_tagging_dict(tagging_dict, user)"
        }, 
        {
            "location": "/reference/episode/#episodeset_stagestage-user-data", 
            "text": "Setter function for episode stage. Will validate that the stage given is\nvalid for the current  EpisodeCategory  and raise  ValueError  if it is invalid.  episode.set_stage('Discharged', user, {})\nepisode.stage\n# -  'Discharged'", 
            "title": "Episode.set_stage(stage, user, data)"
        }, 
        {
            "location": "/reference/episode/#manager", 
            "text": "The custom manager for Episodes has the following methods:", 
            "title": "Manager"
        }, 
        {
            "location": "/reference/episode/#episodeobjectsserialised", 
            "text": "Return a set of serialised episodes.  Episode.objects.serialised(User, [episode, ...], historic_tags=False)  Arguments:   user  The User for whom we want to serialise this episode  episodes  An iterable of Episode instances   Keywords:   historic_tags  A boolean to indicate whether the user desires historic or just current tags to\nbe serialised", 
            "title": "Episode.objects.serialised()"
        }, 
        {
            "location": "/reference/episode/#episodeobjectssearch", 
            "text": "As a useful utility, the episode manager has a search method that will search on first name, last name and/or hospital number, under the hood it uses  Patient search", 
            "title": "Episode.objects.search"
        }, 
        {
            "location": "/reference/episode/#opalcoreapiepisodeviewset", 
            "text": "Gives you an api for create/update/list/retrieve apis for episodes. Its recommended that you use  opal.core.patient_lists  rather than the list api, as this gives you more flexibility.  The Create api accepts {\n    demographics: {{ a serialised demographics model }},\n    location: {{ a serialised location model }}.\n    tagging: {{ a dictionary of tag names to True }}\n}", 
            "title": "opal.core.api.EpisodeViewSet"
        }, 
        {
            "location": "/reference/patient/", 
            "text": "opal.models.Patient\n\n\nmethods\n\n\ncreate_episode\n\n\nReturns a new \nEpisode\n for this patient.\n\n\nto_dict\n\n\nReturn the dictionary representation of this patient - suitable for serialization.\n\n\npatient.to_dict(user)\n\n\n\nbulk_update\n\n\nCreate or update many subrecords in one go, from a serialised dictionary of data.\n\n\nPass in a dictionary of subrecords you want to update, as well as an episode if one exists.\nThis method will create all the subrecords and implicitly create a new episode if required.\n\n\nThis API will execute all create/update operations as an atomic transaction.\n\n\nFor example the following will create a patient:\n\n\npatient = Patient()\npatient.bulk_update(\n  {\n    \"demographics\": \"hospital_number\": \"1231212\",\n    \"allergies\": [\n        {\"drug\": \"penicillin\"},\n        {\"drug\": \"aspirin\"},\n    ]\n  },\n  user\n)\n\n\n\nManager\n\n\nThe custom manager for Patient has the following methods:\n\n\nPatient.objects.search\n\n\nA useful utility the patient manager has a search method that\nwill search on first name last name hospital number. Its splits the string input on space, so if you do \"12 Jane\", you will get all\nPatients who's name, surname or hospital number contains either\n12 or Jane, in this example most probably people who's hospital\nnumber contains 12 and who's first name is Jane.", 
            "title": "The Patient model"
        }, 
        {
            "location": "/reference/patient/#opalmodelspatient", 
            "text": "", 
            "title": "opal.models.Patient"
        }, 
        {
            "location": "/reference/patient/#methods", 
            "text": "", 
            "title": "methods"
        }, 
        {
            "location": "/reference/patient/#create_episode", 
            "text": "Returns a new  Episode  for this patient.", 
            "title": "create_episode"
        }, 
        {
            "location": "/reference/patient/#to_dict", 
            "text": "Return the dictionary representation of this patient - suitable for serialization.  patient.to_dict(user)", 
            "title": "to_dict"
        }, 
        {
            "location": "/reference/patient/#bulk_update", 
            "text": "Create or update many subrecords in one go, from a serialised dictionary of data.  Pass in a dictionary of subrecords you want to update, as well as an episode if one exists.\nThis method will create all the subrecords and implicitly create a new episode if required.  This API will execute all create/update operations as an atomic transaction.  For example the following will create a patient:  patient = Patient()\npatient.bulk_update(\n  {\n    \"demographics\": \"hospital_number\": \"1231212\",\n    \"allergies\": [\n        {\"drug\": \"penicillin\"},\n        {\"drug\": \"aspirin\"},\n    ]\n  },\n  user\n)", 
            "title": "bulk_update"
        }, 
        {
            "location": "/reference/patient/#manager", 
            "text": "The custom manager for Patient has the following methods:", 
            "title": "Manager"
        }, 
        {
            "location": "/reference/patient/#patientobjectssearch", 
            "text": "A useful utility the patient manager has a search method that\nwill search on first name last name hospital number. Its splits the string input on space, so if you do \"12 Jane\", you will get all\nPatients who's name, surname or hospital number contains either\n12 or Jane, in this example most probably people who's hospital\nnumber contains 12 and who's first name is Jane.", 
            "title": "Patient.objects.search"
        }, 
        {
            "location": "/reference/subrecords/", 
            "text": "Opal Subrecords\n\n\nOpal Subrecords are models that relate to either Patients or Episodes, and inherit from\nbase classes \nopal.models.PatientSubrecord\n or \nopal.models.EpisodeSubrecord\n\n\nThey themselves inherit from the mixins \nopal.models.ToDictMixin\n, \nopal.models.UpdateFromDict\n\n\nProperties\n\n\nSubrecord._angular_service\n\n\nName of the Angular service you would like to use to customise the initialization of this\nsubrecord in the javascript layer.\n\n\n\nclass Demographics(PatientSubrecord):\n    _angular_service = 'Demographics'\n\n\n\n\nSubrecord._icon\n\n\nString that provides the name of the icon to use for forms, column headings etc.\n\n\nclass Demographics(PatientSubrecord):\n    _icon = 'fa fa-user'\n\n\n\nSubrecord._is_singleton\n\n\nBoolean that determines whether this subrecord is a singleton.\nThere may only be one of each singleton Subrecord, which is created with the parent.\n\n\n    class Demographics(PatientSubrecord):\n        _is_singleton = True\n\n\n\n\nFor this case, when a \nPatient\n is created, an empty \nDemographics\n instance will\nautomatically be created.\n\n\nSubrecord._list_limit\n\n\nInteger to indicate the maximum number of entries to display in list view for this\nmodel. Useful for record types where many entries will accrue, or where display is\nparticularly verbose.\n\n\n    class BloodPressureReading(EpisodeSubrecord):\n        _list_limit = 3\n\n\n\n\nSubrecord._sort\n\n\nName of the field by which we want to sort these records when displaying.\n\n\n    class Antimicrobial(EpisodeSubrecord):\n        _sort = 'start_date'\n\n\n\n\nSubrecord._title\n\n\nString we would like to use for user-facing display of this record type.\n\n\n    class Antimicrobial(EpisodeSubrecord):\n        _title = 'Abx'\n\n\n\n\nSubrecord._clonable\n\n\nA Boolean that is True by default used by \nopal.views.EpisodeCopyToCategoryView\n\nto determine if instances of this record should be copied across.\n\n\n    class Antimicrobial(EpisodeSubrecord):\n        _clonable = 'False'\n\n\n\n\nSubrecord._exclude_from_extract\n\n\nBoolean to specify that this subrecord should be excluded from any standard data extract.\nThis implicitly defaults to False.\n\n\n    class Antimicrobial(EpisodeSubrecord):\n        _exclude_from_extract = 'Abx'\n\n\n\n\nSubrecord.pid_fields\n\n\nAn iterable of strings that correspond to fieldnames that contain Patient Identifiable Data (PID).\n\n\nThis is used when creating data extracts to exclude PID from e.g. CSV downloads.\n\n\nMethods\n\n\nSubrecord.get_api_name()\n\n\nClassmethod that returns a snake case version of the API name for this subrecord.\nThis will be used in the URL for the subrecord API, and as a property name in Javascript\nrepresentations of the data.\n\n\n Demographics.get_api_name()\n\ndemographics\n\n\n\n\n\nSubrecord.get_display_template()\n\n\nClassmethod to locate the display template for our record. By default this\nlooks in the location \n{{ template_dir }}/records/{{ subrecord api name }}.html\n.\n\n\nKeywords:\n\n\n\n\nprefixes\n An optional list of prefixes that allow you to put templates behind an optional\ndirectory for example:\n\n\n\n\n  Subrecord.get_display_template(prefixes=[\nexample\n])\n\n\n\n\nWould use the first template it found, looking at:\n\n\n{{ template_dir }}/records/example/subrecord.html\n{{ template_dir }}/records/subrecord.html\n\n\n\n\nSubrecord.get_detail_template()\n\n\nClassmethod to locate a more detailed template for the subrecord. This is the\ntemplate used by the record panel. It looks for a template in\n\n{{ template_dir }}/records/{{ subrecord api name }}_detail.html\n.\n\n\nIt defaults to the display template if it can't find one there.\n\n\nKeywords:\n\n\n\n\nprefixes\n An optional list of prefixes that allow you to put templates behind an optional\ndirectory for example:\n\n\n\n\n  Subrecord.get_display_template(prefixes=[\nexample\n])\n\n\n\n\nWould use the first template it found, looking at:\n\n\n{{ template_dir }}/records/example/subrecord_detail.html\n{{ template_dir }}/records/example/subrecord.html\n{{ template_dir }}/records/subrecord_detail.html\n{{ template_dir }}/records/subrecord.html\n\n\n\n\nSubrecord.get_form_template()\n\n\nClassmethod to locate the active template for our record. Returns the name of a template or None.\nIt looks for a template in \n{{ template_dir }}/forms/{{ subrecord api name }}_form.html\n\n\nKeywords:\n\n\n\n\nprefixes\n An optional list of prefixes that allow you to put templates behind an optional\ndirectory for example:\n\n\n\n\n  Subrecord.get_form_template(prefixes=[\nexample\n])\n\n\n\n\nWould use the first template it found, looking at:\n\n\n{{ template_dir }}/forms/example/subrecord_form.html\n{{ template_dir }}/forms/subrecord_form.html\n\n\n\n\nSubrecord.get_modal_template()\n\n\nClassmethod to locate the active template for our record. Returns the name of a template or None.\nBy default it will render a modal with a form template from Subrecord.get_form_template(). You can\noverride this by putting a template named \n{{ template_dir }}/modals/{{ subrecord api name }}_modal.html\n\n\nKeywords:\n\n\n\n\nprefixes\n An optional list of prefixes that allow you to put templates behind an optional\ndirectory for example:\n\n\n\n\n  Subrecord.get_modal_template(prefixes=[\nexample\n])\n\n\n\n\nWould use the first template it found, looking at:\n\n\n{{ template_dir }}/modals/example/subrecord_modal.html\n{{ template_dir }}/modals/subrecord_modal.html\n\n\n\n\nAnd default to a modal containing the \nSubrecord.get_form_template\n.\n\n\nSubrecord.get_modal_footer_template\n\n\nClassmethod to add a custom footer to a modal, used for example to denote if\nthe data from a model has been sourced from an external source\n\n\nSubrecord.bulk_update_from_dicts()\n\n\nA Classmethod to allow the creation of multiple objects.\n\n\nTakes in the parent model - an episode\nfor EpisodeSubrecords a patient for PatientSubrecords. Under the covers it iterates\nover all the subrecords, adds in the parent relationship and calls update_from_dict. It returns a list of the objects updated.\n\n\nSubrecord Mixins\n\n\nTrackedModel\n\n\nA Tracked Model automatically has created, created_by, updated, updated_by and\nthese are only updated when used via the api\n\n\nExternallySourcedModel\n\n\nOften we want data to be sourced from external systems, this mixin adds in the\nfields external_system and external_identifier to allow us to track where\nthey come from and how they are referenced by that system.\n\n\nThese fields are then often used in forms to make the data read only", 
            "title": "Subrecords"
        }, 
        {
            "location": "/reference/subrecords/#opal-subrecords", 
            "text": "Opal Subrecords are models that relate to either Patients or Episodes, and inherit from\nbase classes  opal.models.PatientSubrecord  or  opal.models.EpisodeSubrecord  They themselves inherit from the mixins  opal.models.ToDictMixin ,  opal.models.UpdateFromDict", 
            "title": "Opal Subrecords"
        }, 
        {
            "location": "/reference/subrecords/#properties", 
            "text": "", 
            "title": "Properties"
        }, 
        {
            "location": "/reference/subrecords/#subrecord_angular_service", 
            "text": "Name of the Angular service you would like to use to customise the initialization of this\nsubrecord in the javascript layer.  \nclass Demographics(PatientSubrecord):\n    _angular_service = 'Demographics'", 
            "title": "Subrecord._angular_service"
        }, 
        {
            "location": "/reference/subrecords/#subrecord_icon", 
            "text": "String that provides the name of the icon to use for forms, column headings etc.  class Demographics(PatientSubrecord):\n    _icon = 'fa fa-user'", 
            "title": "Subrecord._icon"
        }, 
        {
            "location": "/reference/subrecords/#subrecord_is_singleton", 
            "text": "Boolean that determines whether this subrecord is a singleton.\nThere may only be one of each singleton Subrecord, which is created with the parent.      class Demographics(PatientSubrecord):\n        _is_singleton = True  For this case, when a  Patient  is created, an empty  Demographics  instance will\nautomatically be created.", 
            "title": "Subrecord._is_singleton"
        }, 
        {
            "location": "/reference/subrecords/#subrecord_list_limit", 
            "text": "Integer to indicate the maximum number of entries to display in list view for this\nmodel. Useful for record types where many entries will accrue, or where display is\nparticularly verbose.      class BloodPressureReading(EpisodeSubrecord):\n        _list_limit = 3", 
            "title": "Subrecord._list_limit"
        }, 
        {
            "location": "/reference/subrecords/#subrecord_sort", 
            "text": "Name of the field by which we want to sort these records when displaying.      class Antimicrobial(EpisodeSubrecord):\n        _sort = 'start_date'", 
            "title": "Subrecord._sort"
        }, 
        {
            "location": "/reference/subrecords/#subrecord_title", 
            "text": "String we would like to use for user-facing display of this record type.      class Antimicrobial(EpisodeSubrecord):\n        _title = 'Abx'", 
            "title": "Subrecord._title"
        }, 
        {
            "location": "/reference/subrecords/#subrecord_clonable", 
            "text": "A Boolean that is True by default used by  opal.views.EpisodeCopyToCategoryView \nto determine if instances of this record should be copied across.      class Antimicrobial(EpisodeSubrecord):\n        _clonable = 'False'", 
            "title": "Subrecord._clonable"
        }, 
        {
            "location": "/reference/subrecords/#subrecord_exclude_from_extract", 
            "text": "Boolean to specify that this subrecord should be excluded from any standard data extract.\nThis implicitly defaults to False.      class Antimicrobial(EpisodeSubrecord):\n        _exclude_from_extract = 'Abx'", 
            "title": "Subrecord._exclude_from_extract"
        }, 
        {
            "location": "/reference/subrecords/#subrecordpid_fields", 
            "text": "An iterable of strings that correspond to fieldnames that contain Patient Identifiable Data (PID).  This is used when creating data extracts to exclude PID from e.g. CSV downloads.", 
            "title": "Subrecord.pid_fields"
        }, 
        {
            "location": "/reference/subrecords/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/reference/subrecords/#subrecordget_api_name", 
            "text": "Classmethod that returns a snake case version of the API name for this subrecord.\nThis will be used in the URL for the subrecord API, and as a property name in Javascript\nrepresentations of the data.   Demographics.get_api_name() demographics", 
            "title": "Subrecord.get_api_name()"
        }, 
        {
            "location": "/reference/subrecords/#subrecordget_display_template", 
            "text": "Classmethod to locate the display template for our record. By default this\nlooks in the location  {{ template_dir }}/records/{{ subrecord api name }}.html .  Keywords:   prefixes  An optional list of prefixes that allow you to put templates behind an optional\ndirectory for example:     Subrecord.get_display_template(prefixes=[ example ])  Would use the first template it found, looking at:  {{ template_dir }}/records/example/subrecord.html\n{{ template_dir }}/records/subrecord.html", 
            "title": "Subrecord.get_display_template()"
        }, 
        {
            "location": "/reference/subrecords/#subrecordget_detail_template", 
            "text": "Classmethod to locate a more detailed template for the subrecord. This is the\ntemplate used by the record panel. It looks for a template in {{ template_dir }}/records/{{ subrecord api name }}_detail.html .  It defaults to the display template if it can't find one there.  Keywords:   prefixes  An optional list of prefixes that allow you to put templates behind an optional\ndirectory for example:     Subrecord.get_display_template(prefixes=[ example ])  Would use the first template it found, looking at:  {{ template_dir }}/records/example/subrecord_detail.html\n{{ template_dir }}/records/example/subrecord.html\n{{ template_dir }}/records/subrecord_detail.html\n{{ template_dir }}/records/subrecord.html", 
            "title": "Subrecord.get_detail_template()"
        }, 
        {
            "location": "/reference/subrecords/#subrecordget_form_template", 
            "text": "Classmethod to locate the active template for our record. Returns the name of a template or None.\nIt looks for a template in  {{ template_dir }}/forms/{{ subrecord api name }}_form.html  Keywords:   prefixes  An optional list of prefixes that allow you to put templates behind an optional\ndirectory for example:     Subrecord.get_form_template(prefixes=[ example ])  Would use the first template it found, looking at:  {{ template_dir }}/forms/example/subrecord_form.html\n{{ template_dir }}/forms/subrecord_form.html", 
            "title": "Subrecord.get_form_template()"
        }, 
        {
            "location": "/reference/subrecords/#subrecordget_modal_template", 
            "text": "Classmethod to locate the active template for our record. Returns the name of a template or None.\nBy default it will render a modal with a form template from Subrecord.get_form_template(). You can\noverride this by putting a template named  {{ template_dir }}/modals/{{ subrecord api name }}_modal.html  Keywords:   prefixes  An optional list of prefixes that allow you to put templates behind an optional\ndirectory for example:     Subrecord.get_modal_template(prefixes=[ example ])  Would use the first template it found, looking at:  {{ template_dir }}/modals/example/subrecord_modal.html\n{{ template_dir }}/modals/subrecord_modal.html  And default to a modal containing the  Subrecord.get_form_template .", 
            "title": "Subrecord.get_modal_template()"
        }, 
        {
            "location": "/reference/subrecords/#subrecordget_modal_footer_template", 
            "text": "Classmethod to add a custom footer to a modal, used for example to denote if\nthe data from a model has been sourced from an external source", 
            "title": "Subrecord.get_modal_footer_template"
        }, 
        {
            "location": "/reference/subrecords/#subrecordbulk_update_from_dicts", 
            "text": "A Classmethod to allow the creation of multiple objects.  Takes in the parent model - an episode\nfor EpisodeSubrecords a patient for PatientSubrecords. Under the covers it iterates\nover all the subrecords, adds in the parent relationship and calls update_from_dict. It returns a list of the objects updated.", 
            "title": "Subrecord.bulk_update_from_dicts()"
        }, 
        {
            "location": "/reference/subrecords/#subrecord-mixins", 
            "text": "", 
            "title": "Subrecord Mixins"
        }, 
        {
            "location": "/reference/subrecords/#trackedmodel", 
            "text": "A Tracked Model automatically has created, created_by, updated, updated_by and\nthese are only updated when used via the api", 
            "title": "TrackedModel"
        }, 
        {
            "location": "/reference/subrecords/#externallysourcedmodel", 
            "text": "Often we want data to be sourced from external systems, this mixin adds in the\nfields external_system and external_identifier to allow us to track where\nthey come from and how they are referenced by that system.  These fields are then often used in forms to make the data read only", 
            "title": "ExternallySourcedModel"
        }, 
        {
            "location": "/reference/user_profile_model/", 
            "text": "opal.models.UserProfile\n\n\nThe model which stores individual user profile information.\n\n\nMethods\n\n\nUserProfile.get_avatar_url\n\n\nReturn the URL at which the avatar for this user may be found.\nUses the User email address if it exists or the username to locate a\nGravatar URL.\n\n\nprofile = UserProfile.objects.get(pk=1)\nprofile.get_avatar_url()\n# http://gravatar....", 
            "title": "UserProfile"
        }, 
        {
            "location": "/reference/user_profile_model/#opalmodelsuserprofile", 
            "text": "The model which stores individual user profile information.", 
            "title": "opal.models.UserProfile"
        }, 
        {
            "location": "/reference/user_profile_model/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/reference/user_profile_model/#userprofileget_avatar_url", 
            "text": "Return the URL at which the avatar for this user may be found.\nUses the User email address if it exists or the username to locate a\nGravatar URL.  profile = UserProfile.objects.get(pk=1)\nprofile.get_avatar_url()\n# http://gravatar....", 
            "title": "UserProfile.get_avatar_url"
        }, 
        {
            "location": "/reference/mixins/", 
            "text": "Opal mixins\n\n\nSerialisableFields\n\n\nProvides the fields that are on the model for example\nif we have an allergy model with a field drug\nit might serialise like below\n\n\nAllergy._get_fieldnames_to_serialize() -\n [\"id\", \"drug\"]\n\n\n\nbuild_schema_for_field_name\n\n\nTakes in a field name and returns a json description of the field.\n\n\nget_human_readable_type\n\n\nProvides a human readable description of the field name for example\nDate \n Time for a DateTime Field.\n\n\nget_lookup_list_api_name\n\n\nProvides the api name of the lookup list related to the field if it exists\n\n\nToDictMixin\n\n\nProvides a method that serialises a model\nto a dictionary for example\nif we have an allergy model with a field drug\nit might serialise like below\n\n\nallergy.to_dict() -\n {\"id\": 1, \"drug\": \"penicillin\"}\n\n\n\nUpdateFromDict\n\n\nProvides a method that updates a model\nbased on a dictionary of fields, for example\n\n\nFor example on a new allergy\n\n\nallergy.update_from_dict({\"drug\": \"penicillin\"})\n\n\n\nwill update the allergy to have the drug penicillin.", 
            "title": "Mixins"
        }, 
        {
            "location": "/reference/mixins/#opal-mixins", 
            "text": "", 
            "title": "Opal mixins"
        }, 
        {
            "location": "/reference/mixins/#serialisablefields", 
            "text": "Provides the fields that are on the model for example\nif we have an allergy model with a field drug\nit might serialise like below  Allergy._get_fieldnames_to_serialize() -  [\"id\", \"drug\"]", 
            "title": "SerialisableFields"
        }, 
        {
            "location": "/reference/mixins/#build_schema_for_field_name", 
            "text": "Takes in a field name and returns a json description of the field.", 
            "title": "build_schema_for_field_name"
        }, 
        {
            "location": "/reference/mixins/#get_human_readable_type", 
            "text": "Provides a human readable description of the field name for example\nDate   Time for a DateTime Field.", 
            "title": "get_human_readable_type"
        }, 
        {
            "location": "/reference/mixins/#get_lookup_list_api_name", 
            "text": "Provides the api name of the lookup list related to the field if it exists", 
            "title": "get_lookup_list_api_name"
        }, 
        {
            "location": "/reference/mixins/#todictmixin", 
            "text": "Provides a method that serialises a model\nto a dictionary for example\nif we have an allergy model with a field drug\nit might serialise like below  allergy.to_dict() -  {\"id\": 1, \"drug\": \"penicillin\"}", 
            "title": "ToDictMixin"
        }, 
        {
            "location": "/reference/mixins/#updatefromdict", 
            "text": "Provides a method that updates a model\nbased on a dictionary of fields, for example  For example on a new allergy  allergy.update_from_dict({\"drug\": \"penicillin\"})  will update the allergy to have the drug penicillin.", 
            "title": "UpdateFromDict"
        }, 
        {
            "location": "/reference/opal_application/", 
            "text": "opal.core.application\n\n\nUtility functions\n\n\nget_app\n\n\nReturns the application class for the currently active application.\n\n\nget_all_components\n\n\nReturns an iterator of all the of the \nplugins\n and the current application\n\n\nOpalApplication\n\n\nThe base class for your main application entry point is opal.core.application.OpalApplication.\n\n\nYou must subclass this in order for Opal to discover your application.\n\n\nIf you started your Opal project via \n$ opal startproject yourproject\n then this will have been\ngenerated for you, and located in \nyourproject/yourproject/__init__.py\n\n\nProperties\n\n\nProperties available on an OpalApplication:\n\n\nOpalApplication.actions\n\n\nOpalApplication.default_episode_category\n\n\nThe default category is 'Inpatient', but can be overridden in the OpalApplication\nsubclass for your implementation.\n\n\nOpalApplication.angular_module_deps\n\n\nWhen you initialise an angular application you need to register dependencies.\nThis allows you to add to the dependencies of the default opal application.\n\n\nOpalApplication.javascripts\n\n\nA list of javascripts that our application would like to include. These should be strings\nrepresenting paths ready for staticfiles. Defaults to \n[]\n.\n\n\nclass MyApplication(OpalApplication):\n    javascripts = ['js/one.js']\n\n\n\n\nOpalApplication.menuitems\n\n\nA list of items to add to the top level menu\n\n\nOpalApplication.styles\n\n\nA list of stylesheets that our application would like to include. These should be strings\nrepresenting paths ready for staticfiles. Defaults to \n[]\n. These styles are included after\nthe default Opal styles.\n\n\nclass MyApplication(OpalApplication):\n    styles = ['css/app.css']\n\n\n\n\nClassmethods\n\n\nClassmethod API for OpalApplication instances:\n\n\nOpalApplication.get_core_javascripts(namespace)\n\n\nReturn a list of the core javascript files specified within a given namespace. These will be\nrelative paths ready for staticfiles.\n\n\napplication.get_core_javascripts('opal.utils')\n# -\n ['js/opal/utils.js', ...]\n\n\n\n\nOpalApplication.get_javascripts()\n\n\nReturn a list of the application's javascripts as paths to them ready for staticfiles.\nDefaults to returning the \nOpalApplication.javascripts\n property.\n\n\napplication.get_javascripts()\n# -\n ['js/one.js', 'js/two.js', ...]\n\n\n\n\nOpalApplication.directory\n\n\nReturns the file system location of the module.\n\n\nOpalApplication.get_menu_items(user=None)\n\n\nHook to customise the visibility of menu items to e.g. restrict some based on the current\nuser.\n\n\nOpalApplication.get_styles()\n\n\nReturn a list of the application's stylesheets as paths to them ready for staticfiles.\nDefaults to returning the contents of \nOpalApplication.styles\n.\n\n\napplication.get_styles()\n# -\n ['css/app.css', ...]", 
            "title": "OpalApplication"
        }, 
        {
            "location": "/reference/opal_application/#opalcoreapplication", 
            "text": "", 
            "title": "opal.core.application"
        }, 
        {
            "location": "/reference/opal_application/#utility-functions", 
            "text": "", 
            "title": "Utility functions"
        }, 
        {
            "location": "/reference/opal_application/#get_app", 
            "text": "Returns the application class for the currently active application.", 
            "title": "get_app"
        }, 
        {
            "location": "/reference/opal_application/#get_all_components", 
            "text": "Returns an iterator of all the of the  plugins  and the current application", 
            "title": "get_all_components"
        }, 
        {
            "location": "/reference/opal_application/#opalapplication", 
            "text": "The base class for your main application entry point is opal.core.application.OpalApplication.  You must subclass this in order for Opal to discover your application.  If you started your Opal project via  $ opal startproject yourproject  then this will have been\ngenerated for you, and located in  yourproject/yourproject/__init__.py", 
            "title": "OpalApplication"
        }, 
        {
            "location": "/reference/opal_application/#properties", 
            "text": "Properties available on an OpalApplication:", 
            "title": "Properties"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationactions", 
            "text": "", 
            "title": "OpalApplication.actions"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationdefault_episode_category", 
            "text": "The default category is 'Inpatient', but can be overridden in the OpalApplication\nsubclass for your implementation.", 
            "title": "OpalApplication.default_episode_category"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationangular_module_deps", 
            "text": "When you initialise an angular application you need to register dependencies.\nThis allows you to add to the dependencies of the default opal application.", 
            "title": "OpalApplication.angular_module_deps"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationjavascripts", 
            "text": "A list of javascripts that our application would like to include. These should be strings\nrepresenting paths ready for staticfiles. Defaults to  [] .  class MyApplication(OpalApplication):\n    javascripts = ['js/one.js']", 
            "title": "OpalApplication.javascripts"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationmenuitems", 
            "text": "A list of items to add to the top level menu", 
            "title": "OpalApplication.menuitems"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationstyles", 
            "text": "A list of stylesheets that our application would like to include. These should be strings\nrepresenting paths ready for staticfiles. Defaults to  [] . These styles are included after\nthe default Opal styles.  class MyApplication(OpalApplication):\n    styles = ['css/app.css']", 
            "title": "OpalApplication.styles"
        }, 
        {
            "location": "/reference/opal_application/#classmethods", 
            "text": "Classmethod API for OpalApplication instances:", 
            "title": "Classmethods"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationget_core_javascriptsnamespace", 
            "text": "Return a list of the core javascript files specified within a given namespace. These will be\nrelative paths ready for staticfiles.  application.get_core_javascripts('opal.utils')\n# -  ['js/opal/utils.js', ...]", 
            "title": "OpalApplication.get_core_javascripts(namespace)"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationget_javascripts", 
            "text": "Return a list of the application's javascripts as paths to them ready for staticfiles.\nDefaults to returning the  OpalApplication.javascripts  property.  application.get_javascripts()\n# -  ['js/one.js', 'js/two.js', ...]", 
            "title": "OpalApplication.get_javascripts()"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationdirectory", 
            "text": "Returns the file system location of the module.", 
            "title": "OpalApplication.directory"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationget_menu_itemsusernone", 
            "text": "Hook to customise the visibility of menu items to e.g. restrict some based on the current\nuser.", 
            "title": "OpalApplication.get_menu_items(user=None)"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationget_styles", 
            "text": "Return a list of the application's stylesheets as paths to them ready for staticfiles.\nDefaults to returning the contents of  OpalApplication.styles .  application.get_styles()\n# -  ['css/app.css', ...]", 
            "title": "OpalApplication.get_styles()"
        }, 
        {
            "location": "/reference/detail_views/", 
            "text": "opal.core.PatientDetailView\n\n\nPatientDetailViews allow us to define a custom view over either one or many episodes,\navailable from the main \nPatient Detail\n view.\n\n\nPatientDetailView inherits from the \ndiscoverable\n features\n\nDiscoverableFeature\n, \nSortableFeature\n, \nRestrictableFeature\n.\n\n\nFields\n\n\nPatientDetailView.name\n\n\nThe machine readable name for this view. Should be lower case, and have no spaces.\n\n\nPatientDetailView.title\n\n\nThe display name for this view. This is what will display in links to it.\n\n\nPatientDetailView.template\n\n\nThe template we should use to render the view when it's active.\n\n\nPatientDetailView.order\n\n\nAn integer controlling the order of PatientDetailViews in the episode switcher menu on\nthe Patient Detail screen is determined by this property. Lower numbers mean higher up.\n\n\nClassmethods\n\n\nPatientDetailView.visible_to\n\n\nOverriding this method will restrict who the view is available to. For instance, we\nwould implement a superuser only view:\n\n\n@classmethod\ndef to_user(klass, user):\n   return user.is_superuser", 
            "title": "Detail Views"
        }, 
        {
            "location": "/reference/detail_views/#opalcorepatientdetailview", 
            "text": "PatientDetailViews allow us to define a custom view over either one or many episodes,\navailable from the main  Patient Detail  view.  PatientDetailView inherits from the  discoverable  features DiscoverableFeature ,  SortableFeature ,  RestrictableFeature .", 
            "title": "opal.core.PatientDetailView"
        }, 
        {
            "location": "/reference/detail_views/#fields", 
            "text": "", 
            "title": "Fields"
        }, 
        {
            "location": "/reference/detail_views/#patientdetailviewname", 
            "text": "The machine readable name for this view. Should be lower case, and have no spaces.", 
            "title": "PatientDetailView.name"
        }, 
        {
            "location": "/reference/detail_views/#patientdetailviewtitle", 
            "text": "The display name for this view. This is what will display in links to it.", 
            "title": "PatientDetailView.title"
        }, 
        {
            "location": "/reference/detail_views/#patientdetailviewtemplate", 
            "text": "The template we should use to render the view when it's active.", 
            "title": "PatientDetailView.template"
        }, 
        {
            "location": "/reference/detail_views/#patientdetailvieworder", 
            "text": "An integer controlling the order of PatientDetailViews in the episode switcher menu on\nthe Patient Detail screen is determined by this property. Lower numbers mean higher up.", 
            "title": "PatientDetailView.order"
        }, 
        {
            "location": "/reference/detail_views/#classmethods", 
            "text": "", 
            "title": "Classmethods"
        }, 
        {
            "location": "/reference/detail_views/#patientdetailviewvisible_to", 
            "text": "Overriding this method will restrict who the view is available to. For instance, we\nwould implement a superuser only view:  @classmethod\ndef to_user(klass, user):\n   return user.is_superuser", 
            "title": "PatientDetailView.visible_to"
        }, 
        {
            "location": "/reference/episode_categories/", 
            "text": "opal.core.episodes\n\n\nEpisodeCategory\n\n\nOpal \nEpisodes\n have an associated category. These categories are\nimplemented as subclasses of \nopal.core.episodes.EpisodeCategory\n. This class is an Opal\n\nDiscoverableFeature\n and thus inherits all of the core\nDiscoverable API.\n\n\nThe category of any episode can be accessed as the \n.category\n property of any \nEpisode\n instance.\n\n\nAn episode category must be initialized with an instance of an episode.\n\n\nfrom opal.core.episodes import InpatientEpisode\n\ncategory = InpatientEpisode(episode)\n\n\n\n\n Properties \n\n\nEpisodeCategory.detail_template\n\n\nThis is the template used within the \nPatient Detail View\n\nto display information about episodes of this category.\n\n\nEpisodeCategory.stages\n\n\nA list of strings that are valid values for \nEpisode.stage\n for this category.\n\n\n Classmethods \n\n\nEpisodeCategory.episode_visible_to(episode, user)\n\n\nPredidcate function to determine whether an episode of this category is visible\nto a particular user.\n\n\nThe default implementation will return True unless \nUserProfile.restricted_only\n is set to\nTrue. (In which case this user should not see any elements which are visible 'by default' for\nthis application.)\n\n\nInpatientEpisode.episode_visible_to(episode, user)\n\n# -\n True\n\n\n\n\n Methods \n\n\nEpisodeCategory.get_stages()\n\n\nReturns a list of stages for this category as strings.\n\n\nInpatientEpisode(episode).get_stages()\n# -\n ['Inpatient', 'Followup', 'Discharged']\n\n\n\n\nEpisodeCategory.has_stage(stage)\n\n\nPredicate function to determine whether a string is a valid stage for this category.\n\n\nInpatientEpisode(episode).has_stage('Inpatient')\n# -\n True\n\n\n\n\nEpisodeCategory.set_stage(stage, user, data)\n\n\nSets the stage on the episode. It gets passed the user, and the\nrest of the data that's been used to update the episode.\n\n\nInpatientEpisode(episode).set_stage('Discharged', user, data_dict)\n# -\n True\n\n\n\n\nInpatientEpisode\n\n\nThis is the default EpisodeCategory imlpementation - applications started with Opal's\nscaffolding scripts will use this as the \nOpalApplication.default_episode_category\n.\nIt sets the detail template to \ndetail/inpatient.html", 
            "title": "Episode Categories"
        }, 
        {
            "location": "/reference/episode_categories/#opalcoreepisodes", 
            "text": "", 
            "title": "opal.core.episodes"
        }, 
        {
            "location": "/reference/episode_categories/#episodecategory", 
            "text": "Opal  Episodes  have an associated category. These categories are\nimplemented as subclasses of  opal.core.episodes.EpisodeCategory . This class is an Opal DiscoverableFeature  and thus inherits all of the core\nDiscoverable API.  The category of any episode can be accessed as the  .category  property of any  Episode  instance.  An episode category must be initialized with an instance of an episode.  from opal.core.episodes import InpatientEpisode\n\ncategory = InpatientEpisode(episode)   Properties", 
            "title": "EpisodeCategory"
        }, 
        {
            "location": "/reference/episode_categories/#episodecategorydetail_template", 
            "text": "This is the template used within the  Patient Detail View \nto display information about episodes of this category.", 
            "title": "EpisodeCategory.detail_template"
        }, 
        {
            "location": "/reference/episode_categories/#episodecategorystages", 
            "text": "A list of strings that are valid values for  Episode.stage  for this category.   Classmethods", 
            "title": "EpisodeCategory.stages"
        }, 
        {
            "location": "/reference/episode_categories/#episodecategoryepisode_visible_toepisode-user", 
            "text": "Predidcate function to determine whether an episode of this category is visible\nto a particular user.  The default implementation will return True unless  UserProfile.restricted_only  is set to\nTrue. (In which case this user should not see any elements which are visible 'by default' for\nthis application.)  InpatientEpisode.episode_visible_to(episode, user)\n\n# -  True   Methods", 
            "title": "EpisodeCategory.episode_visible_to(episode, user)"
        }, 
        {
            "location": "/reference/episode_categories/#episodecategoryget_stages", 
            "text": "Returns a list of stages for this category as strings.  InpatientEpisode(episode).get_stages()\n# -  ['Inpatient', 'Followup', 'Discharged']", 
            "title": "EpisodeCategory.get_stages()"
        }, 
        {
            "location": "/reference/episode_categories/#episodecategoryhas_stagestage", 
            "text": "Predicate function to determine whether a string is a valid stage for this category.  InpatientEpisode(episode).has_stage('Inpatient')\n# -  True", 
            "title": "EpisodeCategory.has_stage(stage)"
        }, 
        {
            "location": "/reference/episode_categories/#episodecategoryset_stagestage-user-data", 
            "text": "Sets the stage on the episode. It gets passed the user, and the\nrest of the data that's been used to update the episode.  InpatientEpisode(episode).set_stage('Discharged', user, data_dict)\n# -  True", 
            "title": "EpisodeCategory.set_stage(stage, user, data)"
        }, 
        {
            "location": "/reference/episode_categories/#inpatientepisode", 
            "text": "This is the default EpisodeCategory imlpementation - applications started with Opal's\nscaffolding scripts will use this as the  OpalApplication.default_episode_category .\nIt sets the detail template to  detail/inpatient.html", 
            "title": "InpatientEpisode"
        }, 
        {
            "location": "/reference/schemas/", 
            "text": "Opal Schemas\n\n\nOpal schemas provide a JSON representation of the structure of subrecords. Opal uses these schemas internally to construct the \nItem\n classes in AngularJS on the client side.\n\n\nThe Schema for an Opal application is available at the url \n/api/v0.1/record/\n and contains the serialized representation of all subrecords and their fields.\n\n\nSubrecord information\n\n\nIndividual subrecords are serialized to the schema using the function \nopal.core.schemas.serialize_model\n.\n\n\nSchema Subrecord fields\n\n\n\n\nname: the result of \nSubrecord.get_api_name()\n\n\ndisplay_name: the result of \nSubrecord.get_display_name()\n\n\nsingle: Whether the Subrecord is a singleton\n\n\nadvanced_searchable: if the Subrecord should appear in the advanced search view\n\n\nfields: a represention of each field\n\n\n\n\nOptional fields:\n\n\n\n\nsort: an Angular string that describes how subrecord of this type should be ordered\n\n\nreadOnly: if this Subrecord is read only\n\n\nform_url: the url of the form of this Subrecord\n\n\nicon: the icon class of this Subrecord if it exists\n\n\nangular_service: an Angular service used to initialize the \nItem\n in the Opal client side application.\n\n\n\n\n\n  class Colour(models.EpisodeSubrecord):\n      _advanced_searchable = False\n      _exclude_from_extract = True\n      _angular_service = 'Colour'\n      _icon = \nfa fa-comments\n\n      name = dmodels.CharField(max_length=200)\n\n# becomes:...\n  {\n    'advanced_searchable': False,\n    'angular_service': 'Colour',\n    'display_name': 'Colour',\n    'fields': [\n      # field information as noted below\n    ],\n    'form_url': u'/templates/forms/colour.html',\n    'icon': 'fa fa-comments',\n    'name': 'colour',\n    'single': False\n   }\n\n\n\n\n\nSubrecord Field information\n\n\nOpal makes the most out of the rich Django model interface by delivering much of the derivable metadata about the structure of fields straight from the model.\n\n\n\n\ndefault: the default value for the field to appear in the form. At present this will accept a callable but won't serialise date/datetime fields.\n\n\nmodel: The name of the model this field relates to.\n\n\nlookup_list: For ForeignKeyOrFreeText fields this returns name of the lookup list that relates to this field.\n\n\ntitle: The verbose_name of this field,\n\n\ntype: The type of field. Allows us to correctly cast fields into moments on the front end.\n\n\nname: the api name for the field\n\n\n\n\nclass Birthday(models.PatientSubrecord):\n    party = dmodels.DateTimeField(verbose_name=\nParty Time!\n blank=True)\n    name = dmodels.CharField(default='Dave', blank=True, null=True)\n\n    # becomes...\n    [\n      {\n        'default': \nDave\n,\n        'lookup_list': None,\n        'model': 'Birthday',\n        'name': 'name',\n        'title': u'Name',\n        'type': 'string'\n      },\n     {\n        'default': None,\n        'lookup_list': None,\n        'model': 'Birthday',\n        'name': 'party',\n        'title': u'Party Time!',\n        'type': 'date_time'\n      }\n    ]", 
            "title": "Schemas"
        }, 
        {
            "location": "/reference/schemas/#opal-schemas", 
            "text": "Opal schemas provide a JSON representation of the structure of subrecords. Opal uses these schemas internally to construct the  Item  classes in AngularJS on the client side.  The Schema for an Opal application is available at the url  /api/v0.1/record/  and contains the serialized representation of all subrecords and their fields.", 
            "title": "Opal Schemas"
        }, 
        {
            "location": "/reference/schemas/#subrecord-information", 
            "text": "Individual subrecords are serialized to the schema using the function  opal.core.schemas.serialize_model .", 
            "title": "Subrecord information"
        }, 
        {
            "location": "/reference/schemas/#schema-subrecord-fields", 
            "text": "name: the result of  Subrecord.get_api_name()  display_name: the result of  Subrecord.get_display_name()  single: Whether the Subrecord is a singleton  advanced_searchable: if the Subrecord should appear in the advanced search view  fields: a represention of each field   Optional fields:   sort: an Angular string that describes how subrecord of this type should be ordered  readOnly: if this Subrecord is read only  form_url: the url of the form of this Subrecord  icon: the icon class of this Subrecord if it exists  angular_service: an Angular service used to initialize the  Item  in the Opal client side application.   \n  class Colour(models.EpisodeSubrecord):\n      _advanced_searchable = False\n      _exclude_from_extract = True\n      _angular_service = 'Colour'\n      _icon =  fa fa-comments \n      name = dmodels.CharField(max_length=200)\n\n# becomes:...\n  {\n    'advanced_searchable': False,\n    'angular_service': 'Colour',\n    'display_name': 'Colour',\n    'fields': [\n      # field information as noted below\n    ],\n    'form_url': u'/templates/forms/colour.html',\n    'icon': 'fa fa-comments',\n    'name': 'colour',\n    'single': False\n   }", 
            "title": "Schema Subrecord fields"
        }, 
        {
            "location": "/reference/schemas/#subrecord-field-information", 
            "text": "Opal makes the most out of the rich Django model interface by delivering much of the derivable metadata about the structure of fields straight from the model.   default: the default value for the field to appear in the form. At present this will accept a callable but won't serialise date/datetime fields.  model: The name of the model this field relates to.  lookup_list: For ForeignKeyOrFreeText fields this returns name of the lookup list that relates to this field.  title: The verbose_name of this field,  type: The type of field. Allows us to correctly cast fields into moments on the front end.  name: the api name for the field   class Birthday(models.PatientSubrecord):\n    party = dmodels.DateTimeField(verbose_name= Party Time!  blank=True)\n    name = dmodels.CharField(default='Dave', blank=True, null=True)\n\n    # becomes...\n    [\n      {\n        'default':  Dave ,\n        'lookup_list': None,\n        'model': 'Birthday',\n        'name': 'name',\n        'title': u'Name',\n        'type': 'string'\n      },\n     {\n        'default': None,\n        'lookup_list': None,\n        'model': 'Birthday',\n        'name': 'party',\n        'title': u'Party Time!',\n        'type': 'date_time'\n      }\n    ]", 
            "title": "Subrecord Field information"
        }, 
        {
            "location": "/reference/patient_list/", 
            "text": "opal.core.patient_lists\n\n\nThe \npatient_lists\n module defines a number of classes for working with lists of patients.\n\n\nclass opal.core.patient_lists.PatientList\n\n\nPatientList.allow_add_patient\n\n\nWhether we should show the add patient button. Defaults to \nTrue\n.\n\n\nPatientList.allow_edit_teams\n\n\nWhether we should allow the user to edit teams. Defaults to \nTrue\n.\n\n\nPatientList.comparator_service\n\n\nA custom comparator service to set sort order within a list. Defaults to None.\nFurther information on Comparators can be found in the \nOpal Guides\n section.\n\n\nPatientList.direct_add\n\n\nFurther information is available in the \nGuides section\n.\n\n\nPatientList.display_name\n\n\nHow we want to refer to this list on screen to users.\n\n\nPatientList.order\n\n\nPassing an integer to \nPatientList.order\n will allow you to control the order of display of Patient Lists in dropdowns and other views. Further information is available in the \nGuides section\n.\n\n\nPatientList.queryset\n\n\nFurther information is available in the \nGuides section\n.\n\n\nPatientList.schema\n\n\nFurther information is available in the \nGuides section\n.\n\n\nPatientList.slug\n\n\nFurther information is available in the \nGuides section\n.\n\n\nPatientList.template_name\n\n\nIf you want to over-ride the default Patient List template \nopal/templates/patient_list/spreadsheet.html\n with a custom template, or set the Card or Table PatientList templates, you can specify the path of the custom template (relative to \n/myapp/templates/\n) in this property.\n\n\n# myapp/patient_lists.py\n\nclass MyPatientList(PatientList):\n    template_name = 'my_layout.html'\n\n\n\n\nWill look for a template at \n/myapp/templates/my_layout.html\n.\n\n\nPatientList.visible_to\n\n\nFurther information is available in the \nGuides section\n.\n\n\nclass TaggedPatientList\n\n\nTagged Patient Lists inherit from Patient Lists - as such they have all of the same methods and properties of Patient Lists.\n\n\nProperties\n\n\nTaggedPatientList.tag\n\n\nThe main, or parent tag for this list. Should be lowercase, with no numbers or dashes. Underscores are OK. Further information is available in the \nGuides section\n.\n\n\nTaggedPatientList.subtag\n\n\nThe child tag for this list. Should be lowercase, with no numbers or dashes. Underscores are OK.\n\n\nclass TabbedPatientListGroup\n\n\nGroups Patient Lists together, to display as tabs at the top of any list in the group.\n\n.\n\n\nTabbedPatientListGroup.for_list\n\n\nReturns the group for a given PatientList. Raises ValueError if not passed a PatientList.\n\n\nTabbedPatientListGroup.get_member_lists\n\n\nA hook for dynamically customising the members of this list group. Returns an iterable of PatientLists. Defaults to the \n.member_lists\n property.\n\n\nTabbedPatientListGroup.get_member_lists_for_user\n\n\nReturns an iterable of the visible member lists for a given user.\n\n\nTabbedPatientListGroup.member_lists\n\n\nA list containing the \nPatientList\n subclasses in this group.\n\n\nTabbedPatientListGroup.visible_to\n\n\nPredicate function to determine whether this list is meaningfully visible to this user.\n\n\nBuilt-in PatientList Templates\n\n\n'Spreadsheet' PatientList Template\n\n\nThis is the default template, which gives you a 'spreadsheet'-like view of the patient list, with the standard Opal sidebar, containing the default demographic info, tags and action tools.\n\n\n\n\n'Card' PatientList Template\n\n\nThis will display the patient list as a series of 'cards', more analogous to a Twitter stream than the spreadsheet-like appearance of the default list.\n\n\n\n\nTo use this layout, change your PatientList \ntemplate_name\n to \"patient_lists/layouts/card_list.html\".\n\n\n'Table' PatientList Template\n\n\nThis will display the patient list as a wide 'table', similar to the spreadsheet-like appearance of the default list, but without the sidebar.\n\n\n\n\nTo use, just change your PatientList \ntemplate_name\n to \"patient_lists/layouts/table_list.html\".", 
            "title": "Patient Lists"
        }, 
        {
            "location": "/reference/patient_list/#opalcorepatient_lists", 
            "text": "The  patient_lists  module defines a number of classes for working with lists of patients.", 
            "title": "opal.core.patient_lists"
        }, 
        {
            "location": "/reference/patient_list/#class-opalcorepatient_listspatientlist", 
            "text": "", 
            "title": "class opal.core.patient_lists.PatientList"
        }, 
        {
            "location": "/reference/patient_list/#patientlistallow_add_patient", 
            "text": "Whether we should show the add patient button. Defaults to  True .", 
            "title": "PatientList.allow_add_patient"
        }, 
        {
            "location": "/reference/patient_list/#patientlistallow_edit_teams", 
            "text": "Whether we should allow the user to edit teams. Defaults to  True .", 
            "title": "PatientList.allow_edit_teams"
        }, 
        {
            "location": "/reference/patient_list/#patientlistcomparator_service", 
            "text": "A custom comparator service to set sort order within a list. Defaults to None.\nFurther information on Comparators can be found in the  Opal Guides  section.", 
            "title": "PatientList.comparator_service"
        }, 
        {
            "location": "/reference/patient_list/#patientlistdirect_add", 
            "text": "Further information is available in the  Guides section .", 
            "title": "PatientList.direct_add"
        }, 
        {
            "location": "/reference/patient_list/#patientlistdisplay_name", 
            "text": "How we want to refer to this list on screen to users.", 
            "title": "PatientList.display_name"
        }, 
        {
            "location": "/reference/patient_list/#patientlistorder", 
            "text": "Passing an integer to  PatientList.order  will allow you to control the order of display of Patient Lists in dropdowns and other views. Further information is available in the  Guides section .", 
            "title": "PatientList.order"
        }, 
        {
            "location": "/reference/patient_list/#patientlistqueryset", 
            "text": "Further information is available in the  Guides section .", 
            "title": "PatientList.queryset"
        }, 
        {
            "location": "/reference/patient_list/#patientlistschema", 
            "text": "Further information is available in the  Guides section .", 
            "title": "PatientList.schema"
        }, 
        {
            "location": "/reference/patient_list/#patientlistslug", 
            "text": "Further information is available in the  Guides section .", 
            "title": "PatientList.slug"
        }, 
        {
            "location": "/reference/patient_list/#patientlisttemplate_name", 
            "text": "If you want to over-ride the default Patient List template  opal/templates/patient_list/spreadsheet.html  with a custom template, or set the Card or Table PatientList templates, you can specify the path of the custom template (relative to  /myapp/templates/ ) in this property.  # myapp/patient_lists.py\n\nclass MyPatientList(PatientList):\n    template_name = 'my_layout.html'  Will look for a template at  /myapp/templates/my_layout.html .", 
            "title": "PatientList.template_name"
        }, 
        {
            "location": "/reference/patient_list/#patientlistvisible_to", 
            "text": "Further information is available in the  Guides section .", 
            "title": "PatientList.visible_to"
        }, 
        {
            "location": "/reference/patient_list/#class-taggedpatientlist", 
            "text": "Tagged Patient Lists inherit from Patient Lists - as such they have all of the same methods and properties of Patient Lists.", 
            "title": "class TaggedPatientList"
        }, 
        {
            "location": "/reference/patient_list/#properties", 
            "text": "", 
            "title": "Properties"
        }, 
        {
            "location": "/reference/patient_list/#taggedpatientlisttag", 
            "text": "The main, or parent tag for this list. Should be lowercase, with no numbers or dashes. Underscores are OK. Further information is available in the  Guides section .", 
            "title": "TaggedPatientList.tag"
        }, 
        {
            "location": "/reference/patient_list/#taggedpatientlistsubtag", 
            "text": "The child tag for this list. Should be lowercase, with no numbers or dashes. Underscores are OK.", 
            "title": "TaggedPatientList.subtag"
        }, 
        {
            "location": "/reference/patient_list/#class-tabbedpatientlistgroup", 
            "text": "Groups Patient Lists together, to display as tabs at the top of any list in the group. .", 
            "title": "class TabbedPatientListGroup"
        }, 
        {
            "location": "/reference/patient_list/#tabbedpatientlistgroupfor_list", 
            "text": "Returns the group for a given PatientList. Raises ValueError if not passed a PatientList.", 
            "title": "TabbedPatientListGroup.for_list"
        }, 
        {
            "location": "/reference/patient_list/#tabbedpatientlistgroupget_member_lists", 
            "text": "A hook for dynamically customising the members of this list group. Returns an iterable of PatientLists. Defaults to the  .member_lists  property.", 
            "title": "TabbedPatientListGroup.get_member_lists"
        }, 
        {
            "location": "/reference/patient_list/#tabbedpatientlistgroupget_member_lists_for_user", 
            "text": "Returns an iterable of the visible member lists for a given user.", 
            "title": "TabbedPatientListGroup.get_member_lists_for_user"
        }, 
        {
            "location": "/reference/patient_list/#tabbedpatientlistgroupmember_lists", 
            "text": "A list containing the  PatientList  subclasses in this group.", 
            "title": "TabbedPatientListGroup.member_lists"
        }, 
        {
            "location": "/reference/patient_list/#tabbedpatientlistgroupvisible_to", 
            "text": "Predicate function to determine whether this list is meaningfully visible to this user.", 
            "title": "TabbedPatientListGroup.visible_to"
        }, 
        {
            "location": "/reference/patient_list/#built-in-patientlist-templates", 
            "text": "", 
            "title": "Built-in PatientList Templates"
        }, 
        {
            "location": "/reference/patient_list/#spreadsheet-patientlist-template", 
            "text": "This is the default template, which gives you a 'spreadsheet'-like view of the patient list, with the standard Opal sidebar, containing the default demographic info, tags and action tools.", 
            "title": "'Spreadsheet' PatientList Template"
        }, 
        {
            "location": "/reference/patient_list/#card-patientlist-template", 
            "text": "This will display the patient list as a series of 'cards', more analogous to a Twitter stream than the spreadsheet-like appearance of the default list.   To use this layout, change your PatientList  template_name  to \"patient_lists/layouts/card_list.html\".", 
            "title": "'Card' PatientList Template"
        }, 
        {
            "location": "/reference/patient_list/#table-patientlist-template", 
            "text": "This will display the patient list as a wide 'table', similar to the spreadsheet-like appearance of the default list, but without the sidebar.   To use, just change your PatientList  template_name  to \"patient_lists/layouts/table_list.html\".", 
            "title": "'Table' PatientList Template"
        }, 
        {
            "location": "/reference/plugin/", 
            "text": "Plugins\n\n\nOpal provides a \nplugin mechanism\n to help developers write\ngeneric reusable components.\n\n\nPlugins must inherit from \nopal.core.plugins.OpalPlugin\n.\n\n\nOpalPlugin\n\n\nOpalPlugin\n is a \ndiscoverable\n feature - it will be\nautomatically discovered by Opal if placed in a \nplugin.py\n file within an\ninstalled Django app.\n\n\nAttributes\n\n\n\n\nOpalPlugin.urls\n\n\nA Django urlpatterns object to add to our urls. Default is [].\n\n\n\n\nOpalPlugin.javascripts\n\n\nA python dictionary containing namespaced sets of javascript files to include in our\napplication. These will be included on every page by default.\n\n\nclass MyPlugin(OpalPlugin):\n    javascripts = {\n        'opal.services': [\n            'js/myplugin/awesome_service.js'\n        ]\n    }\n\n\n\n\n\n\nOpalPlugin.apis\n\n\nA python iterable of APIs to add to the Django Rest Framework APIs available.\n\n\nclass MyPlugin(OpalPlugin):\n    apis = [\n        ('ping', api.PingViewSet)\n    ]\n\n\n\n\n\n\nOpalPlugin.stylesheets\n\n\nA python iterable of stylesheets to add to our application. These will be included on every\npage by default.\n\n\nclass MyPlugin(OpalPlugin):\n    stylesheets =\n        'css/myawesomestyles.css'\n    ]\n\n\n\n\n\n\nOpalPlugin.menuitems\n\n\nA python iterable of items to add to the main menu of our application.\n\n\n\n\nOpalPlugin.actions\n\n\nA Python iterable of templates to include as actions - e.g. additional buttons to add to the\ncontext of a detail, list or other view. These are visible everywhere by default, so care should\nbe taken to ensure appropriate show/hide logic is present.\n\n\n\n\nClassmethods\n\n\nOpalPlugin.get_urls()\n\n\nReturns the Django url patterns to be registered. Defaults to simply returning the \nurls\n\nattribute.\n\n\n\n\nOpalPlugin.get_apis()\n\n\nReturns the APIs to be registered with the Django Rest Framework APIs. Defaults to simply\nreturning the \napis\n attribute.\n\n\n\n\nOpalPlugin.directory()\n\n\nReturns the path to the directory containing the file in which this plugin is defined.\n\n\nOpalPlugin.get_javascripts()\n\n\nReturn a dictionary of namespaced javascript files as paths to them ready for staticfiles.\nDefaults to returning the \nOpalPlugin.javascripts\n property.\n\n\nplugin.get_javascripts()\n# -\n {'opal.test': ['js/test/notreal.js']}\n\n\n\n\nOpalPlugin.get_styles()\n\n\nReturn a list of the plugin's stylesheets as paths to them ready for staticfiles.\nDefaults to returning the contents of \nOpalPlugin.styles\n.\n\n\nplugin.get_styles()\n# -\n ['css/app.css', ...]\n\n\n\n\nOpalPlugin.angular_module_deps\n\n\nWhen you initialise an angular application you need to register dependencies\nThis allows you to add to the dependencies of the default opal application", 
            "title": "OpalPlugin"
        }, 
        {
            "location": "/reference/plugin/#plugins", 
            "text": "Opal provides a  plugin mechanism  to help developers write\ngeneric reusable components.  Plugins must inherit from  opal.core.plugins.OpalPlugin .", 
            "title": "Plugins"
        }, 
        {
            "location": "/reference/plugin/#opalplugin", 
            "text": "OpalPlugin  is a  discoverable  feature - it will be\nautomatically discovered by Opal if placed in a  plugin.py  file within an\ninstalled Django app.", 
            "title": "OpalPlugin"
        }, 
        {
            "location": "/reference/plugin/#attributes", 
            "text": "", 
            "title": "Attributes"
        }, 
        {
            "location": "/reference/plugin/#opalpluginurls", 
            "text": "A Django urlpatterns object to add to our urls. Default is [].", 
            "title": "OpalPlugin.urls"
        }, 
        {
            "location": "/reference/plugin/#opalpluginjavascripts", 
            "text": "A python dictionary containing namespaced sets of javascript files to include in our\napplication. These will be included on every page by default.  class MyPlugin(OpalPlugin):\n    javascripts = {\n        'opal.services': [\n            'js/myplugin/awesome_service.js'\n        ]\n    }", 
            "title": "OpalPlugin.javascripts"
        }, 
        {
            "location": "/reference/plugin/#opalpluginapis", 
            "text": "A python iterable of APIs to add to the Django Rest Framework APIs available.  class MyPlugin(OpalPlugin):\n    apis = [\n        ('ping', api.PingViewSet)\n    ]", 
            "title": "OpalPlugin.apis"
        }, 
        {
            "location": "/reference/plugin/#opalpluginstylesheets", 
            "text": "A python iterable of stylesheets to add to our application. These will be included on every\npage by default.  class MyPlugin(OpalPlugin):\n    stylesheets =\n        'css/myawesomestyles.css'\n    ]", 
            "title": "OpalPlugin.stylesheets"
        }, 
        {
            "location": "/reference/plugin/#opalpluginmenuitems", 
            "text": "A python iterable of items to add to the main menu of our application.", 
            "title": "OpalPlugin.menuitems"
        }, 
        {
            "location": "/reference/plugin/#opalpluginactions", 
            "text": "A Python iterable of templates to include as actions - e.g. additional buttons to add to the\ncontext of a detail, list or other view. These are visible everywhere by default, so care should\nbe taken to ensure appropriate show/hide logic is present.", 
            "title": "OpalPlugin.actions"
        }, 
        {
            "location": "/reference/plugin/#classmethods", 
            "text": "", 
            "title": "Classmethods"
        }, 
        {
            "location": "/reference/plugin/#opalpluginget_urls", 
            "text": "Returns the Django url patterns to be registered. Defaults to simply returning the  urls \nattribute.", 
            "title": "OpalPlugin.get_urls()"
        }, 
        {
            "location": "/reference/plugin/#opalpluginget_apis", 
            "text": "Returns the APIs to be registered with the Django Rest Framework APIs. Defaults to simply\nreturning the  apis  attribute.", 
            "title": "OpalPlugin.get_apis()"
        }, 
        {
            "location": "/reference/plugin/#opalplugindirectory", 
            "text": "Returns the path to the directory containing the file in which this plugin is defined.", 
            "title": "OpalPlugin.directory()"
        }, 
        {
            "location": "/reference/plugin/#opalpluginget_javascripts", 
            "text": "Return a dictionary of namespaced javascript files as paths to them ready for staticfiles.\nDefaults to returning the  OpalPlugin.javascripts  property.  plugin.get_javascripts()\n# -  {'opal.test': ['js/test/notreal.js']}", 
            "title": "OpalPlugin.get_javascripts()"
        }, 
        {
            "location": "/reference/plugin/#opalpluginget_styles", 
            "text": "Return a list of the plugin's stylesheets as paths to them ready for staticfiles.\nDefaults to returning the contents of  OpalPlugin.styles .  plugin.get_styles()\n# -  ['css/app.css', ...]", 
            "title": "OpalPlugin.get_styles()"
        }, 
        {
            "location": "/reference/plugin/#opalpluginangular_module_deps", 
            "text": "When you initialise an angular application you need to register dependencies\nThis allows you to add to the dependencies of the default opal application", 
            "title": "OpalPlugin.angular_module_deps"
        }, 
        {
            "location": "/reference/core_views/", 
            "text": "opal.core.views\n\n\nOpal provides a number of helper functions and classes for working with Django views.\n\n\nopal.core.views.LoginRequiredMixin\n\n\nA Mixin class that can be used with a view to ensure that we require users to be\nlogged in in order to access the view.\n\n\nclass MyView(LoginRequiredMixin, View):\n    pass\n\n\n\n\nopal.core.views.json_response\n\n\nReturns a Django HTTPResponse instance with the data argument serialized using the\ncorrect serialization class.\n\n\njson_response(data, status_code=200):", 
            "title": "Core.Views"
        }, 
        {
            "location": "/reference/core_views/#opalcoreviews", 
            "text": "Opal provides a number of helper functions and classes for working with Django views.", 
            "title": "opal.core.views"
        }, 
        {
            "location": "/reference/core_views/#opalcoreviewsloginrequiredmixin", 
            "text": "A Mixin class that can be used with a view to ensure that we require users to be\nlogged in in order to access the view.  class MyView(LoginRequiredMixin, View):\n    pass", 
            "title": "opal.core.views.LoginRequiredMixin"
        }, 
        {
            "location": "/reference/core_views/#opalcoreviewsjson_response", 
            "text": "Returns a Django HTTPResponse instance with the data argument serialized using the\ncorrect serialization class.  json_response(data, status_code=200):", 
            "title": "opal.core.views.json_response"
        }, 
        {
            "location": "/reference/core_menus/", 
            "text": "opal.core.menus\n\n\nOpal provides classes and methods to define application menus programatically.\n\n\nopal.core.MenuItem\n\n\nAn item in an application menu.\n\n\nArguments\n\n\n\n\ntemplate_name - a template to use to render this menu item\n\n\nactivepattern - if the current path includes this, add the \nactive\n class\n\n\nhref - the path to use as the link for this menu item\n\n\nicon - an icon name to be used\n\n\ndisplay - the text to display in this menu item\n\n\nindex - a number to use as the primary sort order for your menu items\n\n\n\n\nopal.core.Menu\n\n\nThe menu for an Opal application. On initialization it will construct a menu\nfor the current user, pulling items from the current app, and any plugins.", 
            "title": "Menus"
        }, 
        {
            "location": "/reference/core_menus/#opalcoremenus", 
            "text": "Opal provides classes and methods to define application menus programatically.", 
            "title": "opal.core.menus"
        }, 
        {
            "location": "/reference/core_menus/#opalcoremenuitem", 
            "text": "An item in an application menu.  Arguments   template_name - a template to use to render this menu item  activepattern - if the current path includes this, add the  active  class  href - the path to use as the link for this menu item  icon - an icon name to be used  display - the text to display in this menu item  index - a number to use as the primary sort order for your menu items", 
            "title": "opal.core.MenuItem"
        }, 
        {
            "location": "/reference/core_menus/#opalcoremenu", 
            "text": "The menu for an Opal application. On initialization it will construct a menu\nfor the current user, pulling items from the current app, and any plugins.", 
            "title": "opal.core.Menu"
        }, 
        {
            "location": "/reference/loggers/", 
            "text": "opal.core.log.ConfidentialEmailer\n\n\nA confidential emailer that does not send the stack trace but provides the\nfile name and error line that the issue happened. Along with the host name and\nuser who had the issue.", 
            "title": "Log"
        }, 
        {
            "location": "/reference/loggers/#opalcorelogconfidentialemailer", 
            "text": "A confidential emailer that does not send the stack trace but provides the\nfile name and error line that the issue happened. Along with the host name and\nuser who had the issue.", 
            "title": "opal.core.log.ConfidentialEmailer"
        }, 
        {
            "location": "/reference/core_fields/", 
            "text": "opal.core.fields\n\n\nThe \nopal.core.fields\n module contains helper functions for working\nwith fields, as well as custom Opal field definitions.\n\n\nis_numeric\n\n\nA helper function that returns true if a field is numeric. For our\npurposes, Integers, Decimals, BigIntegers, Floats and Positive Integers\nare considered numeric.\n\n\nis_numeric(models.IntegerField())\n# -\n True\n\n\n\n\nenum\n\n\nA helper function that returns a Django choices definition from star args.\n\n\nenum('one', '2', 'III')\n# -\n (\n#     ('one', 'one'),\n#     ('2', '2'),\n#     ('III', 'III')\n#    )\n\n\n\n\nForeignKeyOrFreeText\n\n\nA field that stores it's value as a generic foreign key to an Opal LookupList\nor as the value in a CharField.", 
            "title": "Fields"
        }, 
        {
            "location": "/reference/core_fields/#opalcorefields", 
            "text": "The  opal.core.fields  module contains helper functions for working\nwith fields, as well as custom Opal field definitions.", 
            "title": "opal.core.fields"
        }, 
        {
            "location": "/reference/core_fields/#is_numeric", 
            "text": "A helper function that returns true if a field is numeric. For our\npurposes, Integers, Decimals, BigIntegers, Floats and Positive Integers\nare considered numeric.  is_numeric(models.IntegerField())\n# -  True", 
            "title": "is_numeric"
        }, 
        {
            "location": "/reference/core_fields/#enum", 
            "text": "A helper function that returns a Django choices definition from star args.  enum('one', '2', 'III')\n# -  (\n#     ('one', 'one'),\n#     ('2', '2'),\n#     ('III', 'III')\n#    )", 
            "title": "enum"
        }, 
        {
            "location": "/reference/core_fields/#foreignkeyorfreetext", 
            "text": "A field that stores it's value as a generic foreign key to an Opal LookupList\nor as the value in a CharField.", 
            "title": "ForeignKeyOrFreeText"
        }, 
        {
            "location": "/reference/core_lookuplists/", 
            "text": "opal.core.lookuplists\n\n\nThe \nopal.core.lookuplists\n module contains utility functions for working with\nlookuplists.\n\n\nlookuplists()\n\n\nA generator that will yield every lookuplist currently available to the\napplication.\n\n\nfrom opal.core import lookuplists\n\nfor l in lookuplists.lookuplists():\n  print l\n\n# -\n Drug, Gender, Condition et cetera", 
            "title": "Lookuplists"
        }, 
        {
            "location": "/reference/core_lookuplists/#opalcorelookuplists", 
            "text": "The  opal.core.lookuplists  module contains utility functions for working with\nlookuplists.", 
            "title": "opal.core.lookuplists"
        }, 
        {
            "location": "/reference/core_lookuplists/#lookuplists", 
            "text": "A generator that will yield every lookuplist currently available to the\napplication.  from opal.core import lookuplists\n\nfor l in lookuplists.lookuplists():\n  print l\n\n# -  Drug, Gender, Condition et cetera", 
            "title": "lookuplists()"
        }, 
        {
            "location": "/reference/core_discoverable/", 
            "text": "opal.core.discoverable\n\n\nThe \nopal.core.discoverable\n module contans base discoverable classes for creating\nfeatures which can be re-used and subcalssd.\n\n\nDiscoverableFeature\n\n\nThe base discoverable class which provides functionality to all discoverables.\n\n\nDiscoverableFeature properties\n\n\nDiscoverableFeature.module_name\n\n\nThe name of the python module in which Opal will look for instances of this\ndiscoverable. For instance in the following feature, Opal would look in every\ninstalled app at \napp/ciao.py\n for subclasses of \nGreeting\n, even if that module\nhad not been directly imported already.\n\n\nfrom opal.core import discoverable\n\nclass Greeting(discoverable.DiscoverableFeature):\n  module_name = 'ciao'\n\n\n\n\nDiscoverableFeature.display_name\n\n\nThe human readable name for an instance of a discoverable. Use this in the UI\nwhen showing the discoverable to users.\n\n\nDiscoverableFeature.slug\n\n\nThe slug for this discoverable used in URLs. Note that Opal internally useses\nthe \nget_slug\n method below to allow more dynamic slugs.\n\n\n DiscoverableFeature classmethods \n\n\nDiscoverableFeature.is_valid()\n\n\nStub function that is called at class definition to determine whether an instance\nis valid. Useful for enforcing business logic and expectations for third party\nfeatures. Expected to raise an exception if something is wrong.\n\n\nDiscoverableFeature.get_slug()\n\n\nReturn the slug for this feature. Defaults to returning the \nslug\n property if\nit is set, or running a slugify function on the \ndisplay_name\n. If neither is\nset it will raise a ValueError.\n\n\nMyFeature.get_slug()\n# -\n \nmy-feature\n\n\n\n\n\nDiscoverableFeature.list()\n\n\nReturn a generator that yields all implementations of a discoverable.\n\n\nfor g in Greeting.list():\n    print g.display_name\n\n\nBonjour\n\n\nHola\n\n\nNamaste\n\n\nSalaam\n\n\n\n\n\nDiscoverableFeature.filter(**kwargs)\n\n\nFind instances of a feature based on the value of their attributes. You may pass\nattributes of features as keyword arguments. Returns a list of matching features.\n\n\nGreeting.filter(module_name='ciao') # Essentially the same as .list()\n\nGreeting.filter(slug=\nbonjour\n, display_name=\nBonjour\n)\n# -\n [BonjourGreeting]\n\n\n\n\nSortableFeature\n\n\nA mixin class that provides ordering for features which will be respected\nby both \nlist()\n and \nfilter()\n.\n\n\n Properties \n\n\nSortableFeature.order\n\n\nAn integer which is used to sort features.\n\n\n SortableFeature classmethods \n\n\nSortableFeature.list()\n\n\nReturns instances of the feature orderd by \n.order\n\n\nclass Greeting(discoverable.DiscoverableFeature,\n               discoverable.SortableFeature):\n    module_name='ciao'\n\nclass Namaste(Greeting):\n    order = 2\n\nclass Hello(Greeting):\n    order = 32098239021\n\nclass Bonjour(Greeting):\n    order = 1\n\nfor f in Greeting.list():\n    print f, f.order\n\n# \nclass '*.*.Bonjour'\n, 1\n# \nclass '*.*.Namaste'\n, 2\n# \nclass '*.*.Hello'\n, 3\n\n\n\n\n\nRestrictableFeature\n\n\nA mixin class that provides an interface for restricting access to features based on\nuser.\n\n\nclass Greeting(discoverable.DiscoverableFeature,\n               discoverable.RestrictableFeature):\n    module_name='ciao'\n\n\n\n\n\n RestrictableFeature classmethods \n\n\nRestrictableFeature.for_user(user)\n\n\nGenerator method that yields all instances of this discoverable which are visible to\na given user.\n\n\nfor f in Greeting.for_user(user):\n    print f\n\n# \nclass '*.*.Bonjour'\n\n# \nclass '*.*.Namaste'\n\n# \nclass '*.*.Hello'\n\n\n\n\n\nRestrictableFeature.visible_to(user)\n\n\nPredicate function used to determine whehter in individual feature should be visible\nto a given user. Defaults to simply returning True.\n\n\nFeatures may override this to provide restricted access as required.\n\n\nHello.visible_to(user) # -\n True", 
            "title": "Discoverable"
        }, 
        {
            "location": "/reference/core_discoverable/#opalcorediscoverable", 
            "text": "The  opal.core.discoverable  module contans base discoverable classes for creating\nfeatures which can be re-used and subcalssd.", 
            "title": "opal.core.discoverable"
        }, 
        {
            "location": "/reference/core_discoverable/#discoverablefeature", 
            "text": "The base discoverable class which provides functionality to all discoverables.  DiscoverableFeature properties", 
            "title": "DiscoverableFeature"
        }, 
        {
            "location": "/reference/core_discoverable/#discoverablefeaturemodule_name", 
            "text": "The name of the python module in which Opal will look for instances of this\ndiscoverable. For instance in the following feature, Opal would look in every\ninstalled app at  app/ciao.py  for subclasses of  Greeting , even if that module\nhad not been directly imported already.  from opal.core import discoverable\n\nclass Greeting(discoverable.DiscoverableFeature):\n  module_name = 'ciao'", 
            "title": "DiscoverableFeature.module_name"
        }, 
        {
            "location": "/reference/core_discoverable/#discoverablefeaturedisplay_name", 
            "text": "The human readable name for an instance of a discoverable. Use this in the UI\nwhen showing the discoverable to users.", 
            "title": "DiscoverableFeature.display_name"
        }, 
        {
            "location": "/reference/core_discoverable/#discoverablefeatureslug", 
            "text": "The slug for this discoverable used in URLs. Note that Opal internally useses\nthe  get_slug  method below to allow more dynamic slugs.   DiscoverableFeature classmethods", 
            "title": "DiscoverableFeature.slug"
        }, 
        {
            "location": "/reference/core_discoverable/#discoverablefeatureis_valid", 
            "text": "Stub function that is called at class definition to determine whether an instance\nis valid. Useful for enforcing business logic and expectations for third party\nfeatures. Expected to raise an exception if something is wrong.", 
            "title": "DiscoverableFeature.is_valid()"
        }, 
        {
            "location": "/reference/core_discoverable/#discoverablefeatureget_slug", 
            "text": "Return the slug for this feature. Defaults to returning the  slug  property if\nit is set, or running a slugify function on the  display_name . If neither is\nset it will raise a ValueError.  MyFeature.get_slug()\n# -   my-feature", 
            "title": "DiscoverableFeature.get_slug()"
        }, 
        {
            "location": "/reference/core_discoverable/#discoverablefeaturelist", 
            "text": "Return a generator that yields all implementations of a discoverable.  for g in Greeting.list():\n    print g.display_name Bonjour  Hola  Namaste  Salaam", 
            "title": "DiscoverableFeature.list()"
        }, 
        {
            "location": "/reference/core_discoverable/#discoverablefeaturefilterkwargs", 
            "text": "Find instances of a feature based on the value of their attributes. You may pass\nattributes of features as keyword arguments. Returns a list of matching features.  Greeting.filter(module_name='ciao') # Essentially the same as .list()\n\nGreeting.filter(slug= bonjour , display_name= Bonjour )\n# -  [BonjourGreeting]", 
            "title": "DiscoverableFeature.filter(**kwargs)"
        }, 
        {
            "location": "/reference/core_discoverable/#sortablefeature", 
            "text": "A mixin class that provides ordering for features which will be respected\nby both  list()  and  filter() .   Properties", 
            "title": "SortableFeature"
        }, 
        {
            "location": "/reference/core_discoverable/#sortablefeatureorder", 
            "text": "An integer which is used to sort features.   SortableFeature classmethods", 
            "title": "SortableFeature.order"
        }, 
        {
            "location": "/reference/core_discoverable/#sortablefeaturelist", 
            "text": "Returns instances of the feature orderd by  .order  class Greeting(discoverable.DiscoverableFeature,\n               discoverable.SortableFeature):\n    module_name='ciao'\n\nclass Namaste(Greeting):\n    order = 2\n\nclass Hello(Greeting):\n    order = 32098239021\n\nclass Bonjour(Greeting):\n    order = 1\n\nfor f in Greeting.list():\n    print f, f.order\n\n#  class '*.*.Bonjour' , 1\n#  class '*.*.Namaste' , 2\n#  class '*.*.Hello' , 3", 
            "title": "SortableFeature.list()"
        }, 
        {
            "location": "/reference/core_discoverable/#restrictablefeature", 
            "text": "A mixin class that provides an interface for restricting access to features based on\nuser.  class Greeting(discoverable.DiscoverableFeature,\n               discoverable.RestrictableFeature):\n    module_name='ciao'   RestrictableFeature classmethods", 
            "title": "RestrictableFeature"
        }, 
        {
            "location": "/reference/core_discoverable/#restrictablefeaturefor_useruser", 
            "text": "Generator method that yields all instances of this discoverable which are visible to\na given user.  for f in Greeting.for_user(user):\n    print f\n\n#  class '*.*.Bonjour' \n#  class '*.*.Namaste' \n#  class '*.*.Hello'", 
            "title": "RestrictableFeature.for_user(user)"
        }, 
        {
            "location": "/reference/core_discoverable/#restrictablefeaturevisible_touser", 
            "text": "Predicate function used to determine whehter in individual feature should be visible\nto a given user. Defaults to simply returning True.  Features may override this to provide restricted access as required.  Hello.visible_to(user) # -  True", 
            "title": "RestrictableFeature.visible_to(user)"
        }, 
        {
            "location": "/reference/javascript/patient_service/", 
            "text": "The Patient service\n\n\nThe \nPatient\n service in \nopal.services\n is the client side representation of a patient model.\n\n\nConstructor\n\n\nThe Patient service is instantiated with the Patient data that comes back from the Patient JSON API.\nIt will cast any \nEpisode\n data to \nEpisode\n objects, and any \nPatientSubrecord\n\ndata to \nItem\n objects\n\n\n    var patient = new Patient(json_data)", 
            "title": "Patient service"
        }, 
        {
            "location": "/reference/javascript/patient_service/#the-patient-service", 
            "text": "The  Patient  service in  opal.services  is the client side representation of a patient model.", 
            "title": "The Patient service"
        }, 
        {
            "location": "/reference/javascript/patient_service/#constructor", 
            "text": "The Patient service is instantiated with the Patient data that comes back from the Patient JSON API.\nIt will cast any  Episode  data to  Episode  objects, and any  PatientSubrecord \ndata to  Item  objects      var patient = new Patient(json_data)", 
            "title": "Constructor"
        }, 
        {
            "location": "/reference/javascript/episode_service/", 
            "text": "The Episode service\n\n\nThe \nEpisode\n service in \nopal.services\n provides us with core functionality related\nto interacting with episodes in the client.\n\n\nConstructor\n\n\nThe Episode service is instantiated with the Episode data that comes back from the\nEpisode JSON API.\n\n\nvar episode = new Episode(json_data);\n\n\n\nMethods\n\n\nEpisode.getTags\n\n\nReturn a list of the current tags this episode has as strings.\n\n\nepisode.getTags();\n// ['mine', 'infectioncontrol']\n\n\n\nEpisode.getFullName\n\n\nReturn a human readable version of the Patient name suitable for rendering.\n\n\nepisode.getFullName()\n// -\n 'Jane Doe'\n\n\n\n\nEpisode.hasTag\n\n\nPredicate function that determines whether the episode is tagged with a given tag.\n\n\nArguments:\n\n\n\n\ntag\n: The tag you are interested in.\n\n\n\n\nEpisode.newItem\n\n\nInstantiate a new subrecord for this episode of a given type.\n\n\nArguments:\n\n\n\n\nrecordName\n: The name of the type of record you want to instantiate.\n\n\n\n\nExample usage:\n\n\nepisode.newItem('diagnosis');\n// item (an Item() instance.\n\n\n\nEpisode.recordEditor.newItem(name)\n\n\nTakes a string, opens a modal from which the user can create a new subrecord of type \nname\n.\n\n\nepisode.recordEditor.newItem('diagnosis'):\n// -\n Opens a modal with the diagnosis form and will create a new diagnosis on save\n\n\n\n\nEpisode.recordEditor.deleteItem(name, index)\n\n\nDelete the \nindex-th\n item of type \nname\n. Prompt the user to confirm this with a dialog.\n\n\nepisode.recordEditor.deleteItem('diagnosis', 0);\n// -\n Prompts the user to confirm the deletion of the first diagnosis\n\n\n\n\nEpisode.recordEditor.editItem(name, index)\n\n\nOpen a modal from which the user may edit the \nindex-th\n item of type \nname\n.\n\n\nepisode.recordEditor.editItem('diagnosis', 0);\n// -\n Opens a modal that allows the user to edit the first diagnosis", 
            "title": "Episode service"
        }, 
        {
            "location": "/reference/javascript/episode_service/#the-episode-service", 
            "text": "The  Episode  service in  opal.services  provides us with core functionality related\nto interacting with episodes in the client.", 
            "title": "The Episode service"
        }, 
        {
            "location": "/reference/javascript/episode_service/#constructor", 
            "text": "The Episode service is instantiated with the Episode data that comes back from the\nEpisode JSON API.  var episode = new Episode(json_data);", 
            "title": "Constructor"
        }, 
        {
            "location": "/reference/javascript/episode_service/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/reference/javascript/episode_service/#episodegettags", 
            "text": "Return a list of the current tags this episode has as strings.  episode.getTags();\n// ['mine', 'infectioncontrol']", 
            "title": "Episode.getTags"
        }, 
        {
            "location": "/reference/javascript/episode_service/#episodegetfullname", 
            "text": "Return a human readable version of the Patient name suitable for rendering.  episode.getFullName()\n// -  'Jane Doe'", 
            "title": "Episode.getFullName"
        }, 
        {
            "location": "/reference/javascript/episode_service/#episodehastag", 
            "text": "Predicate function that determines whether the episode is tagged with a given tag.  Arguments:   tag : The tag you are interested in.", 
            "title": "Episode.hasTag"
        }, 
        {
            "location": "/reference/javascript/episode_service/#episodenewitem", 
            "text": "Instantiate a new subrecord for this episode of a given type.  Arguments:   recordName : The name of the type of record you want to instantiate.   Example usage:  episode.newItem('diagnosis');\n// item (an Item() instance.", 
            "title": "Episode.newItem"
        }, 
        {
            "location": "/reference/javascript/episode_service/#episoderecordeditornewitemname", 
            "text": "Takes a string, opens a modal from which the user can create a new subrecord of type  name .  episode.recordEditor.newItem('diagnosis'):\n// -  Opens a modal with the diagnosis form and will create a new diagnosis on save", 
            "title": "Episode.recordEditor.newItem(name)"
        }, 
        {
            "location": "/reference/javascript/episode_service/#episoderecordeditordeleteitemname-index", 
            "text": "Delete the  index-th  item of type  name . Prompt the user to confirm this with a dialog.  episode.recordEditor.deleteItem('diagnosis', 0);\n// -  Prompts the user to confirm the deletion of the first diagnosis", 
            "title": "Episode.recordEditor.deleteItem(name, index)"
        }, 
        {
            "location": "/reference/javascript/episode_service/#episoderecordeditoredititemname-index", 
            "text": "Open a modal from which the user may edit the  index-th  item of type  name .  episode.recordEditor.editItem('diagnosis', 0);\n// -  Opens a modal that allows the user to edit the first diagnosis", 
            "title": "Episode.recordEditor.editItem(name, index)"
        }, 
        {
            "location": "/reference/javascript/item_service/", 
            "text": "The Item service\n\n\nThe \nItem\n service in \nopal.services\n provides us with core functionality related\nto interacting with subrecord in the client.\n\n\nMethods\n\n\nItem.makeCopy\n\n\nReturns a clone of the editable fields + consistency token so that\nwe can then update them in isolation elsewhere.\n\n\nItem.save\n\n\nSaves attributes to the server.\n\n\nitem.save(data_to_save);\n\n\n\nItem.formController\n\n\nThe Angular controller used by the modal that is opened when you edit this item to allow custom logic.\n\n\nDefaults to 'EditItemCtrl';", 
            "title": "Item service"
        }, 
        {
            "location": "/reference/javascript/item_service/#the-item-service", 
            "text": "The  Item  service in  opal.services  provides us with core functionality related\nto interacting with subrecord in the client.", 
            "title": "The Item service"
        }, 
        {
            "location": "/reference/javascript/item_service/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/reference/javascript/item_service/#itemmakecopy", 
            "text": "Returns a clone of the editable fields + consistency token so that\nwe can then update them in isolation elsewhere.", 
            "title": "Item.makeCopy"
        }, 
        {
            "location": "/reference/javascript/item_service/#itemsave", 
            "text": "Saves attributes to the server.  item.save(data_to_save);", 
            "title": "Item.save"
        }, 
        {
            "location": "/reference/javascript/item_service/#itemformcontroller", 
            "text": "The Angular controller used by the modal that is opened when you edit this item to allow custom logic.  Defaults to 'EditItemCtrl';", 
            "title": "Item.formController"
        }, 
        {
            "location": "/reference/javascript/user_service/", 
            "text": "The User service\n\n\nThe \nUser\n Service in \nopal.services\n provides us a way to get information about\nusers of an application.\n\n\nMethods\n\n\nUser.all()\n\n\nFetches all users of the application as a list.\n\n\nUser.all().then(function(users){\n    console.log(users[0]);\n    // -\n The first user\n})\n\n\n\n\nUser.get(id)\n\n\nFetch one specific user by ID.\n\n\nUser.get(1).then(function(user){\n    console.log(user);\n    // -\n The user with ID 1\n});", 
            "title": "User service"
        }, 
        {
            "location": "/reference/javascript/user_service/#the-user-service", 
            "text": "The  User  Service in  opal.services  provides us a way to get information about\nusers of an application.", 
            "title": "The User service"
        }, 
        {
            "location": "/reference/javascript/user_service/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/reference/javascript/user_service/#userall", 
            "text": "Fetches all users of the application as a list.  User.all().then(function(users){\n    console.log(users[0]);\n    // -  The first user\n})", 
            "title": "User.all()"
        }, 
        {
            "location": "/reference/javascript/user_service/#usergetid", 
            "text": "Fetch one specific user by ID.  User.get(1).then(function(user){\n    console.log(user);\n    // -  The user with ID 1\n});", 
            "title": "User.get(id)"
        }, 
        {
            "location": "/reference/javascript/patient_summary_service/", 
            "text": "The PatientSummary service\n\n\nThe \nPatientSummary\n service in \nopal.services\n provides us with core\nfunctionality related to interacting with patient search results in the client.\n\n\nConstructor\n\n\nThe PatientSummary service is instantiated with the Patient search result data\nthat comes back from the Patient search JSON API.\n\n\nvar patient_summary = new PatientSummary(json_data);", 
            "title": "Patient summary service"
        }, 
        {
            "location": "/reference/javascript/patient_summary_service/#the-patientsummary-service", 
            "text": "The  PatientSummary  service in  opal.services  provides us with core\nfunctionality related to interacting with patient search results in the client.", 
            "title": "The PatientSummary service"
        }, 
        {
            "location": "/reference/javascript/patient_summary_service/#constructor", 
            "text": "The PatientSummary service is instantiated with the Patient search result data\nthat comes back from the Patient search JSON API.  var patient_summary = new PatientSummary(json_data);", 
            "title": "Constructor"
        }, 
        {
            "location": "/reference/javascript/search_js_services/", 
            "text": "Opal Core Search Javascript Services\n\n\nFilter\n\n\nThe Angular Service for saved filters. Maps to the model \nopal.models.Filter\n.\n\n\nsave(attrs)\n\n\nSave this filter with the attributes passed in. If there is no ID, this is taken to be a create.\n\n\ndestroy()\n\n\nDestroy this filter.\n\n\nfiltersLoader\n\n\nLoader service that will resolve with instantiated \nFilter\n objects for each of the current\nuser's filters.\n\n\nFilterResource\n\n\nAngular $resource for Filter objects.", 
            "title": "Search JS Services"
        }, 
        {
            "location": "/reference/javascript/search_js_services/#opal-core-search-javascript-services", 
            "text": "", 
            "title": "Opal Core Search Javascript Services"
        }, 
        {
            "location": "/reference/javascript/search_js_services/#filter", 
            "text": "The Angular Service for saved filters. Maps to the model  opal.models.Filter .", 
            "title": "Filter"
        }, 
        {
            "location": "/reference/javascript/search_js_services/#saveattrs", 
            "text": "Save this filter with the attributes passed in. If there is no ID, this is taken to be a create.", 
            "title": "save(attrs)"
        }, 
        {
            "location": "/reference/javascript/search_js_services/#destroy", 
            "text": "Destroy this filter.", 
            "title": "destroy()"
        }, 
        {
            "location": "/reference/javascript/search_js_services/#filtersloader", 
            "text": "Loader service that will resolve with instantiated  Filter  objects for each of the current\nuser's filters.", 
            "title": "filtersLoader"
        }, 
        {
            "location": "/reference/javascript/search_js_services/#filterresource", 
            "text": "Angular $resource for Filter objects.", 
            "title": "FilterResource"
        }, 
        {
            "location": "/reference/javascript/loaders/", 
            "text": "The Patient List Loader service\n\n\nThe \npatientListLoader\n service in \nopal.services\n provides a function that will get the episodes from a\npreviously defined \npatient list\n\n\nBy default this will be the tag in the route params, alternatively you can pass in a tag.\n\n\nThe Episode Loader service\n\n\nLoads in an episode from an id, either passed in, or as the parameter of 'id' on the current route.\nIt casts it to an \nEpisode\n\n\nThe Patient Loader service\n\n\nLoads in a patient from the patient id, either passed in, or as the parameter of 'patient_id' on the current route.\nIt casts it to an \nPatient", 
            "title": "Loaders"
        }, 
        {
            "location": "/reference/javascript/loaders/#the-patient-list-loader-service", 
            "text": "The  patientListLoader  service in  opal.services  provides a function that will get the episodes from a\npreviously defined  patient list  By default this will be the tag in the route params, alternatively you can pass in a tag.", 
            "title": "The Patient List Loader service"
        }, 
        {
            "location": "/reference/javascript/loaders/#the-episode-loader-service", 
            "text": "Loads in an episode from an id, either passed in, or as the parameter of 'id' on the current route.\nIt casts it to an  Episode", 
            "title": "The Episode Loader service"
        }, 
        {
            "location": "/reference/javascript/loaders/#the-patient-loader-service", 
            "text": "Loads in a patient from the patient id, either passed in, or as the parameter of 'patient_id' on the current route.\nIt casts it to an  Patient", 
            "title": "The Patient Loader service"
        }, 
        {
            "location": "/reference/form_templatetags/", 
            "text": "Form Helpers\n\n\nOpal comes with a selection of templatetags that can help you with the\nrepetitive task of generating Bootstrap and Opal compatible markup for\nyour forms.\n\n\nTo use these in your HTML templates you need to load them:\n\n\n!-- myapp/templates/forms/mytemplate.html --\n\n{% load forms %}\n...\n\n\n\n\n{% checkbox ... %}\n\n\nGenerates a checkbox\n\n\nKeywords:\n\n\n\n\nfield\n a string of the models api name '.' field which infers attributes for the model, for more information see\n\nInference from subrecord fields\n\n\nlabel\n The Label with which to describe this field\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nchange\n  A javascript function that fires if the field has changed\n\n\ndisabled\n If this exists, we use this as the expression for the ng-disabled directive\n\n\nelement_name\n If this exists this is an Angular expression that is set to the 'name' attribute of the html element\n\n\nstyle\n The form style to render this widget with. Possible values are \n['horizontal', 'vertical']\n. Defaults to 'horizontal'\n\n\n\n\n{% datepicker ... %}\n\n\nGenerates a datepicker\n\n\nKeywords:\n\n\n\n\nfield\n a string of the models api name '.' field which infers attributes for the model, for more information see\n\nInference from subrecord fields\n\n\nlabel\n The Label with which to describe this field\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nchange\n  A javascript function that fires if the field has changed\n\n\nshow\n  A string that contains an Angular expression for the ng-show directive\n\n\nhide\n  A string that contains an Angular expression for the ng-hide directive\n\n\nrequired\n Label to show when we're required\n\n\nmindate\n Angular Javascript expression to return the minimum possible date\n\n\nelement_name\n If this exists this is an Angular expression that is set to the 'name' attribute of the html element\n\n\nstyle\n The form style to render this widget with. Possible values are \n['horizontal', 'vertical']\n. Defaults to 'horizontal'\n\n\n\n\n{% timepicker ... %}\n\n\nGenerates a time picker widget\n\n\nKeywords:\n\n\n\n\nfield\n a string of the models api name '.' field which infers attributes for the model, for more information see\n\nInference from subrecord fields\n\n\nlabel\n The Label with which to describe the date field (defaults to 'Date')\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nchange\n  A javascript function that fires if the field has changed\n\n\nstyle\n The form style to render this widget with. Possible values are \n['horizontal', 'vertical']\n. Defaults to 'horizontal'\n\n\n\n\n{% datetimepicker ... %}\n\n\nGenerates a date time fields, a date field on one line and a time field on another\n\n\nKeywords:\n\n\n\n\nfield\n a string of the models api name '.' field which infers attributes for the model, for more information see\n\nInference from subrecord fields\n\n\ndate_label\n The Label with which to describe the date field (defaults to 'Date')\n\n\ntime_label\n The Label with which to describe the date field (defaults to 'Time')\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nchange\n  A javascript function that fires if the field has changed\n\n\nelement_name\n If this exists this is an Angular expression that is set to the 'name' attribute of the html datetime picker element\n\n\nstyle\n The form style to render this widget with. Possible values are \n['horizontal', 'vertical']\n. Defaults to 'horizontal'\n\n\n\n\n{% input ... %}\n\n\nThe input template tag generates you a form input that will play nicely with Opal's styling.\n\n\nKeywords:\n\n\n\n\nfield\n a string of the models api name '.' field which infers attributes for the model, for more information see\n\nInference from subrecord fields\n\n\nlabel\n The Label with which to describe this field\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nchange\n  A javascript function that fires if the field has changed\n\n\nshow\n  A string that contains an Angular expression for the ng-show directive\n\n\nhide\n  A string that contains an Angular expression for the ng-hide directive\n\n\nlookuplist\n an Angular expression that evaluates to an array containing the lookuplist values\n\n\nrequired\n Label to show when we're required\n\n\nenter\n expression to evaluate if the user presses return when in this input\n\n\nmaxlength\n maximum number of characters for this input. Will render the form invalid and display help text if exceeded.\n\n\nelement_name\n If this exists this is an Angular expression that is set to the 'name' attribute of the html element\n\n\nelement_type\n If this exists it sets the input 'type' on the html tag. For numeric fields set by the 'field' parameter this will default to number. Otherwise it will just default to 'text'.\n\n\nstyle\n The form style to render this widget with. Possible values are \n['horizontal', 'vertical']\n. Defaults to 'horizontal'\n\n\n\n\nInputs with units\n\n\nWe also often want to display the unit of a particular field to help our users - consistent styling for this is\navailable by using the unit argument e.g.\n\n\n{% input label=\nWeight\n model=\nediting.weight\n unit=\nkg\n %}\n\n\n\n\n{% radio ... %}\n\n\nGenerates an inline radio input\n\n\nKeywords:\n\n\n\n\nfield\n a string of the models api name '.' field from this it calculates the label, model and will infer the lookuplist if required. For example {% radio field=\"DogOwner.dog\" %}\n\n\nlabel\n The Label with which to describe this input\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nchange\n  A javascript function that fires if the field has changed\n\n\nshow\n  A string that contains an Angular expression for the ng-show directive\n\n\nhide\n  A string that contains an Angular expression for the ng-hide directive\n\n\nlookuplist\n an Angular expression that evaluates to an array containing the radio values\n\n\nelement_name\n If this exists this is an Angular expression that is set to the 'name' attribute of the html element\n\n\nstyle\n The form style to render this widget with. Possible values are \n['horizontal', 'vertical']\n. Defaults to 'horizontal'\n\n\n\n\n{% select ... %}\n\n\nGenerates an inline select input\n\n\nKeywords:\n\n\n\n\nfield\n a string of the models api name '.' field from this it calculates the label, model and will infer the lookuplist if required. For example {% select field=\"DogOwner.dog\" %}\n\n\nlabel\n The Label with which to describe this input\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nchange\n  A javascript function that fires if the field has changed\n\n\nshow\n  A string that contains an Angular expression for the ng-show directive\n\n\nhide\n  A string that contains an Angular expression for the ng-hide directive\n\n\nlookuplist\n an Angular expression that evaluates to an array containing the radio values\n\n\nother\n A boolean parameter that if true, provides a free text option when 'Other' is selected\n\n\nhelp\n a template to use as the contents of a help popover\n\n\nstatic\n an Angular expression that will swap the display to be a static input if it evaluates to \ntrue\n\n\nelement_name\n If this exists this is an Angular expression that is set to the 'name' attribute of the html element*\n\n\nstyle\n The form style to render this widget with. Possible values are \n['horizontal', 'vertical']\n. Defaults to 'horizontal'\n\n\n\n\n{% textarea ... %}\n\n\nGenerates an inline textarea input\n\n\nKeywords:\n\n\n\n\nfield\n a string of the models api name '.' field from this it calculates the label, model and will infer the lookuplist if required. For example {% textarea field=\"DogOwner.dog\" %}\n\n\nlabel\n The Label with which to describe this input\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nchange\n  A javascript function that fires if the field has changed\n\n\nshow\n  A string that contains an Angular expression for the ng-show directive\n\n\nhide\n  A string that contains an Angular expression for the ng-hide directive\n\n\nelement_name\n If this exists this is an Angular expression that is set to the 'name' attribute of the html element\n\n\nstyle\n The form style to render this widget with. Possible values are \n['horizontal', 'vertical']\n. Defaults to 'horizontal'\n\n\nrows\n The number of rows in the textarea. Used to fill the html textarea row attribute. Defaults to 5.\n\n\n\n\nInference from subrecord fields\n\n\nA very common pattern is to render form fields that relate to fields of \nSubrecords\n. Template tags will use this to infer useful information. The display name will be set to the verbose_name and the the ng-model will be inferred.\n\n\nIf its required, it will set as a required field. If its a CharField with a max length it will set a validation rule accordingly.\n\n\nIf the field is a free text or foreign key we will infer the lookup list.\n\n\nAlternatively if the field has choices attached to it we will infer the choices into the field.\n\n\n{% input field=\nAllergies.drug\n %}\n\n\n\n\nNote unlike the traditional choices implementation only the last value of the choices is used and saved to the database\n\n\n  Colours = (\n    ('P', 'Purple'),\n    ('R', 'Red'),\n  )\n\n\n\n\nWhat is displayed to the user and saved to the database is 'Purple' or 'Red' respectively.\n\n\nAll inferences can be overridden by declarations in the template tag. For Example\n\n\n{% input field=\nAllergies.drug\n label=\nSomething else\n %}\n\n\n\n\nWill render the input with a different label.\n\n\n{% static ... %}\n\n\nGenerates a bootstrap Static div (for displaying data from fields as uneditable but formatted nicely with appropriate styles).\n\n\nTakes one positional argument, a string representing the subrecord field path.\n\n\n{% static \"Demographics.name\" %}\n\n!-- Renders as --\n\n\ndiv class=\"form-group\"\n\n  \nlabel class=\"control-label col-sm-3\"\n\n    Name\n  \n/label\n\n  \np class=\"form-control-static col-sm-8\"\n\n    [[ editing.demographics.name ]]\n  \n/p\n\n\n/div\n\n\n\n\n{% icon \"icon-name\" %}\n\n\nRenders a Bootstrap style Icon tag.\nIf the icon starts with \nfa\n or \nglyphicon\n then we will insert the preceding \nfa\n.\n\n\n{% icon \"fa-user-md\" %}\n\ni class=\"fa fa-user-md\"\n/i\n\n\n{% icon \"cusom-icon\"}\n\ni class=\"custom-icon\"\n/i", 
            "title": "Form helpers"
        }, 
        {
            "location": "/reference/form_templatetags/#form-helpers", 
            "text": "Opal comes with a selection of templatetags that can help you with the\nrepetitive task of generating Bootstrap and Opal compatible markup for\nyour forms.  To use these in your HTML templates you need to load them:  !-- myapp/templates/forms/mytemplate.html -- \n{% load forms %}\n...", 
            "title": "Form Helpers"
        }, 
        {
            "location": "/reference/form_templatetags/#checkbox", 
            "text": "Generates a checkbox  Keywords:   field  a string of the models api name '.' field which infers attributes for the model, for more information see Inference from subrecord fields  label  The Label with which to describe this field  model  The model which we are editing (This is a string that references an in-scope Angular variable)  change   A javascript function that fires if the field has changed  disabled  If this exists, we use this as the expression for the ng-disabled directive  element_name  If this exists this is an Angular expression that is set to the 'name' attribute of the html element  style  The form style to render this widget with. Possible values are  ['horizontal', 'vertical'] . Defaults to 'horizontal'", 
            "title": "{% checkbox ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#datepicker", 
            "text": "Generates a datepicker  Keywords:   field  a string of the models api name '.' field which infers attributes for the model, for more information see Inference from subrecord fields  label  The Label with which to describe this field  model  The model which we are editing (This is a string that references an in-scope Angular variable)  change   A javascript function that fires if the field has changed  show   A string that contains an Angular expression for the ng-show directive  hide   A string that contains an Angular expression for the ng-hide directive  required  Label to show when we're required  mindate  Angular Javascript expression to return the minimum possible date  element_name  If this exists this is an Angular expression that is set to the 'name' attribute of the html element  style  The form style to render this widget with. Possible values are  ['horizontal', 'vertical'] . Defaults to 'horizontal'", 
            "title": "{% datepicker ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#timepicker", 
            "text": "Generates a time picker widget  Keywords:   field  a string of the models api name '.' field which infers attributes for the model, for more information see Inference from subrecord fields  label  The Label with which to describe the date field (defaults to 'Date')  model  The model which we are editing (This is a string that references an in-scope Angular variable)  change   A javascript function that fires if the field has changed  style  The form style to render this widget with. Possible values are  ['horizontal', 'vertical'] . Defaults to 'horizontal'", 
            "title": "{% timepicker ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#datetimepicker", 
            "text": "Generates a date time fields, a date field on one line and a time field on another  Keywords:   field  a string of the models api name '.' field which infers attributes for the model, for more information see Inference from subrecord fields  date_label  The Label with which to describe the date field (defaults to 'Date')  time_label  The Label with which to describe the date field (defaults to 'Time')  model  The model which we are editing (This is a string that references an in-scope Angular variable)  change   A javascript function that fires if the field has changed  element_name  If this exists this is an Angular expression that is set to the 'name' attribute of the html datetime picker element  style  The form style to render this widget with. Possible values are  ['horizontal', 'vertical'] . Defaults to 'horizontal'", 
            "title": "{% datetimepicker ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#input", 
            "text": "The input template tag generates you a form input that will play nicely with Opal's styling.  Keywords:   field  a string of the models api name '.' field which infers attributes for the model, for more information see Inference from subrecord fields  label  The Label with which to describe this field  model  The model which we are editing (This is a string that references an in-scope Angular variable)  change   A javascript function that fires if the field has changed  show   A string that contains an Angular expression for the ng-show directive  hide   A string that contains an Angular expression for the ng-hide directive  lookuplist  an Angular expression that evaluates to an array containing the lookuplist values  required  Label to show when we're required  enter  expression to evaluate if the user presses return when in this input  maxlength  maximum number of characters for this input. Will render the form invalid and display help text if exceeded.  element_name  If this exists this is an Angular expression that is set to the 'name' attribute of the html element  element_type  If this exists it sets the input 'type' on the html tag. For numeric fields set by the 'field' parameter this will default to number. Otherwise it will just default to 'text'.  style  The form style to render this widget with. Possible values are  ['horizontal', 'vertical'] . Defaults to 'horizontal'", 
            "title": "{% input ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#inputs-with-units", 
            "text": "We also often want to display the unit of a particular field to help our users - consistent styling for this is\navailable by using the unit argument e.g.  {% input label= Weight  model= editing.weight  unit= kg  %}", 
            "title": "Inputs with units"
        }, 
        {
            "location": "/reference/form_templatetags/#radio", 
            "text": "Generates an inline radio input  Keywords:   field  a string of the models api name '.' field from this it calculates the label, model and will infer the lookuplist if required. For example {% radio field=\"DogOwner.dog\" %}  label  The Label with which to describe this input  model  The model which we are editing (This is a string that references an in-scope Angular variable)  change   A javascript function that fires if the field has changed  show   A string that contains an Angular expression for the ng-show directive  hide   A string that contains an Angular expression for the ng-hide directive  lookuplist  an Angular expression that evaluates to an array containing the radio values  element_name  If this exists this is an Angular expression that is set to the 'name' attribute of the html element  style  The form style to render this widget with. Possible values are  ['horizontal', 'vertical'] . Defaults to 'horizontal'", 
            "title": "{% radio ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#select", 
            "text": "Generates an inline select input  Keywords:   field  a string of the models api name '.' field from this it calculates the label, model and will infer the lookuplist if required. For example {% select field=\"DogOwner.dog\" %}  label  The Label with which to describe this input  model  The model which we are editing (This is a string that references an in-scope Angular variable)  change   A javascript function that fires if the field has changed  show   A string that contains an Angular expression for the ng-show directive  hide   A string that contains an Angular expression for the ng-hide directive  lookuplist  an Angular expression that evaluates to an array containing the radio values  other  A boolean parameter that if true, provides a free text option when 'Other' is selected  help  a template to use as the contents of a help popover  static  an Angular expression that will swap the display to be a static input if it evaluates to  true  element_name  If this exists this is an Angular expression that is set to the 'name' attribute of the html element*  style  The form style to render this widget with. Possible values are  ['horizontal', 'vertical'] . Defaults to 'horizontal'", 
            "title": "{% select ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#textarea", 
            "text": "Generates an inline textarea input  Keywords:   field  a string of the models api name '.' field from this it calculates the label, model and will infer the lookuplist if required. For example {% textarea field=\"DogOwner.dog\" %}  label  The Label with which to describe this input  model  The model which we are editing (This is a string that references an in-scope Angular variable)  change   A javascript function that fires if the field has changed  show   A string that contains an Angular expression for the ng-show directive  hide   A string that contains an Angular expression for the ng-hide directive  element_name  If this exists this is an Angular expression that is set to the 'name' attribute of the html element  style  The form style to render this widget with. Possible values are  ['horizontal', 'vertical'] . Defaults to 'horizontal'  rows  The number of rows in the textarea. Used to fill the html textarea row attribute. Defaults to 5.", 
            "title": "{% textarea ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#inference-from-subrecord-fields", 
            "text": "A very common pattern is to render form fields that relate to fields of  Subrecords . Template tags will use this to infer useful information. The display name will be set to the verbose_name and the the ng-model will be inferred.  If its required, it will set as a required field. If its a CharField with a max length it will set a validation rule accordingly.  If the field is a free text or foreign key we will infer the lookup list.  Alternatively if the field has choices attached to it we will infer the choices into the field.  {% input field= Allergies.drug  %}  Note unlike the traditional choices implementation only the last value of the choices is used and saved to the database    Colours = (\n    ('P', 'Purple'),\n    ('R', 'Red'),\n  )  What is displayed to the user and saved to the database is 'Purple' or 'Red' respectively.  All inferences can be overridden by declarations in the template tag. For Example  {% input field= Allergies.drug  label= Something else  %}  Will render the input with a different label.", 
            "title": "Inference from subrecord fields"
        }, 
        {
            "location": "/reference/form_templatetags/#static", 
            "text": "Generates a bootstrap Static div (for displaying data from fields as uneditable but formatted nicely with appropriate styles).  Takes one positional argument, a string representing the subrecord field path.  {% static \"Demographics.name\" %} !-- Renders as --  div class=\"form-group\" \n   label class=\"control-label col-sm-3\" \n    Name\n   /label \n   p class=\"form-control-static col-sm-8\" \n    [[ editing.demographics.name ]]\n   /p  /div", 
            "title": "{% static ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#icon-icon-name", 
            "text": "Renders a Bootstrap style Icon tag.\nIf the icon starts with  fa  or  glyphicon  then we will insert the preceding  fa .  {% icon \"fa-user-md\" %} i class=\"fa fa-user-md\" /i \n\n{% icon \"cusom-icon\"} i class=\"custom-icon\" /i", 
            "title": "{% icon \"icon-name\" %}"
        }, 
        {
            "location": "/reference/panels_templatetags/", 
            "text": "Panel helpers\n\n\nOpal comes with a selection of templatetags for rendering Opal panels\nfor a given subrecord. These panels also allow the user to\nsee instances of the model against the current value of \nepisode\n in\nAngular \n$scope\n. The user can also create new\ninstances of the given model, as well as editing any existing ones.\n\n\n{% record_panel ... %}\n\n\nRender a panel for a given record that will allow the user to view, create, update and delete instances.\n\n\nThe record panel template expects the relevant Angular \n$scope\n to have \nnewNamedItem(name, index)\n,\n\neditNamedItem(name, index)\n and \ndeleteItem(name, index)\n methods implemented. Default\nimplementations of these are available from the \nEpisodeDetailMixin\n.\n\n\n{% load panels %}\n{% record_panel Diagnosis %}\n\n\n\nKeywords:\n\n\n\n\nmodel\n: The model we want to render our panel for\n\n\ntitle\n: The display title for this panel\n\n\ndetail_template\n: The display template to use. Defaults to Subrecord.get_detail_template()\n\n\neditable\n: Whether this panel should allow editing. Defaults to True.\n\n\nangular_filter\n: An Angular expression that will be evaluated to decide whether to show each item\n\n\nnoentries\n: A string to render if there are no instances of \nmodel\n for the current episode\n\n\nonly_display_if_exists\n: Boolean defaulting to False. If true, the panel will simply not render if there are no instances of \nmodel\n\n\n\n\n{% record_timeline ... %}\n\n\nSimilar to \nrecord_panel\n, \nrecord_timeline\n renders a panel for a given record as a timeline - particularly\nuseful for subrecord types where the date is a key field.\n\n\n{% load panels %}\n{% record_panel Diagnosis 'when' %}\n\n\n\nArguments:\n\n\n\n\nmodel\n: The model we want to render our panel for\n\n\nwhenfield\n: String of the field that we're using to sort by.\n\n\n\n\n{% aligned_pair ... %}\n\n\nRender a key value pair in their own Bootstrap row using columns of width \nmd-4\n each.\nParticularly useful for occasions when we have multiple entries that need to be presented one after\nanother but the data is not naturally tabular.\n\n\n{% load panels %}\n{% aligned_pair model=\nepisode.start_date | shortDate\n label=\nStart Date\n %}\n{% aligned_pair model=\n22\n label=\nNext Data Point\n %}\n\n\n\n\nArguments:\n\n\n\n\nlabel\n: The left hand item, to be rendered bold.\n\n\nmodel\n: The right hand item, to be rendered as an angular expression", 
            "title": "Panel Template tags"
        }, 
        {
            "location": "/reference/panels_templatetags/#panel-helpers", 
            "text": "Opal comes with a selection of templatetags for rendering Opal panels\nfor a given subrecord. These panels also allow the user to\nsee instances of the model against the current value of  episode  in\nAngular  $scope . The user can also create new\ninstances of the given model, as well as editing any existing ones.", 
            "title": "Panel helpers"
        }, 
        {
            "location": "/reference/panels_templatetags/#record_panel", 
            "text": "Render a panel for a given record that will allow the user to view, create, update and delete instances.  The record panel template expects the relevant Angular  $scope  to have  newNamedItem(name, index) , editNamedItem(name, index)  and  deleteItem(name, index)  methods implemented. Default\nimplementations of these are available from the  EpisodeDetailMixin .  {% load panels %}\n{% record_panel Diagnosis %}  Keywords:   model : The model we want to render our panel for  title : The display title for this panel  detail_template : The display template to use. Defaults to Subrecord.get_detail_template()  editable : Whether this panel should allow editing. Defaults to True.  angular_filter : An Angular expression that will be evaluated to decide whether to show each item  noentries : A string to render if there are no instances of  model  for the current episode  only_display_if_exists : Boolean defaulting to False. If true, the panel will simply not render if there are no instances of  model", 
            "title": "{% record_panel ... %}"
        }, 
        {
            "location": "/reference/panels_templatetags/#record_timeline", 
            "text": "Similar to  record_panel ,  record_timeline  renders a panel for a given record as a timeline - particularly\nuseful for subrecord types where the date is a key field.  {% load panels %}\n{% record_panel Diagnosis 'when' %}  Arguments:   model : The model we want to render our panel for  whenfield : String of the field that we're using to sort by.", 
            "title": "{% record_timeline ... %}"
        }, 
        {
            "location": "/reference/panels_templatetags/#aligned_pair", 
            "text": "Render a key value pair in their own Bootstrap row using columns of width  md-4  each.\nParticularly useful for occasions when we have multiple entries that need to be presented one after\nanother but the data is not naturally tabular.  {% load panels %}\n{% aligned_pair model= episode.start_date | shortDate  label= Start Date  %}\n{% aligned_pair model= 22  label= Next Data Point  %}  Arguments:   label : The left hand item, to be rendered bold.  model : The right hand item, to be rendered as an angular expression", 
            "title": "{% aligned_pair ... %}"
        }, 
        {
            "location": "/reference/menus_templatetags/", 
            "text": "The Menus templatetag library\n\n\nThe \nmenu\n templatetag takes care of rendering an Opal application menu.\n\n\n{% load menus %}\n{% menu %}", 
            "title": "Menu Template tag"
        }, 
        {
            "location": "/reference/menus_templatetags/#the-menus-templatetag-library", 
            "text": "The  menu  templatetag takes care of rendering an Opal application menu.  {% load menus %}\n{% menu %}", 
            "title": "The Menus templatetag library"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/", 
            "text": "Opal Javascript Helpers\n\n\n$rootScope methods\n\n\nOpal provides some methods on the Angular $rootScope object.\n\n\nopen_modal\n\n\n$rootScope.open_modal(controller, template, {episode: episode})\n\n\n\nOpen an arbitrary controller in a modal, passing in the name of the controller,\nthe url for the template.\n\n\nYou may also pass through a dictionary of items to resolve.\n\n\nAngular Directives\n\n\nOpal provides some built-in Angular directives for your project to use.\n\n\ndate-of-birth\n\n\nCreates an input field that assumes to base field is a moment and handles validation and\nparsing. It assumes no one is born in the future or is over 150 years old.\n\n\ntag-select\n\n\nCreates a multi select box where users can remove or add tags. Only tags set as\n\ndirect_add\n tags can be set here.\nThis property is set on individual \nPatientList\n subclasses, and passed to the front\nend with the \nMetadata\n service.\n\n\nWe set the Angular model to be a copy of an episode's tagging.\n\n\n$scope.editing.tagging = episode.tagging[0].makeCopy();\n\n\n\n\nWe can instantiate the tag-select widget in our markup as follows.\n\n\ndiv tag-select ng-model=\nediting.tagging\n metadata=\nmetadata\n class=\ncol-sm-8\n\n\n/div\n\n\n\n\n\nNote: this directive will load the \nMetadata\n service over HTTP if it has not been loaded already.\n\n\none-click-only\n\n\nA directive that if set with no arguments, or set to true, will only allow a button to be\nclicked on once and then it'll be disabled. Useful for example to make sure that multiple save requests aren't\naccidentally triggered.\n\n\ncheck-form\n\n\nSimilar to one click only but it takes the form in use as an argument\n\n\ne.g.\n\n\nbutton check-form=\nform\n ng-click=\nsendDataToTheServer\nclick me\n/button\n\n\n\n\n\nThis checks the form for valid on click.\n\n\nIf the form is then not valid. It will not call the second function, but mark the form as submitted and disable the button.\n\n\nIt will watch for the form to become valid and enable the button when that happens.\n\n\nIf the form is valid, it will allow the ng-click function to be called.\n\n\nThis means that if you only want to show error messages after the user has clicked the save button you can do so with the\nform.$submitted variable.\n\n\nscroll-top\n\n\nAdds a click handler to the element that when click will animate the body of the element to scroll to the top\n\n\ngo-to-top\n\n\nSimilar to scroll-top, this moves the scroll bar to the top of the page but doesn't animate the transition.\n\n\ncopy to clipboard\n\n\ne.g.\n\n\nbutton clipboard data-clipboard-target=\n#content-to-copy\n\nCopy to Clipboard\n\n/button\n\n\n\n\n\nThis is a wrapper around clipboard.js, it lets the user copy text from an element that matches the selector you pass it. It will present a growl message saying that the text has been\ncopied.\n\n\nfullNameForUser\n\n\nGiven a User ID, inserts the full name of a user into the element the directive is on\n\n\nspan full-name-for-user=\n2\n/span\n\n\n!-- Becomes --\n\n\nspan\nJane Doe\n/span\n\n\n\n\n\navatarForUser\n\n\nIntended for use on an \nimg\n tag, given a User ID, sets the src attribute to the correct\navatar URL.\n\n\nimg avatar-for-user=\n1\n /\n\n\n!-- Becomes --\n\n\nimg src=\nhttp://gravatar.com.....\n /\n\n\n\n\n\nAngular Filters\n\n\nOpal provides some built-in Angular filters for your project to use.\n\n\nAge\n\n\nCalculates a persons current age from their date of birth\n\n\nboxed\n\n\nDisplays Boolean fields as a checkbox (e.g. either [ ] or [X])\n\n\n[[ item.boolean_field | boxed]]\n\n\n\nhhmm\n\n\nDisplays the hours \n minutes portion of a javascript Date object as HH:MM\n\n\nmoment-date-filter\n\n\nAllows a us to use moment.js formatters in the template exactly like you would use moment.format\n\n\nplural\n\n\nTakes a word, a count, and an optional plural term.\n\n\nIf count != 1 and there is a plural term it will return the plural term otherwise it will just suffix an 's'\n\n\nif count == 1 then it will return the word\n\n\nshort-date\n\n\nDisplays a date as DD/MM if it's this year, else DD/MM/YYYY\n\n\nshort-date-time\n\n\nDisplays a date time, short date as above and time as in hhmm above\n\n\ntitle\n\n\nConverts a string to title case\n\n\nupper\n\n\nConverts a string to upper case\n\n\nunderscore-to-spaces\n\n\nConverts strings with underscores (e.g. variable names etc) to words with spaces.\n\n\n[[ 'some_underscore_string' | underscore-to-spaces ]]\n-\n some underscore string\n\n\n\n\nAngular HTTP Interceptors\n\n\nOpal uses opal.services.LogoutInterceptor to intercept all failed responses from the server. If they're a 401 or a 403 we redirect the user to the login page, otherwise it passes them through.", 
            "title": "Javascript helpers"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#opal-javascript-helpers", 
            "text": "", 
            "title": "Opal Javascript Helpers"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#rootscope-methods", 
            "text": "Opal provides some methods on the Angular $rootScope object.", 
            "title": "$rootScope methods"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#open_modal", 
            "text": "$rootScope.open_modal(controller, template, {episode: episode})  Open an arbitrary controller in a modal, passing in the name of the controller,\nthe url for the template.  You may also pass through a dictionary of items to resolve.", 
            "title": "open_modal"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#angular-directives", 
            "text": "Opal provides some built-in Angular directives for your project to use.", 
            "title": "Angular Directives"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#date-of-birth", 
            "text": "Creates an input field that assumes to base field is a moment and handles validation and\nparsing. It assumes no one is born in the future or is over 150 years old.", 
            "title": "date-of-birth"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#tag-select", 
            "text": "Creates a multi select box where users can remove or add tags. Only tags set as direct_add  tags can be set here.\nThis property is set on individual  PatientList  subclasses, and passed to the front\nend with the  Metadata  service.  We set the Angular model to be a copy of an episode's tagging.  $scope.editing.tagging = episode.tagging[0].makeCopy();  We can instantiate the tag-select widget in our markup as follows.  div tag-select ng-model= editing.tagging  metadata= metadata  class= col-sm-8  /div   Note: this directive will load the  Metadata  service over HTTP if it has not been loaded already.", 
            "title": "tag-select"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#one-click-only", 
            "text": "A directive that if set with no arguments, or set to true, will only allow a button to be\nclicked on once and then it'll be disabled. Useful for example to make sure that multiple save requests aren't\naccidentally triggered.", 
            "title": "one-click-only"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#check-form", 
            "text": "Similar to one click only but it takes the form in use as an argument  e.g.  button check-form= form  ng-click= sendDataToTheServer click me /button   This checks the form for valid on click.  If the form is then not valid. It will not call the second function, but mark the form as submitted and disable the button.  It will watch for the form to become valid and enable the button when that happens.  If the form is valid, it will allow the ng-click function to be called.  This means that if you only want to show error messages after the user has clicked the save button you can do so with the\nform.$submitted variable.", 
            "title": "check-form"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#scroll-top", 
            "text": "Adds a click handler to the element that when click will animate the body of the element to scroll to the top", 
            "title": "scroll-top"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#go-to-top", 
            "text": "Similar to scroll-top, this moves the scroll bar to the top of the page but doesn't animate the transition.", 
            "title": "go-to-top"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#copy-to-clipboard", 
            "text": "", 
            "title": "copy to clipboard"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#eg", 
            "text": "button clipboard data-clipboard-target= #content-to-copy \nCopy to Clipboard /button   This is a wrapper around clipboard.js, it lets the user copy text from an element that matches the selector you pass it. It will present a growl message saying that the text has been\ncopied.", 
            "title": "e.g."
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#fullnameforuser", 
            "text": "Given a User ID, inserts the full name of a user into the element the directive is on  span full-name-for-user= 2 /span  !-- Becomes --  span Jane Doe /span", 
            "title": "fullNameForUser"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#avatarforuser", 
            "text": "Intended for use on an  img  tag, given a User ID, sets the src attribute to the correct\navatar URL.  img avatar-for-user= 1  /  !-- Becomes --  img src= http://gravatar.com.....  /", 
            "title": "avatarForUser"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#angular-filters", 
            "text": "Opal provides some built-in Angular filters for your project to use.", 
            "title": "Angular Filters"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#age", 
            "text": "Calculates a persons current age from their date of birth", 
            "title": "Age"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#boxed", 
            "text": "Displays Boolean fields as a checkbox (e.g. either [ ] or [X])  [[ item.boolean_field | boxed]]", 
            "title": "boxed"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#hhmm", 
            "text": "Displays the hours   minutes portion of a javascript Date object as HH:MM", 
            "title": "hhmm"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#moment-date-filter", 
            "text": "Allows a us to use moment.js formatters in the template exactly like you would use moment.format", 
            "title": "moment-date-filter"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#plural", 
            "text": "Takes a word, a count, and an optional plural term.  If count != 1 and there is a plural term it will return the plural term otherwise it will just suffix an 's'  if count == 1 then it will return the word", 
            "title": "plural"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#short-date", 
            "text": "Displays a date as DD/MM if it's this year, else DD/MM/YYYY", 
            "title": "short-date"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#short-date-time", 
            "text": "Displays a date time, short date as above and time as in hhmm above", 
            "title": "short-date-time"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#title", 
            "text": "Converts a string to title case", 
            "title": "title"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#upper", 
            "text": "Converts a string to upper case", 
            "title": "upper"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#underscore-to-spaces", 
            "text": "Converts strings with underscores (e.g. variable names etc) to words with spaces.  [[ 'some_underscore_string' | underscore-to-spaces ]]\n-  some underscore string", 
            "title": "underscore-to-spaces"
        }, 
        {
            "location": "/reference/javascript/javascript_helpers/#angular-http-interceptors", 
            "text": "Opal uses opal.services.LogoutInterceptor to intercept all failed responses from the server. If they're a 401 or a 403 we redirect the user to the login page, otherwise it passes them through.", 
            "title": "Angular HTTP Interceptors"
        }, 
        {
            "location": "/reference/search_queries/", 
            "text": "opal.core.search.queries\n\n\nThis module provides our base classes for query backends as well as helper functions.\n\n\nepisodes_for_user\n\n\nGiven an iterable of EPISODES and a USER, return a filtered list of episodes that this user has\nthe permissions to know about.\n\n\nfiltered_episodes = episodes_for_user(episodes, user)\n\n\n\nfuzzy_query\n\n\nGiven a partial fragment for example Jane 123, return all patients that\nhave either a first name, last name or hospital number including jane or 123.\nUnder the covers it uses \nPatient.objects.search\n. It then\norders patients by which have had their episodes created most recently.", 
            "title": "Search Queries"
        }, 
        {
            "location": "/reference/search_queries/#opalcoresearchqueries", 
            "text": "This module provides our base classes for query backends as well as helper functions.", 
            "title": "opal.core.search.queries"
        }, 
        {
            "location": "/reference/search_queries/#episodes_for_user", 
            "text": "Given an iterable of EPISODES and a USER, return a filtered list of episodes that this user has\nthe permissions to know about.  filtered_episodes = episodes_for_user(episodes, user)", 
            "title": "episodes_for_user"
        }, 
        {
            "location": "/reference/search_queries/#fuzzy_query", 
            "text": "Given a partial fragment for example Jane 123, return all patients that\nhave either a first name, last name or hospital number including jane or 123.\nUnder the covers it uses  Patient.objects.search . It then\norders patients by which have had their episodes created most recently.", 
            "title": "fuzzy_query"
        }, 
        {
            "location": "/reference/pathways/", 
            "text": "Reference docs: \nopal.core.pathway\n\n\nPathway\n\n\nPathway is the base class for most complex forms in Opal applications.\n\n\nAttributes\n\n\nPathway.display_name\n\n\nThe human readable display name for this pathway. Will be used in the base template for\nfull page pathways.\n\n\nPathway.slug\n\n\nThe slug to use in the URL for accessing an individual pathway, and the string that can\nbe passed to \nPathway.get()\n that will return it.\n\n\nPathway.steps\n\n\nThe steps that make up this pathway. A tuple of either \nopal.models.Subrecord\n or\n\npathway.Step\n subclasses.\n\n\nPathway.pathway_service\n\n\nThe Service that is used to instantiate the pathway. This should inherit from the Pathway js service.\n\n\nPathway.pathway_insert\n\n\nThe name of the class that you're replaceing with the pathway template. You probably shouldn't have to change this.\n\n\nPathway.template\n\n\nThe name of the pathway template, it must include a div/span with the class .to_append which will be replaced by the wrapped step templates.\n\n\nPathway.modal_template\n\n\nIf set, this template will be used if your pathway is opened in a modal. If its not set the template attribute will be used.\n\n\nMethods\n\n\nPathway.redirect_url(self, patient, episde)\n\n\nReturns a string that we should redirect to on success. Defaults to\nan episode detail screen\n\n\nPathway.save(user=None, episode=None, patient=None)\n\n\nSaves a pathway, it removes items that haven't changed and then\nsaves with the Patient.bulk_update method\n\n\nWizardPathway\n\n\nInherits from \nopal.core.pathway.Pathway\n, this displays one step per page, with \nnext\n and \nback\n buttons\nto navigate through the form.\n\n\nPagePathway\n\n\nInherits from \nopal.core.pathway.Pathway\n, this displays all steps as one long form.\n\n\nStep\n\n\nSteps are a single section within a form, and can be instances of either \nopal.models.Subrecord\n or\n\npathway.Step\n subclasses. You can use both types of Step in a given Pathway.\n\n\nMore detail on Steps is given in the \nGuides section on Pathways\n\n\nHelpTextStep\n\n\nA Step subclass with help text to the side of the form\n\n\nFindPatientStep\n\n\nA frequent pattern is a form that allows the user to search for a patient at the start. This step\nincludes a widget for searching for patients, then selecting that patient for use in the rest of the\nform.\n\n\nRedirectsToPatientMixin\n\n\nAfter saving, redirect the browser to the patient detail page for the relevant patient.", 
            "title": "Pathway"
        }, 
        {
            "location": "/reference/pathways/#reference-docs-opalcorepathway", 
            "text": "", 
            "title": "Reference docs: opal.core.pathway"
        }, 
        {
            "location": "/reference/pathways/#pathway", 
            "text": "Pathway is the base class for most complex forms in Opal applications.", 
            "title": "Pathway"
        }, 
        {
            "location": "/reference/pathways/#attributes", 
            "text": "", 
            "title": "Attributes"
        }, 
        {
            "location": "/reference/pathways/#pathwaydisplay_name", 
            "text": "The human readable display name for this pathway. Will be used in the base template for\nfull page pathways.", 
            "title": "Pathway.display_name"
        }, 
        {
            "location": "/reference/pathways/#pathwayslug", 
            "text": "The slug to use in the URL for accessing an individual pathway, and the string that can\nbe passed to  Pathway.get()  that will return it.", 
            "title": "Pathway.slug"
        }, 
        {
            "location": "/reference/pathways/#pathwaysteps", 
            "text": "The steps that make up this pathway. A tuple of either  opal.models.Subrecord  or pathway.Step  subclasses.", 
            "title": "Pathway.steps"
        }, 
        {
            "location": "/reference/pathways/#pathwaypathway_service", 
            "text": "The Service that is used to instantiate the pathway. This should inherit from the Pathway js service.", 
            "title": "Pathway.pathway_service"
        }, 
        {
            "location": "/reference/pathways/#pathwaypathway_insert", 
            "text": "The name of the class that you're replaceing with the pathway template. You probably shouldn't have to change this.", 
            "title": "Pathway.pathway_insert"
        }, 
        {
            "location": "/reference/pathways/#pathwaytemplate", 
            "text": "The name of the pathway template, it must include a div/span with the class .to_append which will be replaced by the wrapped step templates.", 
            "title": "Pathway.template"
        }, 
        {
            "location": "/reference/pathways/#pathwaymodal_template", 
            "text": "If set, this template will be used if your pathway is opened in a modal. If its not set the template attribute will be used.", 
            "title": "Pathway.modal_template"
        }, 
        {
            "location": "/reference/pathways/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/reference/pathways/#pathwayredirect_urlself-patient-episde", 
            "text": "Returns a string that we should redirect to on success. Defaults to\nan episode detail screen", 
            "title": "Pathway.redirect_url(self, patient, episde)"
        }, 
        {
            "location": "/reference/pathways/#pathwaysaveusernone-episodenone-patientnone", 
            "text": "Saves a pathway, it removes items that haven't changed and then\nsaves with the Patient.bulk_update method", 
            "title": "Pathway.save(user=None, episode=None, patient=None)"
        }, 
        {
            "location": "/reference/pathways/#wizardpathway", 
            "text": "Inherits from  opal.core.pathway.Pathway , this displays one step per page, with  next  and  back  buttons\nto navigate through the form.", 
            "title": "WizardPathway"
        }, 
        {
            "location": "/reference/pathways/#pagepathway", 
            "text": "Inherits from  opal.core.pathway.Pathway , this displays all steps as one long form.", 
            "title": "PagePathway"
        }, 
        {
            "location": "/reference/pathways/#step", 
            "text": "Steps are a single section within a form, and can be instances of either  opal.models.Subrecord  or pathway.Step  subclasses. You can use both types of Step in a given Pathway.  More detail on Steps is given in the  Guides section on Pathways", 
            "title": "Step"
        }, 
        {
            "location": "/reference/pathways/#helptextstep", 
            "text": "A Step subclass with help text to the side of the form", 
            "title": "HelpTextStep"
        }, 
        {
            "location": "/reference/pathways/#findpatientstep", 
            "text": "A frequent pattern is a form that allows the user to search for a patient at the start. This step\nincludes a widget for searching for patients, then selecting that patient for use in the rest of the\nform.", 
            "title": "FindPatientStep"
        }, 
        {
            "location": "/reference/pathways/#redirectstopatientmixin", 
            "text": "After saving, redirect the browser to the patient detail page for the relevant patient.", 
            "title": "RedirectsToPatientMixin"
        }, 
        {
            "location": "/reference/settings/", 
            "text": "Opal Settings\n\n\nOpal applications provide a number of settings in the \nsettings.py\n of your application.\n\n\nOPAL_AUTOCOMPLETE_SEARCH\n\n\nWhether to enable autocomplete on search from the navbar. Defaults to False.\n\n\nOPAL_BRAND_NAME\n\n\nThe human readable form of your application name.\nDisplayed in the header by default.\nScaffolded applications start with whatever is passed in to \nopal startproject\n.\n\n\nOPAL_LOG_OUT_DURATION\n\n\nOpal will log users out if they have been inactive for greater than this value.\nScaffolded applications set this to 15 minutes by default. Unit is milliseconds.\n\n\nOPAL_LOGO_PATH\n\n\nIf \nOPAL_LOGO_PATH\n is set, the value is passed to the \n{% static %}\n templatetag to set the\n\nsrc\n attribute of an image in the default application header and login screen.\n\n\nOPAL_FAVICON_PATH\n\n\nIf \nOPAL_FAVICON_PATH\n is set, the value is passed to the \n{% static %}\n templatetag\nto set the \nhref\n attribute for the favicon tag in the default application \nhead\n\n\nVERSION_NUMBER\n\n\nThe version number of your application. Displayed in the header by default.\nScaffolded applications start at \n0.0.1\n.", 
            "title": "Settings"
        }, 
        {
            "location": "/reference/settings/#opal-settings", 
            "text": "Opal applications provide a number of settings in the  settings.py  of your application.", 
            "title": "Opal Settings"
        }, 
        {
            "location": "/reference/settings/#opal_autocomplete_search", 
            "text": "Whether to enable autocomplete on search from the navbar. Defaults to False.", 
            "title": "OPAL_AUTOCOMPLETE_SEARCH"
        }, 
        {
            "location": "/reference/settings/#opal_brand_name", 
            "text": "The human readable form of your application name.\nDisplayed in the header by default.\nScaffolded applications start with whatever is passed in to  opal startproject .", 
            "title": "OPAL_BRAND_NAME"
        }, 
        {
            "location": "/reference/settings/#opal_log_out_duration", 
            "text": "Opal will log users out if they have been inactive for greater than this value.\nScaffolded applications set this to 15 minutes by default. Unit is milliseconds.", 
            "title": "OPAL_LOG_OUT_DURATION"
        }, 
        {
            "location": "/reference/settings/#opal_logo_path", 
            "text": "If  OPAL_LOGO_PATH  is set, the value is passed to the  {% static %}  templatetag to set the src  attribute of an image in the default application header and login screen.", 
            "title": "OPAL_LOGO_PATH"
        }, 
        {
            "location": "/reference/settings/#opal_favicon_path", 
            "text": "If  OPAL_FAVICON_PATH  is set, the value is passed to the  {% static %}  templatetag\nto set the  href  attribute for the favicon tag in the default application  head", 
            "title": "OPAL_FAVICON_PATH"
        }, 
        {
            "location": "/reference/settings/#version_number", 
            "text": "The version number of your application. Displayed in the header by default.\nScaffolded applications start at  0.0.1 .", 
            "title": "VERSION_NUMBER"
        }, 
        {
            "location": "/reference/CHANGELOG/", 
            "text": "0.10.0 (Major Release)\n\n\nThis is a major release with breaking changes from upstream dependencies.\nYou are almost certain to require changes to your application. Please see\nthe upgrade guide for further details.\n\n\nReferencedata in new applications\n\n\nOpal now includes core lookuplist data in an \nopal.core.referencedata\n plugin\nwhich is installed and loaded by default by the \nstartproject\n scaffolding.\n\n\nDeletion cascade behaviour\n\n\nOpal 0.10 changes several behaviours related to cascading deletions which, despite\nbeing Django defaults, were confusing to users and developers in our use case.\n\n\nWhen we delete and look up list instance, we no longer delete all subrecords that use\nthat instance. Instead we set the look up list instances name in the free text field on\nthe subrecord.\n\n\nWhen you delete a user, it will no longer delete all related episodes and subrecords\n\n\nEpisode Category stages\n\n\nEpisode categories now enforce a set of valid \nEpisode.stage\n values.\n\nEpisodeCategory\n now includes the \n.get_stages()\n and \n.has_stage(stage)\n methods,\nwhile \nEpisode\n has a \nset_stage\n setter which is used by the UpdateFromDictMixin JSON API.\n\n\nlookuplists.lookuplists\n\n\nAdds the utility generator \nlookuplists.lookuplists()\n which wil yield every lookuplist\ncurrently available.\n\n\nDiscoverable.filter()\n\n\nDisoverable features now have a \nfilter\n method which allows you to filter features\nwith matching attributes.\n\n\nPathways ContextProcessor\n\n\nThe 'opal.core.pathways.context_processors.pathways' Context Processor will allow you to\naccess your pathways from templates without having to explicitly load them in a view. In\nturn, this allows patterns like:\n\n\n{% include pathways.YourPathway.get_display_name %}\n\n\n\nMissing consistency token errors\n\n\n.update_from_dict()\n will now raise the new error\n\nopal.core.errors.MissingConsistencyTokenError\n if it is called without a consistency\ntoken when one is set on the model. Previously it would raise \nAPIError\n.\n\n\nThe JSON API will now return a more specific message in the response boday, explaining\nthat the problem is a missing consistency token.\n\n\ndump_lookup_lists --many-files\n\n\nAdds the \n--many-files\n option to the \ndump_lookup_lists\n command which will write\neach installed lookup list to a separate file in the \n./data/lookuplists\n directory\nof the application.\n\n\nTemplate removals\n\n\nWe remove a number of stale unused templates:\n\n\n\n\nchangelog.html\n\n\ncontact.html\n\n\nextract_footer.html\n\n\ntagging_detail.html\n\n\n_helpers/inline_form.html\n\n\nresponsive/_phone_episode_list.html'\n\n\nresponsive/_tablet_episode_list.html\n\n\n\n\nRemoving LoginRequiredMixin\n\n\nAs Django ships with a \nLoginRequiredMixin\n of its own we no longer roll our own\nin `opal.core.views.\n\n\nTesting options\n\n\nAdds a \n--failfast\n option to the test harness to stop test runs on the first\nfailure.\n\n\nIf you are a plugin developer upgrading an existing plugin you will have to\nmanually add support for \n--failfast\n passthrough to your \nruntests.py\n.\n\n\nIf you are a plugin developer upgrading an existing plugin you will have to\nmanually add support for \n--failfast\n passthrough to your \nruntests.py\n.\n\n\nMoves scaffold to be a django management command\n\n\nThe rest of the api is still the same but now\nwe run \npython manage.py scaffold {my_app_name}\n\n\nDeprecations completed\n\n\nAs previously noted in console warnings, the Angular Episode service no longer\nsupports the \ndischarge_date\n, \ndate_of_admission\n, \ndate_of_episode\n properties.\nThese were replaced by \n.start\n and \n.end\n.\n\n\nUpdates to the Dependency Graph\n\n\n\n\nDjango: 1.8.13 -\n 1.10.8\n\n\nDjango Reversion: 1.8.7 -\n 1.10.2\n\n\nDjango Rest Framework: 3.2.2 -\n 3.4.7\n\n\nPsycopg2: 2.5 -\n 2.7\n\n\nJinja2: 2.9.6 -\n 2.10\n\n\nFfs: 0.0.8.1 -\n 0.0.8.2\n\n\nRequests: 2.7.0 -\n 2.18.4\n\n\ndjango-celery: 3.1.17 -\n 3.2.2\n\n\ncelery: 3.1.19 -\n 3.1.25\n\n\n\n\nMisc Changes\n\n\nRemoves the undocumented \ncollapsed_multisave\n tag from the \npathways\n templatetag\nlibrary.\n\n\nAdds a setting \nOPAL_FAVICON_PATH\n to specify the application Favicon to use.\n\n\nAdds the \nrows\n option to the textarea template tag which just fills in the html textarea\n\nrows\n attribute. Text areas are defaulted to 5 rows (the same as before).\n\n\nConfigures the setting \nCSRF_FAILURE_VIEW\n to use the bundled \nopal.views.csrf_failure\n view.\n\n\nAdds the utility function \nopal.utils.get\n. Similar to the \ngetattr\n builtin, \nget\n looks\nfor a method named \nget_$attr\n and will call that if it exists.\n\n\nAdds the method \n.get_absolute_url()\n to \nopal.core.pathways.Pathway\n and\n\nopal.core.patient_lists.PatientList\n.\n\n\nAdds the Opal error \nSignatureError\n.\n\n\nPathway slugs may now include hyphens as well as numbers, lower case letters and underscores.\n\n\nBugfix: in edit_item.js $scope.episode_category is now set from episode.category_name\nas opposed to episode.category (which was always null)\n\n\nFixes some instances of progressbars not being reset if unexpected error states\noccur.\n\n\nImproves the rendering of patient detail pages where no patient with the ID from\nroute params exits. (Displays a polite message instead of erroring.)\n\n\nIncorrect pluralisation of subrecord names in the Admin view has been fixed. (Migrations\nwill have to be run in all models which extend the changed core Opal models (this is due\nto a minor upstream Django bug)\n\n\nMinor change to the diagnosis form.\n\n\n0.9.0 (Major Release)\n\n\nGood bye date_of_episode, discharge_date, date_of_admission\n\n\nAnd hello \nepisode.start\n and \nepisode.end\n. These fields on the \nEpisode\n model\nreplace the multiple ways of recording Episode duration in Opal.\n\n\nThere is a migration that sets \nstart\n to date_of_episode if it  exists, otherwise\nit uses date of admission.\n\n\nend\n will be date_of_episode if it exists, otherwise it will use discharge_date.\n\n\nNote that this means we no longer refer to start and end properties on the\nEpisode category. If you override \nstart\n and \nend\n in a custom episode category\nyou should update to use the Episode model fields. This logic should be moved into\nyour flows and you'll need to put in a migration to populate existing\nepisodes.\n\n\nWe also remove the episode fields \ndate_of_episode\n \ndischarge_date\n, and\n\ndate_of_admission\n.\nWarning: Backwards migrations will not migrate back to \ndate_of_episode\n but to\na admission and discharge. Take backups before running these migrations!\n\n\nThe fields \nstart\n and \nend\n are both cast to moments (rather than raw js Dates) on\nepisode.initialisation\n\n\nPathway\n\n\nMoves the opal-pathway module into the opal core. Pathways is an extensible way\nof creating forms that involve multiple subrecords.\n\n\nWe've got time on our side\n\n\nAdds in the {% timepicker %} template tag, that follows the same convention as\nthe other template tags, ie {% timepicker field=\"Dinner.time\" %}\n\n\nRemoves a js global declaration of categories\n\n\nPreviously we declared CATEGORIES globally. This has now been removed\n\n\nOrder Order\n\n\nEpisodes in the patient list are now ordered by start, first_name and surname\n\n\nTheming support\n\n\nImprovements and better documentation and guides for theming applications. Particularly\nof note are changes to \nopal.html\n and \nbase.html\n, as well as the addition of the\n\nstatic_page.html\n template.\n\n\nThis version also includes extensive improved support for customising the templates that\ndisplay patient lists, detail views, menus and forms amongst other things.\n\n\nFor full documentation, consult the theming guide in the documentation.\n\n\nMakes search fully pluggable\n\n\nSearch is now completely pluggable, you need to have \nsome\n angular controller\ncalled SearchCtrl, but apart from that you can plugin your own implementation.\n\n\nExclude prefixes now work on actual paths\n\n\nPreviously they only worked with angular paths, now they work\nwith a combination of actual paths and angular url paths (e.g. /search/#/extract)\n\n\nMisc Changes\n\n\nAdd the allow_add_patient and allow_edit_teams options to the patient lists.\n\n\nWe added support for a \n--file\n or \n-f\n option for the \nload_lookup_lists\n command which\nallows the user to specify a particular file outside of the default locations.\n\n\nThe default \nLocation\n record display template will no longer include references\nto \nEpisode.start\n. and \nEpisode.stop\n labelled as admisssion and discharge to support\nthe majority case where an episode relates to something other than an inpatient episode!\n\n\nApplications wishing to retaint this functionality should update their own temaplates\nto display start/stop details.\n\n\nRemoves Deprecated functionality in ReferenceData, Metadata, UserProfile and recordLoader\n\n\nPreviously these would make their http request when imported into a file. They now require you to call .load()\nfor them to return the promise that loads in their respective data.\n\n\n0.8.3 (Minor Release)\n\n\nopal.log.ConfidentialEmailer\n\n\nAdds a custom email logger. This enables Django error emails which remove any confidential patient data.\n\n\nAlso adds in the karma config to the MANIFEST.in so that we include the karma configs on pip install. It also moves it\nto \"opal/tests/js_config/karma_defaults.js\".\n\n\n0.8.2 (Minor Release)\n\n\nOPAL_LOCATION is added as a system variable when running js tests\n\n\nIf you run opal test js, your karma config is now run in an environment that has\naccess to the OPAL_LOCATION variable which points to the opal parent directory.\n\n\nA Data Dictionary In The Extract\n\n\nThe Extract zip file has a data dictionary with human readable metadata about each field.\n\n\nEnhanced Application menus\n\n\nThe application menu API, previously python dicts stored in attributes on either plugin or\napplication subclasses, now consists of the new \nopal.core.menus.MenuItem\n class, enabling\nenhanced customisation and flexibility.\n\n\nPUT to the episode API returns the episode with all its subrecords\n\n\nPreviously it only returned the episode. Now it matches the episode create api end point\n\n\nEpisode/Patient links in admin\n\n\nIn the admin, episodes and patients lists now have links to the patient detail pages.\n\n\nUser data for the client\n\n\nAdds a \nUser\n Angular service that enables applications to use user data.\nAlso adds some directives to make it easy to render User names and avatars.\n\n\nEpisode.getFullName()\n\n\nAdds a utility method to the \nEpisode\n service that returns a human readable patient name.\n\n\nPlugin.get_javascripts, Plugin.get_styles\n\n\nEnhances the API available for plugins to include javascript and css by adding methods on\n\nopal.core.plugins.OpalPlugin\n\n\n'element_type' argument for the form template tags\n\n\nNumeric database fields are now set as the html5 type=\"number\" when rendering\nthem with the forms templatetag library. This means on mobile devices it will\nbring up the numeric keypad. The element type can now be set via the template\ntag API with the 'element_type' argument.\n\n\nOPAL_LOGO_PATH\n\n\nThis new setting allows applications to set the path at which the app logo is served.\nIf \nOPAL_LOGO_PATH\n is set, the value is passed to the \n{% static %}\n templatetag to set\nthe \nsrc\n atribute of an image in the default application header and login screen.\n\n\nInactive episodes in PatientLists\n\n\nChanges the behaviour of \nopal.core.PatientList.to_dict\n to serialise inactive\nepisodes by default rather than filtering by Episode.active == True.\n\n\nopal.core.TaggedPatientList.to_dict\n continues to filter by Episode.active ==\nTrue by default.\n\n\nNotice of future removals\n\n\nThe context variables \nbrand_name\n \nsettings\n and \nextra_application\n in \nopal.views.IndexView\n\nare no longer helpful thanks to the settings context processor. These will be removed in\n0.9.0 and emit warnings until then.\n\n\nMisc changes\n\n\nAdds a new filter - \nunderscore-to-spaces\n for removing underscores from strings.\n\n\nThe options for \nSymptomComplex.duration\n have moved from the default form template to a choices\ndeclaration on the model. These are scheduled to move again to a lookuplist.\n\n\nThe default value of \nSubrecord.get_display_name\n now uses Django \nMeta.verbose_name\n.\n\n\nMinor fixes\n\n\nFixes a bug where the allergies form rendered the provisional field twice\n\n\nUpdates to the Dependency Graph\n\n\nUpgrades Font Awesome from 4.3.0 -\n 4.7.0\nUpgrades Jinja2 from 2.8 -\n 2.9.6\n\n\n0.8.1 (Minor Release)\n\n\nCookies for the future\n\n\nWe now use the \n$cookies\n api as part of moving to angular v1.5.8.\n\n\nThe default expiry of cookies is now a year in the future.\n\n\nThe cookie name previously stored as \nopal.lastPatientList\n is now\n\nopal.previousPatientList\n.\n\n\nPatients as a service\n\n\nPatient becomes a service in angular. This takes in a patient as loaded by the patient loader or another service. It casts the data to Episode or Item instances as appropriate.\n\n\nPatientList.get_queryset arguments\n\n\nPatientList.get_queryset() is now passed an extra keyword argument - \nuser\n.\nThis is the current \nUser\n object.\n\n\nOverriding default Menu Items behaviour\n\n\nThe \nget_menu_items\n method of Opal Application objects is now passed an extra keyword argument - \nuser\n.\nThis is the current \nUser\n object.\n\n\nThe templatetag application_menuitems now uses this method to render navigation menus, allowing dynamic\ncustomisation of menu contents based on user.\n\n\nRemovals\n\n\nOpal 0.8.1 removes some minor features which, to our knowledge are not used by any applications in active development.\n\n\n\n\nReopenEpisodeCtrl - applications may implement their own 're-open' episode flow, but Opal no longer handles this out of the box.\n\n\nSubrecord._bulk_serialise - this flag has been removed\n\n\n\n\nPending removals\n\n\nWe have re-named \nopal.core.views._build_json_response\n to \nopal.core.views.json_response\n. This will issue a\nwarning for the remainder of the 0.8.x branch, before being removed entirely in Opal 0.9.0.\n\n\nSubrecord List API\n\n\nWe have added a list method to the default Opal JSON API for subrecords - you may now obtain a list of all instances\nof a given subrecord from the API endpoint \n/api/v0.1/$api_name/\n.\n\n\nMisc Changes\n\n\nUpdates the custom \nUserAdmin\n so that the email, first and last name fields from the Django \nUser\n model\nare in the add user form not just the edit user form.\n\n\nThe default test runner generated by plugin scaffolding now uses \nopal.urls\n as the default url conf in the test settings. This allows you to test urls generated by Opal - for instance default form or record templates, or simply raw templates from our generic template view.\n\n\n0.8.0 (Major Release)\n\n\nPlugins\n\n\nPlugins have been refactored and are now \nDiscoverableFeatures\n. This should have no impact on existing\nplugins, however the functions \nopal.core.plugins.register\n and \nopal.core.plugins.plugins\n are slated for\nremoval in 0.9.0\n\n\nWhen creating new plugins we will place the plugin definition class in \nplugin.py\n rather than \n__init__.py\n\n\nopal.core.api.patient_from_pk\n\n\nA decorator that changes a method that is passed a pk, to a method that is passed a patient.\n\n\nToDictMixin._bulk_serialise\n\n\nAdds a flag to the to dict mixin to determine whether the item is serialised as part of \nEpisode/Patient.to_dict\n.\n\n\nFixes bugs in add many subrecord radio buttons\n\n\nPreviously multiple radio buttons for the same subrecord field on the same page would\nnot appear to the user to update correctly. This has now been fixed.\n\n\nAngular UI Libraries\n\n\n0.8.0 consolidates Angular UI libraries bundled with Opal. We have removed Angular Strap, and\nswitched all components using it to their Angular UI Bootstrap equivalents.\n\n\nThis is a breaking change.\n\n\nApplications taking advantage of the \nForms\n templatetag library should require no updates, but will see\nsome minor differences in visual style of widgets.\n\n\nDetailed upgrade guides for the components affected (Typeahead, Popover,\nTooltip, Datepicker, Timepicker) are available in the upgrade reference documentation.\n\n\nDefaults for Client Side subrecords\n\n\nWe pull through default values from subrecord fields into the Opal \nSchema\n and use those values when initializing the relevant\nItem instance for a new subrecord. This should greatly reduce the need to use custom Angular subrecord services to set defaults.\n\n\nChoices in form templatetags\n\n\nTemplate tags that use the 'field' attribute to point to a subrecord field will now infer a lookup list from the Choices of the field if it exists.\n\n\nNote unlike the traditional choices implementation only the last value of the choices is used and saved to the database\n\n\n  Colours = (\n    ('P', 'Purple'),\n    ('R', 'Red'),\n  )\n\n\n\n\nWhat is displayed to the user and saved to the database is 'Purple' or 'Red' respectively.\n\n\nelement name in template tags\n\n\nThe html attribute 'name' for form elements generated with the Opal \n{% forms %}\n templatetag library used to be inferred from the model name. Although this remains the default you can also set it with an angular expression:\n\n\n{% select field=\nDemographics.first_name\n element_name=\n...Your Angular expression...\n %}\n\n\n\n\nModel removals\n\n\nThe models \nTeam\n, \nGP\n, \nCommunityNurse\n and \nLocatedModel\n - marked for removal since 0.6.0\nhave now been removed.\n\n\nAs part of this change, the add episode modal previously available at\n\n/templates/modals/add_episode.html/\n is now not available at the url with a trailing slash.\nAny controllers attempting to open the modal e.g. custom list flows should update their\n\n$modal.open\n call to remove the trailing slash.\n\n\nPython 3\n\n\nOpal 0.8.0 is the first version of Opal to support Python 3. This has meant changing the default\nordering of \nPatientList\n instances to 0 rather than None.\n\n\nMoving forwards we expect all new code in Opal to be compatible both Python 2.7 / 3.4 / 3.5 / 3.6.\n\n\nThis introduces an explicit Opal dependency on the Six module for maintaining codebases that span\nPython 2.x and 3.x.\n\n\nTabbed Patient List Groups\n\n\nAdds the class \nopal.core.patient_lists.TabbedPatientListGroup\n which displays groups of related\nlists as tabs at the top of each member list.\n\n\nPatientList sort order\n\n\nTo enable custom sort orders for individual \nPatientList\ns we introduce the \ncomparator_service\n attribute.\nThis names an Angular service which will return a list of comparator functions.\n\n\nPatientList Arbitrary columns\n\n\nWe now explicitly enable columns in spreadhseet lists that are not tied to subrecords. These can be\nincluded in PatientList schema instances as explicit Column() entries.\n\n\nTemplate re-naming\n\n\nModal_base has now been moved into a folder called base_templates. Its also now got a form_modal_base and a two_column_form_modal_base.\nThe latter two templates add validation around saving.\n\n\nThe standard edit item models and others now inherit from the form_modal_base.\n\n\nAuthorization and permissions\n\n\nAll APIs should be permissioned with Django REST framework permission classes. The default implementation uses\nopal.core.api.LoginRequiredViewset, a standard DRF viewset that requires the user to be logged in.\n\n\nWe now require the user to be logged in for any use of the search functionality.\n\n\nAdded a custom interceptor that logs the user out if the we receive a 403 or 401 from the server\n\n\nForm Validation\n\n\nAdds the checkForm directive\n\n\ne.g.\n\n\nbutton check-form=\nform\n ng-click=\nsendDataToTheServer\nclick me\n/button\n\n\n\n\n\nThis adds default form submission behaviour to the a button. It will check if the form is valid, and if its not it will mark the button as disabled until it becomes valid.\n\n\nIt will also set the form as submitted.\n\n\nWe also now show the required error if the form has been submitted or if the field is dirty, so that the user doesn't get an ugly \"fill this field in now\" message when opening the modal/pathway but will get the error after they click submit.\n\n\nRemovals\n\n\nOpal 0.8.0 removes a number of un-used features that have been slated for removal for some time:\n\n\n\n\nOptions\n - both from the JSON API, and the Angular service.\n\n\nThe legacy APIs \n/api/v0.1/episode/admit\n and \n/api/v0.1/episode/refer\n.\n\n\nThe models \nGP\n, \nCommunityNurse\n and \nLocatedModel\n.\n\n\nopal.models.Tagging.import_from_reversion\n. This one-off classmethod on tagging was introduced to aid with the upgrade from Opal 4.x to 5.0 and has no further utility.\n\n\nThe \nstatic\n argument from the forms \ninput\n tag. Developers should move to the \nstatic\n tag.\n\n\nThe _modal option to set on subrecords. This is because we now use large modals across the board.\n\n\n\n\nMisc changes\n\n\nThe opal.core.api.EpisodeViewSet.create now expects tagging to be an object rather than a list, similar to how it details with demographics and location.\n\n\nThe API will no longer serialise the _ft or _fk_id fields of FreeTextOrForeignKey fields - these\nare internal implementation details of the server that are not useful on the client side.\n\n\nAdds a Unique Together constraint for (Tagging.user, Tagging.episode, Tagging.value)\n\n\nLook up lists now load in from individual apps. The look for a file at {{ app }}/data/lookuplists.json\n\n\nThe default admin url is now \n/admin/\n - rather than \n/admin/?\n this results in more readable\nadmin urls and is closer to what most applications do with the Django admin.\n\n\nThe roles field \nopal.models.UserProfile.roles\n has been updated to be \nblank=True\n. This allows the editing\nof users without specific roles assigned in the Django admin. Although this introduces no changes at the\ndatabase level, this does introduce a migration.\n\n\nUpdates to the Dependency Graph\n\n\nUpgrades angular to v1.5.8 (from 1.3.11) you can see their change log \nhere\n\n\nUpdates angular-cookies and angular-mocks to v1.5.8 (both from 1.3.11)\n\n\nUpdates angular-ui-select to 0.19.4 from 0.13.2\n\n\n0.7.5 (Minor Release)\n\n\nThe flow enter and exif functions now take an optional context argument. When called from PatientList or PatientDetail controllers this is the parent scope when the flow has been entered.\n\n\nNote: The current Flow API is likely to undergo substantial revision in Opal 0.9 / 0.10 do contact us on the mailing list if you are relying heavily upon it or would like to let us know your needs.\n\n\n0.7.4 (Minor Release)\n\n\nAdds  a past filter, future and past filters now take a\nboolean argument as to whether you should include today\n\n\n0.7.3 (Minor Release)\n\n\nFixes a bug whereby celery tasks are not autodiscovered - will have affected users of async extract functionality.\n\n\n0.7.2 (Minor Release)\n\n\nFixes a bug with the copy to category API not setting category name.\n\n\nRemoves the hangover use of options in the list of teams per episode in the patient list\n\n\n0.7.1 (Minor Release)\n\n\nCompletes the refactor of front end data, no longer using the \n/api/v0.1/options/\n API internally.\nThis is slated for removal in 0.8.0.\n\n\nUpdates DRF APIs - we now expect either Token or DjangoSession auth.\n\n\nFixes several small bugs with scaffolded applications -  the setting of \nSTATIC_ROOT\n and\n\nSECRET_KEY\n, generating forms for NullBooleanFields, requirements.txt.\n\n\nAdds an \naligned_pair\n templatetag to the \npanels\n library.\n\n\nUpdates the label for \nDemographics.birth_place\n to indicate that this should be a country.\n\n\nAdds the \nclipboard\n directive to give the user one click copy to clipboard.\n\n\nAdds a \ntag-select\n directive that renders a widget for editing the tags for an episode.\n\n\nAdds metadata to the scope for patient detail views\n\n\nUpdates to the Dependency Graph\n\n\n\n\nDjango Axes 1.4.0 -\n 1.7.0\n\n\n\n\n0.7.0 (Major Release)\n\n\nEpisode Categories\n\n\nRefactors EpisodeCategory to be a discoverable feature.\n\n\nRenames \nEpisode.category\n -\n \nEpisode.category_name\n.\n\n\nEpisode JSON API\n\n\nThe Restful Episode JSON API previously available at \n/episode/:pk/\n is now moved into\n\n/api/v0.1/episode/:pk/\n for consistency with the rest of our JSON APIs.\nThe Opal Angular layer has been updated to reflect this, and\nshould handle the transition seamlessly, but code calling the API directly should update\nto reflect the new URL.\n\n\nDefaults for records on the client side\n\n\nEstablishes a new way to define defaults for records initialized in Javascript without\nrequiring that we hard-code API names to defaults in a global namespace.\n\n\nUpdate to Javascript Signatures\n\n\nFlow.enter()\n and \nFlow.exit()\n now no longer take \noptions\n positional arguments - instead\nthe controllers they initialize have \nMetadata\n and \nReferencedata\n as optional resolves\narguments.\n\n\nAddEpisodeCtrl now no longer requires options as a resolves() option, but requires Referencedata\ninstead.\n\n\nMaxLength for form helpers\n\n\nThe \ninput\n form helper will now infer the max length of char fields from the max length of the\ndatabase field, and render relevant Angular directives.\n\n\nEpisodeDetail removed\n\n\nThe \nEpisodeDetailCtrl\n and \nEpisodeDetailMixin\n controller and service have been removed - these\nwere not used anywhere other than in the Wardround plugin, and redundant after enhancements to\nPatient Detail and Custom DetailViews in 0.6.\n\n\nAdditional utilities\n\n\nAdds a datetimepicker templatetag that will render widgets for a Datetime field including time.\n\n\nAdds a \ndate_of_birth_field\n templatetag that renders a date of birth field complete with inteligent\nvalidation. (Note this change also includes removing the old _partial/ template)\n\n\nUpdates dependency graph:\n\n\n\n\nDjango -\n 1.8.13\n\n\n\n\n0.6.0 (Major Release)\n\n\nDetail views\n\n\nMoves from episode oriented detail to patient oriented detail.\n(All episodes plus x-episode views are available from a patient detail screen)\n\n\nTagging\n\n\nAs a performance optimisation for the frequent access of historic tags, untagging\nan episode simply renders the tag inactive rather than deleting it and relying on\nDjango-Reversion for access to historical data.\n\n\nDate Formatting\n\n\nWe now expect 'd/m/y' date formatting by default.\n\n\nPatient lists\n\n\nLists are now declarative, and separate from teams. They are implemented as\nsubclasses of opal.core.patient_lists.PatientList.\n\n\nForms vs. Modals\n\n\nIntroduces a distinction between a form and a modal.\nBy default, we now use forms for subrecords, only overriding the modal if there\nis something we want to do differently specifically in the modal.\n\n\nCommand line tools\n\n\nAdds $opal checkout for switching between applications or application versions.\n\n\nModels ContextProcessor\n\n\nThe 'opal.context_processors.models' Context Processor will allow you to access your\nsubrecords from templates without having to explicitly load them in a view. In turn,\nthis allows patterns like:\n\n\n{% include models.Demographics.get_detail_template %}\n\n\n\nUpgrade instructions:\n\n\nFull upgrade instructions to work through any backwards incompatible changes are\nprovided in the Opal docs.\n\n\n0.5.5 (Minor Release)\n\n\nChanges the way old tags are handled.\n\n\nTags are no longer deleted episodes, rather they're marked as archived.\n\n\n0.5.4 (Minor Release)\n\n\n\n\nInclude local storage\n\n\n\n\n0.5.3 (Minor Release)\n\n\n\n\nSpeed up loading of the lookup lists\n\n\nFix pagination issues in search\n\n\nSpeed up loading of many to many fields\n\n\nIncrease test coverage\n\n\nAdd some extra help fields to {% forms %} helpers\n\n\nFixes bug with $rootScope.open_modal() where keystrokes were being intercepted\n\n\n\n\n0.5.2 (Minor Release)\n\n\nSpeed improvements on page load\nallow us to only show record panels if a record of that type exists\ndisable modal buttons while saving\n\n\n0.5.1 (Minor Release)\n\n\nMinor bug fixes\n\n\n0.5 (Major release)\n\n\nSearch\n\n\nComplete re-design of Search interface to provide a single search box on every page and pagination for resulta.\nPuts in place a pluggable interface that could be swapped out for e.g. ElasticSearch.\nNew Service for PatientSummary()\n\n\nAnalytics\n\n\nMoves Analytics integration into Opal core with the ability to blacklist pages that should never be reported\n\n\nList view\n\n\nRemoved old spreadsheet-style cell based navigation and moved to row-wise nav with clearer highlighting of the active row.\nUpdated scrolling and loading behaviour to snap to viewport and not display the page build.\n\n\nSubrecord metadata\n\n\nAdded four new utility fields to Patient and Episode subrecords:\n\n\ncreated_by, updated_by, created, updated\n\n\nSelect2 and list fields\n\n\nAdded support for select2 as an input widget and Subrecord fields that can be lists of things.\n\n\nAlso\n\n\nNumerous small bugfixes.\nRefactoring of the models package into a models module.\nUpdated Underscore.js -\n 1.8.3\nUpdated Angular.js -\n 1.3.11\n\n\n0.4.3 (Minor release)\n\n\nRefactors opal.models to be a models.py file rather than a package.\nAdds several improvements to forms helpers -\n Help argument, other argument to select.\n\n\nUpdates dependency graph:\n\n\n\n\nAngular-strap -\n 2.3.1\n\n\n\n\n0.4.2 (Minor release)\n\n\nUpgrades dependency graph:\n\n\n\n\nDjango -\n 1.8.3\n\n\nDjango-reversion -\n 1.8.7\n\n\njQuery -\n 1.11.3\n\n\nD3 -\n 3.5.6\n\n\nC4 -\n 0.4.10\n\n\n\n\nSouth has been removed, now using django migrations\n\n\n0.4.1 (Bugfix release)\n\n\nFixes some search results appearing duplicated.\n\n\n0.4 (Major release)\n\n\nNew Design\n\n\nCompletely re-designed UI following extensive user research and multiple iterations.\n\n\nManagementcommands and scaffolding\n\n\nFeatures the opal command line tool for common administrative tasks\nhttp://opal.openhealthcare.org.uk/docs/guides/command_line_tool/\n\n\n Form helpers templatetag library\n\n\nNew template library for consistent form controls in line with our new interface guidelines\nhttp://opal.openhealthcare.org.uk/docs/reference/form_templatetags/\n\n\nAPI Documentation\n\n\nOpal JSON APIs are now fully self-documenting for all updated instances\nhttp://opal.openhealthcare.org.uk/docs/guides/json_api/\n\n\n0.3 (Major release)\n\n\nBugfixes, significant flexibility in template customisability.\n\n\nMinor UI updates.\n\n\n0.2.2 (Bugfix release)\n\n\nNumerous small bugfixes.\n\n\nAdds the concept of undischarging patients.\n\n\n0.2.1\n\n\nNumerous small bugfixes.\n\n\n0.2.0\n\n\nSearch overhaul - introduces advanced searches.\n\n\n0.1.1\n\n\nInitial public release", 
            "title": "Changelog"
        }, 
        {
            "location": "/reference/CHANGELOG/#0100-major-release", 
            "text": "This is a major release with breaking changes from upstream dependencies.\nYou are almost certain to require changes to your application. Please see\nthe upgrade guide for further details.", 
            "title": "0.10.0 (Major Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#referencedata-in-new-applications", 
            "text": "Opal now includes core lookuplist data in an  opal.core.referencedata  plugin\nwhich is installed and loaded by default by the  startproject  scaffolding.", 
            "title": "Referencedata in new applications"
        }, 
        {
            "location": "/reference/CHANGELOG/#deletion-cascade-behaviour", 
            "text": "Opal 0.10 changes several behaviours related to cascading deletions which, despite\nbeing Django defaults, were confusing to users and developers in our use case.  When we delete and look up list instance, we no longer delete all subrecords that use\nthat instance. Instead we set the look up list instances name in the free text field on\nthe subrecord.  When you delete a user, it will no longer delete all related episodes and subrecords", 
            "title": "Deletion cascade behaviour"
        }, 
        {
            "location": "/reference/CHANGELOG/#episode-category-stages", 
            "text": "Episode categories now enforce a set of valid  Episode.stage  values. EpisodeCategory  now includes the  .get_stages()  and  .has_stage(stage)  methods,\nwhile  Episode  has a  set_stage  setter which is used by the UpdateFromDictMixin JSON API.", 
            "title": "Episode Category stages"
        }, 
        {
            "location": "/reference/CHANGELOG/#lookuplistslookuplists", 
            "text": "Adds the utility generator  lookuplists.lookuplists()  which wil yield every lookuplist\ncurrently available.", 
            "title": "lookuplists.lookuplists"
        }, 
        {
            "location": "/reference/CHANGELOG/#discoverablefilter", 
            "text": "Disoverable features now have a  filter  method which allows you to filter features\nwith matching attributes.", 
            "title": "Discoverable.filter()"
        }, 
        {
            "location": "/reference/CHANGELOG/#pathways-contextprocessor", 
            "text": "The 'opal.core.pathways.context_processors.pathways' Context Processor will allow you to\naccess your pathways from templates without having to explicitly load them in a view. In\nturn, this allows patterns like:  {% include pathways.YourPathway.get_display_name %}", 
            "title": "Pathways ContextProcessor"
        }, 
        {
            "location": "/reference/CHANGELOG/#missing-consistency-token-errors", 
            "text": ".update_from_dict()  will now raise the new error opal.core.errors.MissingConsistencyTokenError  if it is called without a consistency\ntoken when one is set on the model. Previously it would raise  APIError .  The JSON API will now return a more specific message in the response boday, explaining\nthat the problem is a missing consistency token.", 
            "title": "Missing consistency token errors"
        }, 
        {
            "location": "/reference/CHANGELOG/#dump_lookup_lists-many-files", 
            "text": "Adds the  --many-files  option to the  dump_lookup_lists  command which will write\neach installed lookup list to a separate file in the  ./data/lookuplists  directory\nof the application.", 
            "title": "dump_lookup_lists --many-files"
        }, 
        {
            "location": "/reference/CHANGELOG/#template-removals", 
            "text": "We remove a number of stale unused templates:   changelog.html  contact.html  extract_footer.html  tagging_detail.html  _helpers/inline_form.html  responsive/_phone_episode_list.html'  responsive/_tablet_episode_list.html", 
            "title": "Template removals"
        }, 
        {
            "location": "/reference/CHANGELOG/#removing-loginrequiredmixin", 
            "text": "As Django ships with a  LoginRequiredMixin  of its own we no longer roll our own\nin `opal.core.views.", 
            "title": "Removing LoginRequiredMixin"
        }, 
        {
            "location": "/reference/CHANGELOG/#testing-options", 
            "text": "Adds a  --failfast  option to the test harness to stop test runs on the first\nfailure.  If you are a plugin developer upgrading an existing plugin you will have to\nmanually add support for  --failfast  passthrough to your  runtests.py .  If you are a plugin developer upgrading an existing plugin you will have to\nmanually add support for  --failfast  passthrough to your  runtests.py .", 
            "title": "Testing options"
        }, 
        {
            "location": "/reference/CHANGELOG/#moves-scaffold-to-be-a-django-management-command", 
            "text": "The rest of the api is still the same but now\nwe run  python manage.py scaffold {my_app_name}", 
            "title": "Moves scaffold to be a django management command"
        }, 
        {
            "location": "/reference/CHANGELOG/#deprecations-completed", 
            "text": "As previously noted in console warnings, the Angular Episode service no longer\nsupports the  discharge_date ,  date_of_admission ,  date_of_episode  properties.\nThese were replaced by  .start  and  .end .", 
            "title": "Deprecations completed"
        }, 
        {
            "location": "/reference/CHANGELOG/#updates-to-the-dependency-graph", 
            "text": "Django: 1.8.13 -  1.10.8  Django Reversion: 1.8.7 -  1.10.2  Django Rest Framework: 3.2.2 -  3.4.7  Psycopg2: 2.5 -  2.7  Jinja2: 2.9.6 -  2.10  Ffs: 0.0.8.1 -  0.0.8.2  Requests: 2.7.0 -  2.18.4  django-celery: 3.1.17 -  3.2.2  celery: 3.1.19 -  3.1.25", 
            "title": "Updates to the Dependency Graph"
        }, 
        {
            "location": "/reference/CHANGELOG/#misc-changes", 
            "text": "Removes the undocumented  collapsed_multisave  tag from the  pathways  templatetag\nlibrary.  Adds a setting  OPAL_FAVICON_PATH  to specify the application Favicon to use.  Adds the  rows  option to the textarea template tag which just fills in the html textarea rows  attribute. Text areas are defaulted to 5 rows (the same as before).  Configures the setting  CSRF_FAILURE_VIEW  to use the bundled  opal.views.csrf_failure  view.  Adds the utility function  opal.utils.get . Similar to the  getattr  builtin,  get  looks\nfor a method named  get_$attr  and will call that if it exists.  Adds the method  .get_absolute_url()  to  opal.core.pathways.Pathway  and opal.core.patient_lists.PatientList .  Adds the Opal error  SignatureError .  Pathway slugs may now include hyphens as well as numbers, lower case letters and underscores.  Bugfix: in edit_item.js $scope.episode_category is now set from episode.category_name\nas opposed to episode.category (which was always null)  Fixes some instances of progressbars not being reset if unexpected error states\noccur.  Improves the rendering of patient detail pages where no patient with the ID from\nroute params exits. (Displays a polite message instead of erroring.)  Incorrect pluralisation of subrecord names in the Admin view has been fixed. (Migrations\nwill have to be run in all models which extend the changed core Opal models (this is due\nto a minor upstream Django bug)  Minor change to the diagnosis form.", 
            "title": "Misc Changes"
        }, 
        {
            "location": "/reference/CHANGELOG/#090-major-release", 
            "text": "", 
            "title": "0.9.0 (Major Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#good-bye-date_of_episode-discharge_date-date_of_admission", 
            "text": "And hello  episode.start  and  episode.end . These fields on the  Episode  model\nreplace the multiple ways of recording Episode duration in Opal.  There is a migration that sets  start  to date_of_episode if it  exists, otherwise\nit uses date of admission.  end  will be date_of_episode if it exists, otherwise it will use discharge_date.  Note that this means we no longer refer to start and end properties on the\nEpisode category. If you override  start  and  end  in a custom episode category\nyou should update to use the Episode model fields. This logic should be moved into\nyour flows and you'll need to put in a migration to populate existing\nepisodes.  We also remove the episode fields  date_of_episode   discharge_date , and date_of_admission .\nWarning: Backwards migrations will not migrate back to  date_of_episode  but to\na admission and discharge. Take backups before running these migrations!  The fields  start  and  end  are both cast to moments (rather than raw js Dates) on\nepisode.initialisation", 
            "title": "Good bye date_of_episode, discharge_date, date_of_admission"
        }, 
        {
            "location": "/reference/CHANGELOG/#pathway", 
            "text": "Moves the opal-pathway module into the opal core. Pathways is an extensible way\nof creating forms that involve multiple subrecords.", 
            "title": "Pathway"
        }, 
        {
            "location": "/reference/CHANGELOG/#weve-got-time-on-our-side", 
            "text": "Adds in the {% timepicker %} template tag, that follows the same convention as\nthe other template tags, ie {% timepicker field=\"Dinner.time\" %}", 
            "title": "We've got time on our side"
        }, 
        {
            "location": "/reference/CHANGELOG/#removes-a-js-global-declaration-of-categories", 
            "text": "Previously we declared CATEGORIES globally. This has now been removed", 
            "title": "Removes a js global declaration of categories"
        }, 
        {
            "location": "/reference/CHANGELOG/#order-order", 
            "text": "Episodes in the patient list are now ordered by start, first_name and surname", 
            "title": "Order Order"
        }, 
        {
            "location": "/reference/CHANGELOG/#theming-support", 
            "text": "Improvements and better documentation and guides for theming applications. Particularly\nof note are changes to  opal.html  and  base.html , as well as the addition of the static_page.html  template.  This version also includes extensive improved support for customising the templates that\ndisplay patient lists, detail views, menus and forms amongst other things.  For full documentation, consult the theming guide in the documentation.", 
            "title": "Theming support"
        }, 
        {
            "location": "/reference/CHANGELOG/#makes-search-fully-pluggable", 
            "text": "Search is now completely pluggable, you need to have  some  angular controller\ncalled SearchCtrl, but apart from that you can plugin your own implementation.", 
            "title": "Makes search fully pluggable"
        }, 
        {
            "location": "/reference/CHANGELOG/#exclude-prefixes-now-work-on-actual-paths", 
            "text": "Previously they only worked with angular paths, now they work\nwith a combination of actual paths and angular url paths (e.g. /search/#/extract)", 
            "title": "Exclude prefixes now work on actual paths"
        }, 
        {
            "location": "/reference/CHANGELOG/#misc-changes_1", 
            "text": "Add the allow_add_patient and allow_edit_teams options to the patient lists.  We added support for a  --file  or  -f  option for the  load_lookup_lists  command which\nallows the user to specify a particular file outside of the default locations.  The default  Location  record display template will no longer include references\nto  Episode.start . and  Episode.stop  labelled as admisssion and discharge to support\nthe majority case where an episode relates to something other than an inpatient episode!  Applications wishing to retaint this functionality should update their own temaplates\nto display start/stop details.", 
            "title": "Misc Changes"
        }, 
        {
            "location": "/reference/CHANGELOG/#removes-deprecated-functionality-in-referencedata-metadata-userprofile-and-recordloader", 
            "text": "Previously these would make their http request when imported into a file. They now require you to call .load()\nfor them to return the promise that loads in their respective data.", 
            "title": "Removes Deprecated functionality in ReferenceData, Metadata, UserProfile and recordLoader"
        }, 
        {
            "location": "/reference/CHANGELOG/#083-minor-release", 
            "text": "", 
            "title": "0.8.3 (Minor Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#opallogconfidentialemailer", 
            "text": "Adds a custom email logger. This enables Django error emails which remove any confidential patient data.  Also adds in the karma config to the MANIFEST.in so that we include the karma configs on pip install. It also moves it\nto \"opal/tests/js_config/karma_defaults.js\".", 
            "title": "opal.log.ConfidentialEmailer"
        }, 
        {
            "location": "/reference/CHANGELOG/#082-minor-release", 
            "text": "", 
            "title": "0.8.2 (Minor Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#opal_location-is-added-as-a-system-variable-when-running-js-tests", 
            "text": "If you run opal test js, your karma config is now run in an environment that has\naccess to the OPAL_LOCATION variable which points to the opal parent directory.", 
            "title": "OPAL_LOCATION is added as a system variable when running js tests"
        }, 
        {
            "location": "/reference/CHANGELOG/#a-data-dictionary-in-the-extract", 
            "text": "The Extract zip file has a data dictionary with human readable metadata about each field.", 
            "title": "A Data Dictionary In The Extract"
        }, 
        {
            "location": "/reference/CHANGELOG/#enhanced-application-menus", 
            "text": "The application menu API, previously python dicts stored in attributes on either plugin or\napplication subclasses, now consists of the new  opal.core.menus.MenuItem  class, enabling\nenhanced customisation and flexibility.", 
            "title": "Enhanced Application menus"
        }, 
        {
            "location": "/reference/CHANGELOG/#put-to-the-episode-api-returns-the-episode-with-all-its-subrecords", 
            "text": "Previously it only returned the episode. Now it matches the episode create api end point", 
            "title": "PUT to the episode API returns the episode with all its subrecords"
        }, 
        {
            "location": "/reference/CHANGELOG/#episodepatient-links-in-admin", 
            "text": "In the admin, episodes and patients lists now have links to the patient detail pages.", 
            "title": "Episode/Patient links in admin"
        }, 
        {
            "location": "/reference/CHANGELOG/#user-data-for-the-client", 
            "text": "Adds a  User  Angular service that enables applications to use user data.\nAlso adds some directives to make it easy to render User names and avatars.", 
            "title": "User data for the client"
        }, 
        {
            "location": "/reference/CHANGELOG/#episodegetfullname", 
            "text": "Adds a utility method to the  Episode  service that returns a human readable patient name.", 
            "title": "Episode.getFullName()"
        }, 
        {
            "location": "/reference/CHANGELOG/#pluginget_javascripts-pluginget_styles", 
            "text": "Enhances the API available for plugins to include javascript and css by adding methods on opal.core.plugins.OpalPlugin", 
            "title": "Plugin.get_javascripts, Plugin.get_styles"
        }, 
        {
            "location": "/reference/CHANGELOG/#element_type-argument-for-the-form-template-tags", 
            "text": "Numeric database fields are now set as the html5 type=\"number\" when rendering\nthem with the forms templatetag library. This means on mobile devices it will\nbring up the numeric keypad. The element type can now be set via the template\ntag API with the 'element_type' argument.", 
            "title": "'element_type' argument for the form template tags"
        }, 
        {
            "location": "/reference/CHANGELOG/#opal_logo_path", 
            "text": "This new setting allows applications to set the path at which the app logo is served.\nIf  OPAL_LOGO_PATH  is set, the value is passed to the  {% static %}  templatetag to set\nthe  src  atribute of an image in the default application header and login screen.", 
            "title": "OPAL_LOGO_PATH"
        }, 
        {
            "location": "/reference/CHANGELOG/#inactive-episodes-in-patientlists", 
            "text": "Changes the behaviour of  opal.core.PatientList.to_dict  to serialise inactive\nepisodes by default rather than filtering by Episode.active == True.  opal.core.TaggedPatientList.to_dict  continues to filter by Episode.active ==\nTrue by default.", 
            "title": "Inactive episodes in PatientLists"
        }, 
        {
            "location": "/reference/CHANGELOG/#notice-of-future-removals", 
            "text": "The context variables  brand_name   settings  and  extra_application  in  opal.views.IndexView \nare no longer helpful thanks to the settings context processor. These will be removed in\n0.9.0 and emit warnings until then.", 
            "title": "Notice of future removals"
        }, 
        {
            "location": "/reference/CHANGELOG/#misc-changes_2", 
            "text": "Adds a new filter -  underscore-to-spaces  for removing underscores from strings.  The options for  SymptomComplex.duration  have moved from the default form template to a choices\ndeclaration on the model. These are scheduled to move again to a lookuplist.  The default value of  Subrecord.get_display_name  now uses Django  Meta.verbose_name .", 
            "title": "Misc changes"
        }, 
        {
            "location": "/reference/CHANGELOG/#minor-fixes", 
            "text": "Fixes a bug where the allergies form rendered the provisional field twice", 
            "title": "Minor fixes"
        }, 
        {
            "location": "/reference/CHANGELOG/#updates-to-the-dependency-graph_1", 
            "text": "Upgrades Font Awesome from 4.3.0 -  4.7.0\nUpgrades Jinja2 from 2.8 -  2.9.6", 
            "title": "Updates to the Dependency Graph"
        }, 
        {
            "location": "/reference/CHANGELOG/#081-minor-release", 
            "text": "", 
            "title": "0.8.1 (Minor Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#cookies-for-the-future", 
            "text": "We now use the  $cookies  api as part of moving to angular v1.5.8.  The default expiry of cookies is now a year in the future.  The cookie name previously stored as  opal.lastPatientList  is now opal.previousPatientList .", 
            "title": "Cookies for the future"
        }, 
        {
            "location": "/reference/CHANGELOG/#patients-as-a-service", 
            "text": "Patient becomes a service in angular. This takes in a patient as loaded by the patient loader or another service. It casts the data to Episode or Item instances as appropriate.", 
            "title": "Patients as a service"
        }, 
        {
            "location": "/reference/CHANGELOG/#patientlistget_queryset-arguments", 
            "text": "PatientList.get_queryset() is now passed an extra keyword argument -  user .\nThis is the current  User  object.", 
            "title": "PatientList.get_queryset arguments"
        }, 
        {
            "location": "/reference/CHANGELOG/#overriding-default-menu-items-behaviour", 
            "text": "The  get_menu_items  method of Opal Application objects is now passed an extra keyword argument -  user .\nThis is the current  User  object.  The templatetag application_menuitems now uses this method to render navigation menus, allowing dynamic\ncustomisation of menu contents based on user.", 
            "title": "Overriding default Menu Items behaviour"
        }, 
        {
            "location": "/reference/CHANGELOG/#removals", 
            "text": "Opal 0.8.1 removes some minor features which, to our knowledge are not used by any applications in active development.   ReopenEpisodeCtrl - applications may implement their own 're-open' episode flow, but Opal no longer handles this out of the box.  Subrecord._bulk_serialise - this flag has been removed", 
            "title": "Removals"
        }, 
        {
            "location": "/reference/CHANGELOG/#pending-removals", 
            "text": "We have re-named  opal.core.views._build_json_response  to  opal.core.views.json_response . This will issue a\nwarning for the remainder of the 0.8.x branch, before being removed entirely in Opal 0.9.0.", 
            "title": "Pending removals"
        }, 
        {
            "location": "/reference/CHANGELOG/#subrecord-list-api", 
            "text": "We have added a list method to the default Opal JSON API for subrecords - you may now obtain a list of all instances\nof a given subrecord from the API endpoint  /api/v0.1/$api_name/ .", 
            "title": "Subrecord List API"
        }, 
        {
            "location": "/reference/CHANGELOG/#misc-changes_3", 
            "text": "Updates the custom  UserAdmin  so that the email, first and last name fields from the Django  User  model\nare in the add user form not just the edit user form.  The default test runner generated by plugin scaffolding now uses  opal.urls  as the default url conf in the test settings. This allows you to test urls generated by Opal - for instance default form or record templates, or simply raw templates from our generic template view.", 
            "title": "Misc Changes"
        }, 
        {
            "location": "/reference/CHANGELOG/#080-major-release", 
            "text": "", 
            "title": "0.8.0 (Major Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#plugins", 
            "text": "Plugins have been refactored and are now  DiscoverableFeatures . This should have no impact on existing\nplugins, however the functions  opal.core.plugins.register  and  opal.core.plugins.plugins  are slated for\nremoval in 0.9.0  When creating new plugins we will place the plugin definition class in  plugin.py  rather than  __init__.py", 
            "title": "Plugins"
        }, 
        {
            "location": "/reference/CHANGELOG/#opalcoreapipatient_from_pk", 
            "text": "A decorator that changes a method that is passed a pk, to a method that is passed a patient.", 
            "title": "opal.core.api.patient_from_pk"
        }, 
        {
            "location": "/reference/CHANGELOG/#todictmixin_bulk_serialise", 
            "text": "Adds a flag to the to dict mixin to determine whether the item is serialised as part of  Episode/Patient.to_dict .", 
            "title": "ToDictMixin._bulk_serialise"
        }, 
        {
            "location": "/reference/CHANGELOG/#fixes-bugs-in-add-many-subrecord-radio-buttons", 
            "text": "Previously multiple radio buttons for the same subrecord field on the same page would\nnot appear to the user to update correctly. This has now been fixed.", 
            "title": "Fixes bugs in add many subrecord radio buttons"
        }, 
        {
            "location": "/reference/CHANGELOG/#angular-ui-libraries", 
            "text": "0.8.0 consolidates Angular UI libraries bundled with Opal. We have removed Angular Strap, and\nswitched all components using it to their Angular UI Bootstrap equivalents.  This is a breaking change.  Applications taking advantage of the  Forms  templatetag library should require no updates, but will see\nsome minor differences in visual style of widgets.  Detailed upgrade guides for the components affected (Typeahead, Popover,\nTooltip, Datepicker, Timepicker) are available in the upgrade reference documentation.", 
            "title": "Angular UI Libraries"
        }, 
        {
            "location": "/reference/CHANGELOG/#defaults-for-client-side-subrecords", 
            "text": "We pull through default values from subrecord fields into the Opal  Schema  and use those values when initializing the relevant\nItem instance for a new subrecord. This should greatly reduce the need to use custom Angular subrecord services to set defaults.", 
            "title": "Defaults for Client Side subrecords"
        }, 
        {
            "location": "/reference/CHANGELOG/#choices-in-form-templatetags", 
            "text": "Template tags that use the 'field' attribute to point to a subrecord field will now infer a lookup list from the Choices of the field if it exists.  Note unlike the traditional choices implementation only the last value of the choices is used and saved to the database    Colours = (\n    ('P', 'Purple'),\n    ('R', 'Red'),\n  )  What is displayed to the user and saved to the database is 'Purple' or 'Red' respectively.", 
            "title": "Choices in form templatetags"
        }, 
        {
            "location": "/reference/CHANGELOG/#element-name-in-template-tags", 
            "text": "The html attribute 'name' for form elements generated with the Opal  {% forms %}  templatetag library used to be inferred from the model name. Although this remains the default you can also set it with an angular expression:  {% select field= Demographics.first_name  element_name= ...Your Angular expression...  %}", 
            "title": "element name in template tags"
        }, 
        {
            "location": "/reference/CHANGELOG/#model-removals", 
            "text": "The models  Team ,  GP ,  CommunityNurse  and  LocatedModel  - marked for removal since 0.6.0\nhave now been removed.  As part of this change, the add episode modal previously available at /templates/modals/add_episode.html/  is now not available at the url with a trailing slash.\nAny controllers attempting to open the modal e.g. custom list flows should update their $modal.open  call to remove the trailing slash.", 
            "title": "Model removals"
        }, 
        {
            "location": "/reference/CHANGELOG/#python-3", 
            "text": "Opal 0.8.0 is the first version of Opal to support Python 3. This has meant changing the default\nordering of  PatientList  instances to 0 rather than None.  Moving forwards we expect all new code in Opal to be compatible both Python 2.7 / 3.4 / 3.5 / 3.6.  This introduces an explicit Opal dependency on the Six module for maintaining codebases that span\nPython 2.x and 3.x.", 
            "title": "Python 3"
        }, 
        {
            "location": "/reference/CHANGELOG/#tabbed-patient-list-groups", 
            "text": "Adds the class  opal.core.patient_lists.TabbedPatientListGroup  which displays groups of related\nlists as tabs at the top of each member list.", 
            "title": "Tabbed Patient List Groups"
        }, 
        {
            "location": "/reference/CHANGELOG/#patientlist-sort-order", 
            "text": "To enable custom sort orders for individual  PatientList s we introduce the  comparator_service  attribute.\nThis names an Angular service which will return a list of comparator functions.", 
            "title": "PatientList sort order"
        }, 
        {
            "location": "/reference/CHANGELOG/#patientlist-arbitrary-columns", 
            "text": "We now explicitly enable columns in spreadhseet lists that are not tied to subrecords. These can be\nincluded in PatientList schema instances as explicit Column() entries.", 
            "title": "PatientList Arbitrary columns"
        }, 
        {
            "location": "/reference/CHANGELOG/#template-re-naming", 
            "text": "Modal_base has now been moved into a folder called base_templates. Its also now got a form_modal_base and a two_column_form_modal_base.\nThe latter two templates add validation around saving.  The standard edit item models and others now inherit from the form_modal_base.", 
            "title": "Template re-naming"
        }, 
        {
            "location": "/reference/CHANGELOG/#authorization-and-permissions", 
            "text": "All APIs should be permissioned with Django REST framework permission classes. The default implementation uses\nopal.core.api.LoginRequiredViewset, a standard DRF viewset that requires the user to be logged in.  We now require the user to be logged in for any use of the search functionality.  Added a custom interceptor that logs the user out if the we receive a 403 or 401 from the server", 
            "title": "Authorization and permissions"
        }, 
        {
            "location": "/reference/CHANGELOG/#form-validation", 
            "text": "Adds the checkForm directive  e.g.  button check-form= form  ng-click= sendDataToTheServer click me /button   This adds default form submission behaviour to the a button. It will check if the form is valid, and if its not it will mark the button as disabled until it becomes valid.  It will also set the form as submitted.  We also now show the required error if the form has been submitted or if the field is dirty, so that the user doesn't get an ugly \"fill this field in now\" message when opening the modal/pathway but will get the error after they click submit.", 
            "title": "Form Validation"
        }, 
        {
            "location": "/reference/CHANGELOG/#removals_1", 
            "text": "Opal 0.8.0 removes a number of un-used features that have been slated for removal for some time:   Options  - both from the JSON API, and the Angular service.  The legacy APIs  /api/v0.1/episode/admit  and  /api/v0.1/episode/refer .  The models  GP ,  CommunityNurse  and  LocatedModel .  opal.models.Tagging.import_from_reversion . This one-off classmethod on tagging was introduced to aid with the upgrade from Opal 4.x to 5.0 and has no further utility.  The  static  argument from the forms  input  tag. Developers should move to the  static  tag.  The _modal option to set on subrecords. This is because we now use large modals across the board.", 
            "title": "Removals"
        }, 
        {
            "location": "/reference/CHANGELOG/#misc-changes_4", 
            "text": "The opal.core.api.EpisodeViewSet.create now expects tagging to be an object rather than a list, similar to how it details with demographics and location.  The API will no longer serialise the _ft or _fk_id fields of FreeTextOrForeignKey fields - these\nare internal implementation details of the server that are not useful on the client side.  Adds a Unique Together constraint for (Tagging.user, Tagging.episode, Tagging.value)  Look up lists now load in from individual apps. The look for a file at {{ app }}/data/lookuplists.json  The default admin url is now  /admin/  - rather than  /admin/?  this results in more readable\nadmin urls and is closer to what most applications do with the Django admin.  The roles field  opal.models.UserProfile.roles  has been updated to be  blank=True . This allows the editing\nof users without specific roles assigned in the Django admin. Although this introduces no changes at the\ndatabase level, this does introduce a migration.", 
            "title": "Misc changes"
        }, 
        {
            "location": "/reference/CHANGELOG/#updates-to-the-dependency-graph_2", 
            "text": "Upgrades angular to v1.5.8 (from 1.3.11) you can see their change log  here  Updates angular-cookies and angular-mocks to v1.5.8 (both from 1.3.11)  Updates angular-ui-select to 0.19.4 from 0.13.2", 
            "title": "Updates to the Dependency Graph"
        }, 
        {
            "location": "/reference/CHANGELOG/#075-minor-release", 
            "text": "The flow enter and exif functions now take an optional context argument. When called from PatientList or PatientDetail controllers this is the parent scope when the flow has been entered.  Note: The current Flow API is likely to undergo substantial revision in Opal 0.9 / 0.10 do contact us on the mailing list if you are relying heavily upon it or would like to let us know your needs.", 
            "title": "0.7.5 (Minor Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#074-minor-release", 
            "text": "Adds  a past filter, future and past filters now take a\nboolean argument as to whether you should include today", 
            "title": "0.7.4 (Minor Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#073-minor-release", 
            "text": "Fixes a bug whereby celery tasks are not autodiscovered - will have affected users of async extract functionality.", 
            "title": "0.7.3 (Minor Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#072-minor-release", 
            "text": "Fixes a bug with the copy to category API not setting category name.  Removes the hangover use of options in the list of teams per episode in the patient list", 
            "title": "0.7.2 (Minor Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#071-minor-release", 
            "text": "Completes the refactor of front end data, no longer using the  /api/v0.1/options/  API internally.\nThis is slated for removal in 0.8.0.  Updates DRF APIs - we now expect either Token or DjangoSession auth.  Fixes several small bugs with scaffolded applications -  the setting of  STATIC_ROOT  and SECRET_KEY , generating forms for NullBooleanFields, requirements.txt.  Adds an  aligned_pair  templatetag to the  panels  library.  Updates the label for  Demographics.birth_place  to indicate that this should be a country.  Adds the  clipboard  directive to give the user one click copy to clipboard.  Adds a  tag-select  directive that renders a widget for editing the tags for an episode.  Adds metadata to the scope for patient detail views", 
            "title": "0.7.1 (Minor Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#updates-to-the-dependency-graph_3", 
            "text": "Django Axes 1.4.0 -  1.7.0", 
            "title": "Updates to the Dependency Graph"
        }, 
        {
            "location": "/reference/CHANGELOG/#070-major-release", 
            "text": "", 
            "title": "0.7.0 (Major Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#episode-categories", 
            "text": "Refactors EpisodeCategory to be a discoverable feature.  Renames  Episode.category  -   Episode.category_name .", 
            "title": "Episode Categories"
        }, 
        {
            "location": "/reference/CHANGELOG/#episode-json-api", 
            "text": "The Restful Episode JSON API previously available at  /episode/:pk/  is now moved into /api/v0.1/episode/:pk/  for consistency with the rest of our JSON APIs.\nThe Opal Angular layer has been updated to reflect this, and\nshould handle the transition seamlessly, but code calling the API directly should update\nto reflect the new URL.", 
            "title": "Episode JSON API"
        }, 
        {
            "location": "/reference/CHANGELOG/#defaults-for-records-on-the-client-side", 
            "text": "Establishes a new way to define defaults for records initialized in Javascript without\nrequiring that we hard-code API names to defaults in a global namespace.", 
            "title": "Defaults for records on the client side"
        }, 
        {
            "location": "/reference/CHANGELOG/#update-to-javascript-signatures", 
            "text": "Flow.enter()  and  Flow.exit()  now no longer take  options  positional arguments - instead\nthe controllers they initialize have  Metadata  and  Referencedata  as optional resolves\narguments.  AddEpisodeCtrl now no longer requires options as a resolves() option, but requires Referencedata\ninstead.", 
            "title": "Update to Javascript Signatures"
        }, 
        {
            "location": "/reference/CHANGELOG/#maxlength-for-form-helpers", 
            "text": "The  input  form helper will now infer the max length of char fields from the max length of the\ndatabase field, and render relevant Angular directives.", 
            "title": "MaxLength for form helpers"
        }, 
        {
            "location": "/reference/CHANGELOG/#episodedetail-removed", 
            "text": "The  EpisodeDetailCtrl  and  EpisodeDetailMixin  controller and service have been removed - these\nwere not used anywhere other than in the Wardround plugin, and redundant after enhancements to\nPatient Detail and Custom DetailViews in 0.6.", 
            "title": "EpisodeDetail removed"
        }, 
        {
            "location": "/reference/CHANGELOG/#additional-utilities", 
            "text": "Adds a datetimepicker templatetag that will render widgets for a Datetime field including time.  Adds a  date_of_birth_field  templatetag that renders a date of birth field complete with inteligent\nvalidation. (Note this change also includes removing the old _partial/ template)  Updates dependency graph:   Django -  1.8.13", 
            "title": "Additional utilities"
        }, 
        {
            "location": "/reference/CHANGELOG/#060-major-release", 
            "text": "Detail views  Moves from episode oriented detail to patient oriented detail.\n(All episodes plus x-episode views are available from a patient detail screen)  Tagging  As a performance optimisation for the frequent access of historic tags, untagging\nan episode simply renders the tag inactive rather than deleting it and relying on\nDjango-Reversion for access to historical data.  Date Formatting  We now expect 'd/m/y' date formatting by default.  Patient lists  Lists are now declarative, and separate from teams. They are implemented as\nsubclasses of opal.core.patient_lists.PatientList.  Forms vs. Modals  Introduces a distinction between a form and a modal.\nBy default, we now use forms for subrecords, only overriding the modal if there\nis something we want to do differently specifically in the modal.  Command line tools  Adds $opal checkout for switching between applications or application versions.", 
            "title": "0.6.0 (Major Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#models-contextprocessor", 
            "text": "The 'opal.context_processors.models' Context Processor will allow you to access your\nsubrecords from templates without having to explicitly load them in a view. In turn,\nthis allows patterns like:  {% include models.Demographics.get_detail_template %}", 
            "title": "Models ContextProcessor"
        }, 
        {
            "location": "/reference/CHANGELOG/#upgrade-instructions", 
            "text": "Full upgrade instructions to work through any backwards incompatible changes are\nprovided in the Opal docs.", 
            "title": "Upgrade instructions:"
        }, 
        {
            "location": "/reference/CHANGELOG/#055-minor-release", 
            "text": "Changes the way old tags are handled.  Tags are no longer deleted episodes, rather they're marked as archived.", 
            "title": "0.5.5 (Minor Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#054-minor-release", 
            "text": "Include local storage", 
            "title": "0.5.4 (Minor Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#053-minor-release", 
            "text": "Speed up loading of the lookup lists  Fix pagination issues in search  Speed up loading of many to many fields  Increase test coverage  Add some extra help fields to {% forms %} helpers  Fixes bug with $rootScope.open_modal() where keystrokes were being intercepted", 
            "title": "0.5.3 (Minor Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#052-minor-release", 
            "text": "Speed improvements on page load\nallow us to only show record panels if a record of that type exists\ndisable modal buttons while saving", 
            "title": "0.5.2 (Minor Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#051-minor-release", 
            "text": "Minor bug fixes", 
            "title": "0.5.1 (Minor Release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#05-major-release", 
            "text": "Search  Complete re-design of Search interface to provide a single search box on every page and pagination for resulta.\nPuts in place a pluggable interface that could be swapped out for e.g. ElasticSearch.\nNew Service for PatientSummary()  Analytics  Moves Analytics integration into Opal core with the ability to blacklist pages that should never be reported  List view  Removed old spreadsheet-style cell based navigation and moved to row-wise nav with clearer highlighting of the active row.\nUpdated scrolling and loading behaviour to snap to viewport and not display the page build.  Subrecord metadata  Added four new utility fields to Patient and Episode subrecords:  created_by, updated_by, created, updated  Select2 and list fields  Added support for select2 as an input widget and Subrecord fields that can be lists of things.  Also  Numerous small bugfixes.\nRefactoring of the models package into a models module.\nUpdated Underscore.js -  1.8.3\nUpdated Angular.js -  1.3.11", 
            "title": "0.5 (Major release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#043-minor-release", 
            "text": "Refactors opal.models to be a models.py file rather than a package.\nAdds several improvements to forms helpers -  Help argument, other argument to select.  Updates dependency graph:   Angular-strap -  2.3.1", 
            "title": "0.4.3 (Minor release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#042-minor-release", 
            "text": "Upgrades dependency graph:   Django -  1.8.3  Django-reversion -  1.8.7  jQuery -  1.11.3  D3 -  3.5.6  C4 -  0.4.10   South has been removed, now using django migrations", 
            "title": "0.4.2 (Minor release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#041-bugfix-release", 
            "text": "Fixes some search results appearing duplicated.", 
            "title": "0.4.1 (Bugfix release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#04-major-release", 
            "text": "New Design  Completely re-designed UI following extensive user research and multiple iterations.  Managementcommands and scaffolding  Features the opal command line tool for common administrative tasks\nhttp://opal.openhealthcare.org.uk/docs/guides/command_line_tool/   Form helpers templatetag library  New template library for consistent form controls in line with our new interface guidelines\nhttp://opal.openhealthcare.org.uk/docs/reference/form_templatetags/  API Documentation  Opal JSON APIs are now fully self-documenting for all updated instances\nhttp://opal.openhealthcare.org.uk/docs/guides/json_api/", 
            "title": "0.4 (Major release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#03-major-release", 
            "text": "Bugfixes, significant flexibility in template customisability.  Minor UI updates.", 
            "title": "0.3 (Major release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#022-bugfix-release", 
            "text": "Numerous small bugfixes.  Adds the concept of undischarging patients.", 
            "title": "0.2.2 (Bugfix release)"
        }, 
        {
            "location": "/reference/CHANGELOG/#021", 
            "text": "Numerous small bugfixes.", 
            "title": "0.2.1"
        }, 
        {
            "location": "/reference/CHANGELOG/#020", 
            "text": "Search overhaul - introduces advanced searches.", 
            "title": "0.2.0"
        }, 
        {
            "location": "/reference/CHANGELOG/#011", 
            "text": "Initial public release", 
            "title": "0.1.1"
        }, 
        {
            "location": "/reference/testing/", 
            "text": "Automated Testing\n\n\nBuilt on top of Django and Angular, Opal applications have great support for automated testing.\n\n\nOpal provides some utilities to make testing your application even easier.\n\n\nCommand Line test runner\n\n\nThe \nopal\n command line tool has a \ntest\n command which will run unittests for both the server\nand client side components of your application.\n\n\nJavascript testing\n\n\nBy default, we recommend using Jasmine and Karma to test your javascript code.\n\n\nOf course you can use any test framework you choose, although Opal doesn't currently ship with\nhelpers for any other frameworks.\n\n\n\nInstalling javascript testing tools\n\n\nTo installing Karma, Jasmine and Phantomjs in a local directory:\n\n\nnpm install jasmine-core karma karma-coverage karma-jasmine karma-phantomjs-launcher\n\n\n\n\nSetting up the karma environment for your application\n\n\nIf you'd like to run karma tests, Opal ships with a function to give you a default karma config.\n\n\nIn your karma config just \nrequire('[[ path to opal ]]/config/karma_defaults.js')\n\n\nThe function takes in the files you want to include and runs karma tests on them.\n\n\n// config/karma.config.js\n\nmodule.exports = function(config){\n  var opalPath = '../../opal';\n\n  var karmaDefaults = require(opalPath + '/config/karma_defaults.js');\n  var baseDir = __dirname + '/..';\n  var includedFiles = [\n     ...\n  ];\n\n  var defaultConfig = karmaDefaults(includedFiles, baseDir);\n  config.set(defaultConfig);\n};\n\n\n\n\nIf run from opal test js, we set the path to opal as an env variable called\nOPAL_LOCATION\n\n\nTest Coverage\n\n\nThe Opal test runner has a \n-c\n option which runs coverage reports for both Python and\nJavascript code:\n\n\nopal test -c\n\n\n\n\nPython test coverage uses the \ncoverage\n tool and you may want to set include/excludes in\na \n.coveragerc\n.\n\n\nJavascript test files to be reported on should be passed as an extra argument to \nkarmaDefaults\n:\n\n\n  var coverageFiles = [\n     ...\n  ];\n  var defaultConfig = karmaDefaults(includedFiles, baseDir, coverageFiles);\n\n\n\n\nHTML test coverage reports will be output to the directory \nhtmlcov\n and \nhtmlcov/js\n at the\nroot of your application.", 
            "title": "Testing"
        }, 
        {
            "location": "/reference/testing/#automated-testing", 
            "text": "Built on top of Django and Angular, Opal applications have great support for automated testing.  Opal provides some utilities to make testing your application even easier.", 
            "title": "Automated Testing"
        }, 
        {
            "location": "/reference/testing/#command-line-test-runner", 
            "text": "The  opal  command line tool has a  test  command which will run unittests for both the server\nand client side components of your application.", 
            "title": "Command Line test runner"
        }, 
        {
            "location": "/reference/testing/#javascript-testing", 
            "text": "By default, we recommend using Jasmine and Karma to test your javascript code. \nOf course you can use any test framework you choose, although Opal doesn't currently ship with\nhelpers for any other frameworks.", 
            "title": "Javascript testing"
        }, 
        {
            "location": "/reference/testing/#installing-javascript-testing-tools", 
            "text": "To installing Karma, Jasmine and Phantomjs in a local directory:  npm install jasmine-core karma karma-coverage karma-jasmine karma-phantomjs-launcher", 
            "title": "Installing javascript testing tools"
        }, 
        {
            "location": "/reference/testing/#setting-up-the-karma-environment-for-your-application", 
            "text": "If you'd like to run karma tests, Opal ships with a function to give you a default karma config.  In your karma config just  require('[[ path to opal ]]/config/karma_defaults.js')  The function takes in the files you want to include and runs karma tests on them.  // config/karma.config.js\n\nmodule.exports = function(config){\n  var opalPath = '../../opal';\n\n  var karmaDefaults = require(opalPath + '/config/karma_defaults.js');\n  var baseDir = __dirname + '/..';\n  var includedFiles = [\n     ...\n  ];\n\n  var defaultConfig = karmaDefaults(includedFiles, baseDir);\n  config.set(defaultConfig);\n};  If run from opal test js, we set the path to opal as an env variable called\nOPAL_LOCATION", 
            "title": "Setting up the karma environment for your application"
        }, 
        {
            "location": "/reference/testing/#test-coverage", 
            "text": "The Opal test runner has a  -c  option which runs coverage reports for both Python and\nJavascript code:  opal test -c  Python test coverage uses the  coverage  tool and you may want to set include/excludes in\na  .coveragerc .  Javascript test files to be reported on should be passed as an extra argument to  karmaDefaults :    var coverageFiles = [\n     ...\n  ];\n  var defaultConfig = karmaDefaults(includedFiles, baseDir, coverageFiles);  HTML test coverage reports will be output to the directory  htmlcov  and  htmlcov/js  at the\nroot of your application.", 
            "title": "Test Coverage"
        }, 
        {
            "location": "/reference/javascript/javascript_dependencies/", 
            "text": "Opal Javascript Dependencies\n\n\nOpal makes use of a number of upstream dependencies which are available for\ndevelopers to use in building applications.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nModernizr\n\n\nOpal has a custom modernizr build that detects touch events\n\n\n\n\n\n\nJquery\n\n\n1.11.3\n\n\n\n\n\n\nAngular\n\n\n1.5.8\n\n\n\n\n\n\nAngular-ui-select\n\n\n0.19.4\n\n\n\n\n\n\nUnderscore.js\n\n\n1.8.3\n\n\n\n\n\n\nD3\n\n\n3.5.6\n\n\n\n\n\n\nC3\n\n\n0.4.10", 
            "title": "Javascript dependencies"
        }, 
        {
            "location": "/reference/javascript/javascript_dependencies/#opal-javascript-dependencies", 
            "text": "Opal makes use of a number of upstream dependencies which are available for\ndevelopers to use in building applications.           Modernizr  Opal has a custom modernizr build that detects touch events    Jquery  1.11.3    Angular  1.5.8    Angular-ui-select  0.19.4    Underscore.js  1.8.3    D3  3.5.6    C3  0.4.10", 
            "title": "Opal Javascript Dependencies"
        }, 
        {
            "location": "/reference/upgrading/", 
            "text": "Upgrading Your Opal Application\n\n\nThis document provides instructions for specific steps required to upgrading your Opal\napplication to a later version where there are extra steps required.\n\n\n0.9.1 -\n 0.10.0\n\n\nUpgrading Opal\n\n\nHow you do this depends on how you have configured your application. You will need to\nupdate both the Opal version, and versions of dependencies upgraded dependencies if\nyou have specified them in for instance, a requirements.txt.\n\n\n(This will be the case if you use the requirements.txt originally provided by\n\nopal startproject\n)\n\n\n# requirements.txt\ndjango==1.10.8\ndjango-reversion==1.10.2\ndjangorestframework==3.4.7\npsycopg==2.7\nffs==0.0.8.2\nopal==0.10.0\nrequests==2.18.4\ndjango-celery==3.2.2\ncelery==3.1.25\n\n\n\nAfter re-installing (via for instance \npip install -r requirements.txt\n) you will\nlikely need to make some changes to your application code to fix errors that arise as\na result of upstream breaking changes.\n\n\nBreaking changes from dependencies\n\n\nThe jump in Django versions introduces some breaking changes. Some common problems are\noutlined here.\n\n\nEarly imports of models\n\n\nImporting models in a package \ninit\n.py file is no longer allowed - if you see\n\ndjango.core.exceptions.AppRegistryNotReady\n this is the likely cause.\n\n\nDjango reversion\n\n\nReversion has reorganized its package structure to avoid importing models.\nSpecifically:\n\n\n# Old-style import for accessing the admin class.\nimport reversion\n# New-style import for accesssing admin class.\nfrom reversion.admin import VersionAdmin\n\n# Old-style import for accessing the low-level API.\nimport reversion\n# New-style import for accesssing the low-level API.\nfrom reversion import revisions as reversion\n\n\n\n\nYou should examine your \nadmin.py\n to see whether you do this.\n\n\nUrlpatterns\n\n\ndjango.conf.urls.patterns\n is now removed rather than deprecated. The default urlconfs\ngenerated by older Opal versions use them, but these should now be replaced with lists.\n\n\nTEMPLATES setting\n\n\nYou will need to convert to the new style TEMPLATES-* dictionary-style configuration in settings.py. Details are in the \nrelevant section of the Django documentation\n. Note that Django's own context processors have moved from \ndjango.core\n to \ndjango.template\n.\n\n\nAUTOCOMPLETE_SEARCH setting\n\n\nThe (previously undocumented) setting \nAUTOCOMPLETE_SEARCH\n has been renamed to\n\nOPAL_AUTOCOMPLETE_SEARCH\n to match other Opal settings. Update your \nsettings.py\n\nto the new setting name if you had enabled this feature.\n\n\nMigrations\n\n\nYou will need to run the migrations for Opal 0.10.0\n\n\n$ python manage.py migrate opal\n\n\n\nAs Opal 0.10.0 contains changes to the cascading deletion behaviour of subrecords, you will\nneed to run a makemigrations command to update your subrecords.\n\n\npython manage.py makemigrations yourapp\npython manage.py migrate yourapp\n\n\n\nLoginRequiredMixin\n\n\nDjango now ships with \ndjango.contrib.auth.mixins.LoginRequiredMixin\n. Accordingly we have\nremoved \nopal.core.views.LoginRequiredMixin\n. A direct switch to the Django class should\nwork seamlessly without any functional differences.\n\n\nCSRF_FAILURE_VIEW\n\n\nWe now ship the \nopal.views.csrf_failure\n view which can be enabled by adding\n\nCSRF_FAILURE_VIEW = 'opal.views.csrf_failure'\n in your settings.py. This will\nredirect a user to their intended destination on a CSRF failure. This mitigates\nan edge case where an unauthenticated user opens two pages at the same time.\nBoth pages will get redirected to the login form and whichever page the user\nlogs into second will throw a CSRF failure because Django invalidates CSRF\ntokens on login.\n\n\n0.9.0 -\n 0.9.1\n\n\nUpgrading Opal\n\n\nHow you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work.\n\n\n# requirements.txt\nopal==0.9.1\n\n\n\nAfter re-installing (via for instance \npip install -r requirements.txt\n) you will need to\nrun the migrations for Opal 0.9.1\n\n\n$ python manage.py migrate opal\n\n\n\n0.8.3 -\n 0.9.0\n\n\nepisode.date_of_episode\n, \nepisode.date_of_admission\n and \nepisode.discharge_date\n are all deprecated.\n\n\nWe now expect episodes to use \nepisode.start\n and \nepisode.end\n. You should search your codebase for any\ninstances where the three variables are used and switch to the start/end properties.\n\n\n0.8.2 -\n 0.8.3\n\n\nNo changes.\n\n\n0.8.1 -\n 0.8.2\n\n\nThe application menu API, previously python dicts stored in attributes on either plugin or\napplication subclasses, now consists of the new \nopal.core.menus.MenuItem\n class, enabling\nenhanced customisation and flexibility.\n\n\nIf you previously were adding Menu Items with the dictionary format. These should be\nconverted to use a \nMenuItem\n class.\n\n\n0.8.0 -\n 0.8.1\n\n\nUpgrading Opal\n\n\nHow you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work.\n\n\n# requirements.txt\nopal==0.8.0\n\n\n\nThere are no Opal migrations for this version.\n\n\nPatientList.get_queryset\n\n\nThe \nPatientList.get_queryset\n method now takes keyword arguments - at the current time\nit is only passed \nuser\n - the user for the current request, but in the future this may\nbe extended, so applications should consider using \n**kwargs\n to ensure this method\ndoes not raise exceptions in the future.\n\n\nReopenEpisodeCtrl\n\n\nWe've removed the undocumented \nReopenEpisodeCtrl\n from Opal. Applications wishing\nto retain this functionality may copy the controller from the v0.7.1 branch\n(opal/static/js/opal/controllers/reopen_episode.js). However we would warn developers\nthat this flow has proven to be problematic and confusing for users whenever\nused - hence the removal.\n\n\n0.7.1 -\n 0.8.0\n\n\nUpgrading Opal\n\n\nHow you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work.\n\n\n# requirements.txt\nopal==0.8.0\n\n\n\nAfter re-installing (via for instance \npip install -r requirements.txt\n) you will need to\nrun the migrations for Opal 0.6.x\n\n\n$ python manage.py migrate opal\n\n\n\nOptions\n\n\nOptions are now an ex-API. Applications should convert to use either Referencedata (canonical terms for common data), or\nMetadata (App specific data you wish to pass into the front end).\n\n\nUI Components\n\n\nThose applications relying on Angular strap ui components (Typeahead, Popover,\nTooltip, Datepicker, Timepicker) should convert their templates to use the Angular UI Boostrap equivalents, or the\nOpal templatetags.\n\n\nIf you are simply using Opal templatetags from \nforms\n and not overriding these templates, then the transition should be seamless. Otherwise, searching your codebase for html files containing \nbs-\n and looking for angular strap components is a good start.\n\n\nApplications or plugins with javascript tests may need to update their includes to remove references to old library files.\n\n\nFull documentation of the markup and options for these components is found \nhere\n\n\nextending modal_base.html\n\n\nWe now have different base templates for modals, forms and two column modal forms (essentially a form with a side bar).\n\n\nThe form templates add validation checks around the saving to catch any validation errors a form might through. They assume the existence of a form called 'form'.\n\n\nAs part of this modal_base has been moved into a folder in templates called base_templates\n\n\nRename any templates extending \nmodal_base.html\n to extend the correct template in \nbase_templates/\n. This will be either \nmodal_base.html\n or \nmodal_form_base.html\n.\n\n\nAdd episode modal url\n\n\nThe add episode modal previously available at\n\n/templates/modals/add_episode.html/\n is now not available at the url with a trailing slash.\nAny controllers attempting to open the modal e.g. custom list flows should update their\n\n$modal.open\n call to remove the trailing slash.\n\n\nAdmin URL\n\n\nThe Admin url has changed to require a trailing slash, so any links to \n/admin\n - for instance, in a custom menu bar, will need to be updated to \n/admin/\n.\n\n\n0.7.0 -\n 0.7.1\n\n\nDownstream dependencies\n\n\nOpal 0.7.1 updates the expected version of Django Axes to 1.7.0 - you will wish to update\nthis in your requirements.txt or similar accordingly.\n\n\nDRF Authentication\n\n\nWe highly recommend that applications explicitly set Django Rest Framework authentication\nclasses in their \nsettings.py\n.\n\n\nBy default Opal now uses session and token auth, which will require a migration to install\nthe DRF Token authentication app.\n\n\nINSTALLED_APPS = (\n    # ....\n    'rest_framework',\n    'rest_framework.authtoken',\n    # ...\n)\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    )\n}\n\n\n\n\n6.x -\n 7.x\n\n\nUpgrading Opal\n\n\nHow you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work.\n\n\n# requirements.txt\nopal==0.7.0\n\n\n\nAfter re-installing (via for instance \npip install -r requirements.txt\n) you will need to\nrun the migrations for Opal 0.6.x\n\n\n$ python manage.py migrate opal\n\n\n\nIf you are inheriting from the abstract models in Opal e.g. \nDemographics\n then you should\nrun a makemigrations command to update to the 0.7.x data model.\n\n\npython manage.py makemigrations yourapp\npython manage.py migrate yourapp\n\n\n\nBreaking changes\n\n\nOpal 0.7 contains a number of breaking changes.\n\n\nName changes\n\n\nopal.models.Episode.category\n has been re-named \ncategory_name\n. If your application\ndirectly sets category, you will be required to update all instances where this happens.\n\n\nThe \n/episode/:pk/\n API has moved to \n/api/v0.1/episode/:pk/\n so any code (typically\njavascript) code that directly saves to this API endpoint rather than using the Opal JS\n\nEpisode\n services should work immediately when re-pointed at the new URL.\n\n\nMoving from options to referencedata and metadata\n\n\nThe signature of the EditItemCtrl has been updated - this modal controller no longer\ntakes an \noptions\n argument, rather it uses the new 0.7.x \nreferencedata\n and \nmetadata\n\nservices. Applications that call EditItemCtrl directly should look to update the \nresolves\n\noption they were passing to \n$modal.open\n. (Alternatively, developers should consider\nrefactoring to use the new \nrecordEditor\n API.)\n\n\nThe signatures of Flow \nenter\n and \nexit\n methods has changed to no longer accept\noptions as a positional argument, and enter/exit controllers will no longer be initialized\nwith access to options as a resolved provider. They will have access to either/both of\n\nreferencedata\n and \nmetadata\n so if your application includes custom flow controllers that\nuse \noptions\n you will need to refactor these to use the new x-data arguments instead.\n\n\nreferencedata\n and \nmetadata\n between them have all data previously in options, so the refactor\nhere should be relatively painless.\n\n\nDate of birth fields in forms\n\n\nThe partial \npartials/_date_of_birth_field.html\n has been removed and replaced with the\n\n{% date_of_birth_field %}\n templatetag in the forms library. You should update any forms\nto use this new tag.\n\n\n5.x -\n 6.x\n\n\nUpgrading Opal\n\n\nHow you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work.\n\n\n# requirements.txt\nopal==0.6.0\n\n\n\nAfter re-installing (via for instance \npip install -r requirements.txt\n) you will need to\nrun the migrations for Opal 0.6.x\n\n\n$ python manage.py migrate opal\n\n\n\nChanges to abstract models\n\n\nIf you are inheriting from the abstract models in Opal e.g. \nDemographics\n then you should\nrun a makemigrations command to update to the 0.6.x data model.\n\n\npython manage.py makemigrations yourapp\npython manage.py migrate yourapp\n\n\n\nYou should note that as of Opal 0.6.x \nDemographics\n now splits names into first, surname,\nmiddle name and title. The previous \nname\n field will be converted to be \nfirst_name\n.\n\n\nStrategies for updating your data to use the appropriate fields will vary from application\nto application, but one good such strategy is to use a data migration \nsuch as the one done\nhere\n.\n\n\nUpdate settings\n\n\nMany of the default Opal templates now assume that the \n'opal.context_processors.models'\n\nContext Processor is available - you should add that to the \nTEMPLATE_CONTEXT_PROCESSORS\n\nsetting in your application's \nsettings.py\n\n\nThe default date formats in Opal have changed - and so you should update your \nDATE_X\n\nsettings to match:\n\n\nDATE_FORMAT = 'd/m/Y'\nDATE_INPUT_FORMATS = ['%d/%m/%Y']\nDATETIME_FORMAT = 'd/m/Y H:i:s'\nDATETIME_INPUT_FORMATS = ['%d/%m/%Y %H:%M:%S']\n\n\n\n\nUpgrade plugins\n\n\nA number of Opal plugins have new releases to work with the changes in Opal 0.6.x\n\n\n\n\nopal-referral - Upgrade to 0.1.4\n\n\nopal-wardround - Upgrade to 0.6.0\n\n\nopal-observations - Upgrade to 0.1.2\n\n\nopal-dischargesummary - Upgrade to 0.2.0\n\n\nopal-dashboard - Upgrade to 0.1.3\n\n\n\n\nMeanwhile the \nopal-taskrunner\n plugin has now been deprecated, this functionality now\nliving natively within Opal core.\n\n\nUpdate your Teams to be PatientLists\n\n\nPatient Lists are now driven by subclasses of \nopal.core.PatientList\n, so we will need\nto convert your Teams to be PatientLists. You may want to re-enable the Team admin while\nyou do so - this is simple, by updating your application's \nadmin.py\n:\n\n\n# yourapp/admin.py\n...\nfrom opal.admin import TeamAdmin\nfrom opal.models import Team\nadmin.site.register(Team, TeamAdmin)\n\n\n\nPatient lists are now declarative. For instance, to replicate the following team:\n\n\n\n\nWe would convert that to:\n\n\n# yourapp/patient*lists.py\nfrom opal.core import patient_lists\n\nclass RespiratoryList(patient_lists.TaggedPatientList):\n    display_name = 'Respiratory'\n    tag          = 'respiratory'\n    order        = 4\n    schema       = [models.Demographics, models.Treatment]\n\n\n\n\nThe schema property will likely be available to you in your application's \nschema.py\n\nfile - which is now obsolete.\n\n\nSee the \nfull patient list documentation\n for further details\nof the options available for Patient Lists.\n\n\nForm and Display templates.\n\n\nWe may now be missing some form or display templates, as your application may be\nrelying on templates previously in Opal. To discover which these are, run\n\n\n$ opal scaffold --dry-run\n\n\n\nYou may either create templates by hand, or have Opal generate boilerplate templates for you\nby running \n$ opal scaffold\n.\n\n\nModal templates already in your application will likely be referencing invalid paths\nto their Angular variables. You should update these to include the record name - for example:\n\n\n!-- Was --\n\n{% input  label=\nDrug\n model=\nediting.drug\n lookuplist=\nantimicrobial_list\n %}\n\n!-- Becomes --\n\n{% input  label=\nDrug\n model=\nediting.treatment.drug\n lookuplist=\nantimicrobial_list\n %}\n\n\n\n\nThe Inpatient episode category\n\n\nThe default Episode Category - Inpatient episodes has updated it's database identifier\nfrom \ninpatient\n to \nInpatient\n. To update your episodes run :\n\n\n from opal.models import Episode\n\n for e in Episode.objects.filter(category='inpatient'):\n...   e.category='Inpatient'\n...   e.save()\n...\n\n\n\n\nAny references to episode category in templates (for e.g. ng-hide) or controllers for logic\nwill also require updates.\n\n\nFlow is now defined in JS\n\n\nFlow is no longer defined on the server side in python, but rather is a javascript service.\nSee the documentation for information about setting up custom flows. At a minimum applications\nthat use custom flows will have to implement their own flow service and reference it in their\nsettings.\n\n\n4.X -\n 5.x\n\n\nMigrations\n\n\nBefore upgrading from 4.x to 5.x you should ensure that you have upgraded from South\nto Djangomigrations.\n\n\n$ rm yourapp/migrations/*\n$ python manage.py makemigrations yourapp\n$ python manage.py migrate yourapp --fake-initial\n\n\n\nOpal\n\n\nNext you will need to upgrade the Opal version itself.\n\n\nHow you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work. This will also update FFS and Django\nAxes as well as adding Python Dateutil.\n\n\n-e git://github.com/openhealthcare/opal.git@v0.5.6#egg=opal\n\n\n\nMigrations.\n\n\nOpal has fresh migrations in 0.5.x, which we should run. There are also changes to the\nbase abstract model classes (to add created/updated timestamps) so you'll need to create\nfresh migrations for your own application.\n\n\n$ python manage.py migrate\n$ python manage.py makemigrations yourapp\n$ python manage.py migrate yourapp\n\n\n\nAt this stage you'll want to commit your new migrations, as well as any changes to your\napplication's requirements file.\n\n\nTags\n\n\nAs of 0.5.5, old tags in Opal are stored directly on the Tagging model rather than via\nDjango Reversion. We can import those old tags by doing the following.\n\n\n$ python manage.py shell\n\n\n from opal.models import Tagging\n\n Tagging.import_from_reversion()\n\n\n\nDeployment\n\n\nThe first time you deploy your upgraded application you'll need to run the following\ncommands to upgrade your database:\n\n\n$ python manage.py migrate --fake-initial\n\n\n\nYou'll also have to repeat the Tagging step once for each deployment.", 
            "title": "Upgrading"
        }, 
        {
            "location": "/reference/upgrading/#upgrading-your-opal-application", 
            "text": "This document provides instructions for specific steps required to upgrading your Opal\napplication to a later version where there are extra steps required.", 
            "title": "Upgrading Your Opal Application"
        }, 
        {
            "location": "/reference/upgrading/#091-0100", 
            "text": "", 
            "title": "0.9.1 -&gt; 0.10.0"
        }, 
        {
            "location": "/reference/upgrading/#upgrading-opal", 
            "text": "How you do this depends on how you have configured your application. You will need to\nupdate both the Opal version, and versions of dependencies upgraded dependencies if\nyou have specified them in for instance, a requirements.txt.  (This will be the case if you use the requirements.txt originally provided by opal startproject )  # requirements.txt\ndjango==1.10.8\ndjango-reversion==1.10.2\ndjangorestframework==3.4.7\npsycopg==2.7\nffs==0.0.8.2\nopal==0.10.0\nrequests==2.18.4\ndjango-celery==3.2.2\ncelery==3.1.25  After re-installing (via for instance  pip install -r requirements.txt ) you will\nlikely need to make some changes to your application code to fix errors that arise as\na result of upstream breaking changes.", 
            "title": "Upgrading Opal"
        }, 
        {
            "location": "/reference/upgrading/#breaking-changes-from-dependencies", 
            "text": "The jump in Django versions introduces some breaking changes. Some common problems are\noutlined here.  Early imports of models  Importing models in a package  init .py file is no longer allowed - if you see django.core.exceptions.AppRegistryNotReady  this is the likely cause.  Django reversion  Reversion has reorganized its package structure to avoid importing models.\nSpecifically:  # Old-style import for accessing the admin class.\nimport reversion\n# New-style import for accesssing admin class.\nfrom reversion.admin import VersionAdmin\n\n# Old-style import for accessing the low-level API.\nimport reversion\n# New-style import for accesssing the low-level API.\nfrom reversion import revisions as reversion  You should examine your  admin.py  to see whether you do this.  Urlpatterns  django.conf.urls.patterns  is now removed rather than deprecated. The default urlconfs\ngenerated by older Opal versions use them, but these should now be replaced with lists.  TEMPLATES setting  You will need to convert to the new style TEMPLATES-* dictionary-style configuration in settings.py. Details are in the  relevant section of the Django documentation . Note that Django's own context processors have moved from  django.core  to  django.template .  AUTOCOMPLETE_SEARCH setting  The (previously undocumented) setting  AUTOCOMPLETE_SEARCH  has been renamed to OPAL_AUTOCOMPLETE_SEARCH  to match other Opal settings. Update your  settings.py \nto the new setting name if you had enabled this feature.", 
            "title": "Breaking changes from dependencies"
        }, 
        {
            "location": "/reference/upgrading/#migrations", 
            "text": "You will need to run the migrations for Opal 0.10.0  $ python manage.py migrate opal  As Opal 0.10.0 contains changes to the cascading deletion behaviour of subrecords, you will\nneed to run a makemigrations command to update your subrecords.  python manage.py makemigrations yourapp\npython manage.py migrate yourapp", 
            "title": "Migrations"
        }, 
        {
            "location": "/reference/upgrading/#loginrequiredmixin", 
            "text": "Django now ships with  django.contrib.auth.mixins.LoginRequiredMixin . Accordingly we have\nremoved  opal.core.views.LoginRequiredMixin . A direct switch to the Django class should\nwork seamlessly without any functional differences.", 
            "title": "LoginRequiredMixin"
        }, 
        {
            "location": "/reference/upgrading/#csrf_failure_view", 
            "text": "We now ship the  opal.views.csrf_failure  view which can be enabled by adding CSRF_FAILURE_VIEW = 'opal.views.csrf_failure'  in your settings.py. This will\nredirect a user to their intended destination on a CSRF failure. This mitigates\nan edge case where an unauthenticated user opens two pages at the same time.\nBoth pages will get redirected to the login form and whichever page the user\nlogs into second will throw a CSRF failure because Django invalidates CSRF\ntokens on login.", 
            "title": "CSRF_FAILURE_VIEW"
        }, 
        {
            "location": "/reference/upgrading/#090-091", 
            "text": "", 
            "title": "0.9.0 -&gt; 0.9.1"
        }, 
        {
            "location": "/reference/upgrading/#upgrading-opal_1", 
            "text": "How you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work.  # requirements.txt\nopal==0.9.1  After re-installing (via for instance  pip install -r requirements.txt ) you will need to\nrun the migrations for Opal 0.9.1  $ python manage.py migrate opal", 
            "title": "Upgrading Opal"
        }, 
        {
            "location": "/reference/upgrading/#083-090", 
            "text": "episode.date_of_episode ,  episode.date_of_admission  and  episode.discharge_date  are all deprecated.  We now expect episodes to use  episode.start  and  episode.end . You should search your codebase for any\ninstances where the three variables are used and switch to the start/end properties.", 
            "title": "0.8.3 -&gt; 0.9.0"
        }, 
        {
            "location": "/reference/upgrading/#082-083", 
            "text": "No changes.", 
            "title": "0.8.2 -&gt; 0.8.3"
        }, 
        {
            "location": "/reference/upgrading/#081-082", 
            "text": "The application menu API, previously python dicts stored in attributes on either plugin or\napplication subclasses, now consists of the new  opal.core.menus.MenuItem  class, enabling\nenhanced customisation and flexibility.  If you previously were adding Menu Items with the dictionary format. These should be\nconverted to use a  MenuItem  class.", 
            "title": "0.8.1 -&gt; 0.8.2"
        }, 
        {
            "location": "/reference/upgrading/#080-081", 
            "text": "", 
            "title": "0.8.0 -&gt; 0.8.1"
        }, 
        {
            "location": "/reference/upgrading/#upgrading-opal_2", 
            "text": "How you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work.  # requirements.txt\nopal==0.8.0  There are no Opal migrations for this version.", 
            "title": "Upgrading Opal"
        }, 
        {
            "location": "/reference/upgrading/#patientlistget_queryset", 
            "text": "The  PatientList.get_queryset  method now takes keyword arguments - at the current time\nit is only passed  user  - the user for the current request, but in the future this may\nbe extended, so applications should consider using  **kwargs  to ensure this method\ndoes not raise exceptions in the future.", 
            "title": "PatientList.get_queryset"
        }, 
        {
            "location": "/reference/upgrading/#reopenepisodectrl", 
            "text": "We've removed the undocumented  ReopenEpisodeCtrl  from Opal. Applications wishing\nto retain this functionality may copy the controller from the v0.7.1 branch\n(opal/static/js/opal/controllers/reopen_episode.js). However we would warn developers\nthat this flow has proven to be problematic and confusing for users whenever\nused - hence the removal.", 
            "title": "ReopenEpisodeCtrl"
        }, 
        {
            "location": "/reference/upgrading/#071-080", 
            "text": "", 
            "title": "0.7.1 -&gt; 0.8.0"
        }, 
        {
            "location": "/reference/upgrading/#upgrading-opal_3", 
            "text": "How you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work.  # requirements.txt\nopal==0.8.0  After re-installing (via for instance  pip install -r requirements.txt ) you will need to\nrun the migrations for Opal 0.6.x  $ python manage.py migrate opal", 
            "title": "Upgrading Opal"
        }, 
        {
            "location": "/reference/upgrading/#options", 
            "text": "Options are now an ex-API. Applications should convert to use either Referencedata (canonical terms for common data), or\nMetadata (App specific data you wish to pass into the front end).", 
            "title": "Options"
        }, 
        {
            "location": "/reference/upgrading/#ui-components", 
            "text": "Those applications relying on Angular strap ui components (Typeahead, Popover,\nTooltip, Datepicker, Timepicker) should convert their templates to use the Angular UI Boostrap equivalents, or the\nOpal templatetags.  If you are simply using Opal templatetags from  forms  and not overriding these templates, then the transition should be seamless. Otherwise, searching your codebase for html files containing  bs-  and looking for angular strap components is a good start.  Applications or plugins with javascript tests may need to update their includes to remove references to old library files.  Full documentation of the markup and options for these components is found  here", 
            "title": "UI Components"
        }, 
        {
            "location": "/reference/upgrading/#extending-modal_basehtml", 
            "text": "We now have different base templates for modals, forms and two column modal forms (essentially a form with a side bar).  The form templates add validation checks around the saving to catch any validation errors a form might through. They assume the existence of a form called 'form'.  As part of this modal_base has been moved into a folder in templates called base_templates  Rename any templates extending  modal_base.html  to extend the correct template in  base_templates/ . This will be either  modal_base.html  or  modal_form_base.html .", 
            "title": "extending modal_base.html"
        }, 
        {
            "location": "/reference/upgrading/#add-episode-modal-url", 
            "text": "The add episode modal previously available at /templates/modals/add_episode.html/  is now not available at the url with a trailing slash.\nAny controllers attempting to open the modal e.g. custom list flows should update their $modal.open  call to remove the trailing slash.", 
            "title": "Add episode modal url"
        }, 
        {
            "location": "/reference/upgrading/#admin-url", 
            "text": "The Admin url has changed to require a trailing slash, so any links to  /admin  - for instance, in a custom menu bar, will need to be updated to  /admin/ .", 
            "title": "Admin URL"
        }, 
        {
            "location": "/reference/upgrading/#070-071", 
            "text": "", 
            "title": "0.7.0 -&gt; 0.7.1"
        }, 
        {
            "location": "/reference/upgrading/#downstream-dependencies", 
            "text": "Opal 0.7.1 updates the expected version of Django Axes to 1.7.0 - you will wish to update\nthis in your requirements.txt or similar accordingly.", 
            "title": "Downstream dependencies"
        }, 
        {
            "location": "/reference/upgrading/#drf-authentication", 
            "text": "We highly recommend that applications explicitly set Django Rest Framework authentication\nclasses in their  settings.py .  By default Opal now uses session and token auth, which will require a migration to install\nthe DRF Token authentication app.  INSTALLED_APPS = (\n    # ....\n    'rest_framework',\n    'rest_framework.authtoken',\n    # ...\n)\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    )\n}", 
            "title": "DRF Authentication"
        }, 
        {
            "location": "/reference/upgrading/#6x-7x", 
            "text": "", 
            "title": "6.x -&gt; 7.x"
        }, 
        {
            "location": "/reference/upgrading/#upgrading-opal_4", 
            "text": "How you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work.  # requirements.txt\nopal==0.7.0  After re-installing (via for instance  pip install -r requirements.txt ) you will need to\nrun the migrations for Opal 0.6.x  $ python manage.py migrate opal  If you are inheriting from the abstract models in Opal e.g.  Demographics  then you should\nrun a makemigrations command to update to the 0.7.x data model.  python manage.py makemigrations yourapp\npython manage.py migrate yourapp", 
            "title": "Upgrading Opal"
        }, 
        {
            "location": "/reference/upgrading/#breaking-changes", 
            "text": "Opal 0.7 contains a number of breaking changes.", 
            "title": "Breaking changes"
        }, 
        {
            "location": "/reference/upgrading/#name-changes", 
            "text": "opal.models.Episode.category  has been re-named  category_name . If your application\ndirectly sets category, you will be required to update all instances where this happens.  The  /episode/:pk/  API has moved to  /api/v0.1/episode/:pk/  so any code (typically\njavascript) code that directly saves to this API endpoint rather than using the Opal JS Episode  services should work immediately when re-pointed at the new URL.", 
            "title": "Name changes"
        }, 
        {
            "location": "/reference/upgrading/#moving-from-options-to-referencedata-and-metadata", 
            "text": "The signature of the EditItemCtrl has been updated - this modal controller no longer\ntakes an  options  argument, rather it uses the new 0.7.x  referencedata  and  metadata \nservices. Applications that call EditItemCtrl directly should look to update the  resolves \noption they were passing to  $modal.open . (Alternatively, developers should consider\nrefactoring to use the new  recordEditor  API.)  The signatures of Flow  enter  and  exit  methods has changed to no longer accept\noptions as a positional argument, and enter/exit controllers will no longer be initialized\nwith access to options as a resolved provider. They will have access to either/both of referencedata  and  metadata  so if your application includes custom flow controllers that\nuse  options  you will need to refactor these to use the new x-data arguments instead.  referencedata  and  metadata  between them have all data previously in options, so the refactor\nhere should be relatively painless.", 
            "title": "Moving from options to referencedata and metadata"
        }, 
        {
            "location": "/reference/upgrading/#date-of-birth-fields-in-forms", 
            "text": "The partial  partials/_date_of_birth_field.html  has been removed and replaced with the {% date_of_birth_field %}  templatetag in the forms library. You should update any forms\nto use this new tag.", 
            "title": "Date of birth fields in forms"
        }, 
        {
            "location": "/reference/upgrading/#5x-6x", 
            "text": "", 
            "title": "5.x -&gt; 6.x"
        }, 
        {
            "location": "/reference/upgrading/#upgrading-opal_5", 
            "text": "How you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work.  # requirements.txt\nopal==0.6.0  After re-installing (via for instance  pip install -r requirements.txt ) you will need to\nrun the migrations for Opal 0.6.x  $ python manage.py migrate opal", 
            "title": "Upgrading Opal"
        }, 
        {
            "location": "/reference/upgrading/#changes-to-abstract-models", 
            "text": "If you are inheriting from the abstract models in Opal e.g.  Demographics  then you should\nrun a makemigrations command to update to the 0.6.x data model.  python manage.py makemigrations yourapp\npython manage.py migrate yourapp  You should note that as of Opal 0.6.x  Demographics  now splits names into first, surname,\nmiddle name and title. The previous  name  field will be converted to be  first_name .  Strategies for updating your data to use the appropriate fields will vary from application\nto application, but one good such strategy is to use a data migration  such as the one done\nhere .", 
            "title": "Changes to abstract models"
        }, 
        {
            "location": "/reference/upgrading/#update-settings", 
            "text": "Many of the default Opal templates now assume that the  'opal.context_processors.models' \nContext Processor is available - you should add that to the  TEMPLATE_CONTEXT_PROCESSORS \nsetting in your application's  settings.py  The default date formats in Opal have changed - and so you should update your  DATE_X \nsettings to match:  DATE_FORMAT = 'd/m/Y'\nDATE_INPUT_FORMATS = ['%d/%m/%Y']\nDATETIME_FORMAT = 'd/m/Y H:i:s'\nDATETIME_INPUT_FORMATS = ['%d/%m/%Y %H:%M:%S']", 
            "title": "Update settings"
        }, 
        {
            "location": "/reference/upgrading/#upgrade-plugins", 
            "text": "A number of Opal plugins have new releases to work with the changes in Opal 0.6.x   opal-referral - Upgrade to 0.1.4  opal-wardround - Upgrade to 0.6.0  opal-observations - Upgrade to 0.1.2  opal-dischargesummary - Upgrade to 0.2.0  opal-dashboard - Upgrade to 0.1.3   Meanwhile the  opal-taskrunner  plugin has now been deprecated, this functionality now\nliving natively within Opal core.", 
            "title": "Upgrade plugins"
        }, 
        {
            "location": "/reference/upgrading/#update-your-teams-to-be-patientlists", 
            "text": "Patient Lists are now driven by subclasses of  opal.core.PatientList , so we will need\nto convert your Teams to be PatientLists. You may want to re-enable the Team admin while\nyou do so - this is simple, by updating your application's  admin.py :  # yourapp/admin.py\n...\nfrom opal.admin import TeamAdmin\nfrom opal.models import Team\nadmin.site.register(Team, TeamAdmin)  Patient lists are now declarative. For instance, to replicate the following team:   We would convert that to:  # yourapp/patient*lists.py\nfrom opal.core import patient_lists\n\nclass RespiratoryList(patient_lists.TaggedPatientList):\n    display_name = 'Respiratory'\n    tag          = 'respiratory'\n    order        = 4\n    schema       = [models.Demographics, models.Treatment]  The schema property will likely be available to you in your application's  schema.py \nfile - which is now obsolete.  See the  full patient list documentation  for further details\nof the options available for Patient Lists.", 
            "title": "Update your Teams to be PatientLists"
        }, 
        {
            "location": "/reference/upgrading/#form-and-display-templates", 
            "text": "We may now be missing some form or display templates, as your application may be\nrelying on templates previously in Opal. To discover which these are, run  $ opal scaffold --dry-run  You may either create templates by hand, or have Opal generate boilerplate templates for you\nby running  $ opal scaffold .  Modal templates already in your application will likely be referencing invalid paths\nto their Angular variables. You should update these to include the record name - for example:  !-- Was -- \n{% input  label= Drug  model= editing.drug  lookuplist= antimicrobial_list  %} !-- Becomes -- \n{% input  label= Drug  model= editing.treatment.drug  lookuplist= antimicrobial_list  %}", 
            "title": "Form and Display templates."
        }, 
        {
            "location": "/reference/upgrading/#the-inpatient-episode-category", 
            "text": "The default Episode Category - Inpatient episodes has updated it's database identifier\nfrom  inpatient  to  Inpatient . To update your episodes run :   from opal.models import Episode  for e in Episode.objects.filter(category='inpatient'):\n...   e.category='Inpatient'\n...   e.save()\n...  Any references to episode category in templates (for e.g. ng-hide) or controllers for logic\nwill also require updates.", 
            "title": "The Inpatient episode category"
        }, 
        {
            "location": "/reference/upgrading/#flow-is-now-defined-in-js", 
            "text": "Flow is no longer defined on the server side in python, but rather is a javascript service.\nSee the documentation for information about setting up custom flows. At a minimum applications\nthat use custom flows will have to implement their own flow service and reference it in their\nsettings.", 
            "title": "Flow is now defined in JS"
        }, 
        {
            "location": "/reference/upgrading/#4x-5x", 
            "text": "", 
            "title": "4.X -&gt; 5.x"
        }, 
        {
            "location": "/reference/upgrading/#migrations_1", 
            "text": "Before upgrading from 4.x to 5.x you should ensure that you have upgraded from South\nto Djangomigrations.  $ rm yourapp/migrations/*\n$ python manage.py makemigrations yourapp\n$ python manage.py migrate yourapp --fake-initial", 
            "title": "Migrations"
        }, 
        {
            "location": "/reference/upgrading/#opal", 
            "text": "Next you will need to upgrade the Opal version itself.  How you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work. This will also update FFS and Django\nAxes as well as adding Python Dateutil.  -e git://github.com/openhealthcare/opal.git@v0.5.6#egg=opal", 
            "title": "Opal"
        }, 
        {
            "location": "/reference/upgrading/#migrations_2", 
            "text": "Opal has fresh migrations in 0.5.x, which we should run. There are also changes to the\nbase abstract model classes (to add created/updated timestamps) so you'll need to create\nfresh migrations for your own application.  $ python manage.py migrate\n$ python manage.py makemigrations yourapp\n$ python manage.py migrate yourapp  At this stage you'll want to commit your new migrations, as well as any changes to your\napplication's requirements file.", 
            "title": "Migrations."
        }, 
        {
            "location": "/reference/upgrading/#tags", 
            "text": "As of 0.5.5, old tags in Opal are stored directly on the Tagging model rather than via\nDjango Reversion. We can import those old tags by doing the following.  $ python manage.py shell  from opal.models import Tagging  Tagging.import_from_reversion()", 
            "title": "Tags"
        }, 
        {
            "location": "/reference/upgrading/#deployment", 
            "text": "The first time you deploy your upgraded application you'll need to run the following\ncommands to upgrade your database:  $ python manage.py migrate --fake-initial  You'll also have to repeat the Tagging step once for each deployment.", 
            "title": "Deployment"
        }, 
        {
            "location": "/reference/management_commands/", 
            "text": "Opal Management Commands\n\n\nOpal ships with a number of Django management commands which can be invoked with\n\npython manage.py command\n.\n\n\ncreate_random_data\n\n\nCreates patients with randomised data.\n\n\nArguments\n:\n\n\n\n\n--number\n - The number of patients to create. Defaults to 100.\n\n\n\n\npython manage.py create_random_data --number 3000\n\n\n\n\ncreate_singletons\n\n\nCreates any subrecord singletons which are missing. This is useful when\ncreating a new singleton subrecord to backfill existing patients or episodes.\n\n\nWill not create anything if singletons exist, so safe to be run as part of e.g. a\ndeployment script.\n\n\npython manage.py create_singletons\n\n\n\n\ndelete_all_lookuplists\n\n\nDeletes all instances of lookuplist and synonym entries.\n\n\npython manage.py delete_all_lookuplists\n\n\n\n\ndetect_duplicates\n\n\nExamines patients in the system and looks for possible duplicates. Prints a report\nof patients with matching names, dates of birth or hospital numbers.\n\n\npython manage.py detect_duplicates\n\n\n\n\ndump_lookup_lists\n\n\nArguments\n:\n\n\n\n\n--many-files\n - write lookuplists to separate files instead of printing them to stdout.\n\n\n\n\nPrints current lookuplist and synonym values as JSON to stdout. Suitable to be used\nas the input to \nload_lookup_lists\n\n\npython manage.py dump_lookup_lists\n\n\n\n\nload_lookup_lists\n\n\nLoad lookuplists and synonym values.\n\n\nArguments\n:\n\n\n\n\n--file\n - Load one specific file only.\n\n\n\n\nBy default this command will look in \n./yourapp/data/lookuplists.json\n as well as in\n\n./yourapp/data/\n for any files with a name matching the API name of a lookuplist\n(e.g. \n./yourapp/data/conditions.json\n)\n\n\npython manage.py load_lookup_lists\n\n\n\n\nscaffold \nappname\n\n\nUse with new record models.\n\n\nCreates and runs automatic migrations, creates display and form (modal) templates.\n\n\nRunning with \n--dry-run\n will run makemigrations with \n--dry-run\n and print display\nand form templates that would be generated.", 
            "title": "Management commands"
        }, 
        {
            "location": "/reference/management_commands/#opal-management-commands", 
            "text": "Opal ships with a number of Django management commands which can be invoked with python manage.py command .", 
            "title": "Opal Management Commands"
        }, 
        {
            "location": "/reference/management_commands/#create_random_data", 
            "text": "Creates patients with randomised data.  Arguments :   --number  - The number of patients to create. Defaults to 100.   python manage.py create_random_data --number 3000", 
            "title": "create_random_data"
        }, 
        {
            "location": "/reference/management_commands/#create_singletons", 
            "text": "Creates any subrecord singletons which are missing. This is useful when\ncreating a new singleton subrecord to backfill existing patients or episodes.  Will not create anything if singletons exist, so safe to be run as part of e.g. a\ndeployment script.  python manage.py create_singletons", 
            "title": "create_singletons"
        }, 
        {
            "location": "/reference/management_commands/#delete_all_lookuplists", 
            "text": "Deletes all instances of lookuplist and synonym entries.  python manage.py delete_all_lookuplists", 
            "title": "delete_all_lookuplists"
        }, 
        {
            "location": "/reference/management_commands/#detect_duplicates", 
            "text": "Examines patients in the system and looks for possible duplicates. Prints a report\nof patients with matching names, dates of birth or hospital numbers.  python manage.py detect_duplicates", 
            "title": "detect_duplicates"
        }, 
        {
            "location": "/reference/management_commands/#dump_lookup_lists", 
            "text": "Arguments :   --many-files  - write lookuplists to separate files instead of printing them to stdout.   Prints current lookuplist and synonym values as JSON to stdout. Suitable to be used\nas the input to  load_lookup_lists  python manage.py dump_lookup_lists", 
            "title": "dump_lookup_lists"
        }, 
        {
            "location": "/reference/management_commands/#load_lookup_lists", 
            "text": "Load lookuplists and synonym values.  Arguments :   --file  - Load one specific file only.   By default this command will look in  ./yourapp/data/lookuplists.json  as well as in ./yourapp/data/  for any files with a name matching the API name of a lookuplist\n(e.g.  ./yourapp/data/conditions.json )  python manage.py load_lookup_lists", 
            "title": "load_lookup_lists"
        }, 
        {
            "location": "/reference/management_commands/#scaffold-appname", 
            "text": "Use with new record models.  Creates and runs automatic migrations, creates display and form (modal) templates.  Running with  --dry-run  will run makemigrations with  --dry-run  and print display\nand form templates that would be generated.", 
            "title": "scaffold &lt;appname&gt;"
        }
    ]
}