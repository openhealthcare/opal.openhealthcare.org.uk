{
    "docs": [
        {
            "location": "/", 
            "text": "OPAL Documentation\n\n\nOPAL is a full stack framework that makes building digital tools for health care easy.\n\n\n\n\nOPAL builds deep clinical domain specific functionality on top of\n\nDjango\n, \nAngular\n\nand \nBootstrap\n to help developers quickly build easy to maintain,\nrobust clinical applications.\n\n\nThis is the \ndeveloper documentation\n.\n\n\n\n\nOPAL is an entirely Open \nSource\n,\nOpen \nGovernance\n product, as are the wide library of plugins.\n\n\nFirst Steps\n\n\nIf you're new to OPAL, then you'll want to take a look at the\n\nInstallation instructions\n, and then maybe take the\n\ntutorial\n.\n\n\nFull documentation\n\n\nWhile \nTopic guides\n are available for many key areas of OPAL,\nthe \nDetailed reference material\n is a work in progress.\n\n\nIf you find any issues or missing areas of this documentation, please do raise it with the\nteam on the \nGithub issue tracker\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#opal-documentation", 
            "text": "", 
            "title": "OPAL Documentation"
        }, 
        {
            "location": "/#opal-is-a-full-stack-framework-that-makes-building-digital-tools-for-health-care-easy", 
            "text": "OPAL builds deep clinical domain specific functionality on top of Django ,  Angular \nand  Bootstrap  to help developers quickly build easy to maintain,\nrobust clinical applications.  This is the  developer documentation .   OPAL is an entirely Open  Source ,\nOpen  Governance  product, as are the wide library of plugins.", 
            "title": "OPAL is a full stack framework that makes building digital tools for health care easy."
        }, 
        {
            "location": "/#first-steps", 
            "text": "If you're new to OPAL, then you'll want to take a look at the Installation instructions , and then maybe take the tutorial .", 
            "title": "First Steps"
        }, 
        {
            "location": "/#full-documentation", 
            "text": "While  Topic guides  are available for many key areas of OPAL,\nthe  Detailed reference material  is a work in progress.  If you find any issues or missing areas of this documentation, please do raise it with the\nteam on the  Github issue tracker .", 
            "title": "Full documentation"
        }, 
        {
            "location": "/installation/", 
            "text": "Installing OPAL\n\n\nInstallation should be simple.\n\n\nStep 1: The Prerequisites\n\n\nBefore you install OPAL, you'll need to make sure that you have\n\nPython\n and \npip\n\ninstalled on your system.\n\n\nLet's just check that you do:\n\n\n$ python --version\nPython 2.7.5\n$ pip --version\npip 1.5.6\n\n\n\nStep 2: Use Pip\n\n\nNow we can install OPAL using pip:\n\n\n$ pip install opal\n\n\n\nYou should now have the \nopal\n commandline tools installed.\n\n\nLet's just check that you do:\n\n\n$ opal --version\nOPAL 0.8.0\n\n\n\nStep 3: There is no step 3.\n\n\nMaybe make yourself some tea \n then try the \nTutorial\n instead ?", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installing-opal", 
            "text": "Installation should be simple.", 
            "title": "Installing OPAL"
        }, 
        {
            "location": "/installation/#step-1-the-prerequisites", 
            "text": "Before you install OPAL, you'll need to make sure that you have Python  and  pip \ninstalled on your system.  Let's just check that you do:  $ python --version\nPython 2.7.5\n$ pip --version\npip 1.5.6", 
            "title": "Step 1: The Prerequisites"
        }, 
        {
            "location": "/installation/#step-2-use-pip", 
            "text": "Now we can install OPAL using pip:  $ pip install opal  You should now have the  opal  commandline tools installed.  Let's just check that you do:  $ opal --version\nOPAL 0.8.0", 
            "title": "Step 2: Use Pip"
        }, 
        {
            "location": "/installation/#step-3-there-is-no-step-3", 
            "text": "Maybe make yourself some tea   then try the  Tutorial  instead ?", 
            "title": "Step 3: There is no step 3."
        }, 
        {
            "location": "/tutorial/", 
            "text": "Writing a clinical service with OPAL\n\n\nThis tutorial will walk you through the creation of a new OPAL service.\n\n\nThe application we're going to be building will help clinical users to manage the patients on a ward in a hospital.\n\n\n\nAs a Doctor \n\nI want to know what's going on with the patients under my care\n\nSo that I can treat them effectively and safely.\n\n\n\n\nBootstrapping a new project\n\n\nWe assume that you've already \nInstalled OPAL\n. You can tell which version of opal is installed\nby running this command\n\n\n$ opal --version\n\n\n\nAt the start a new project, OPAL will bootstrap the initial project structure, including\na Djano project, some core datamodels (complete with JSON APIs) and a general application structure.\n\n\nFrom the commandline:\n\n\n$ opal startproject mynewapp\n\n\n\nThis will create a mynewap directory where your new project lives.\n\n\nLet's have a look at what that created for you:\n\n\nmynewapp/                   # Your project directory\n    LICENSE                 # A dummy LICENSE file\n    Procfile                # A procfile ready for deployment to e.g. Heroku\n    README.md\n    manage.py               # Django's manage.py script\n    requirements.txt        # Requirements file ready for your project\n\n    data/                   # A dummy directory for fixtures\n        lookuplists/        # A dummy directory for reference data\n\n    mynewapp/               # The actual python package for your application\n         __init__.py\n        models.py           # Data models for your application\n        settings.py         # Helpfully tweaked Django settings\n        tests.py            # Dummy unittests\n        urls.py             # Django Urlconf\n        wsgi.py\n\n        assets/             # Your static files directory\n        templates/          # Your template directory\n        migrations/         # Your Database migrations directory\n\n        opal.sqlite         # The Sqlite development database\n\n\n\nTest it out\n\n\nThe scaffolding step has generated you a working project - so let's check that out\n\n\ncd mynewapp\npython manage.py runserver\n\n\n\n\nIf you now visit \nhttp://localhost:8000\n in your browser, you should see the standard login screen:\n\n\n\n\nThe scaffolding step created you a superuser, so try logging in with the credentials:\n\n\n\n\nUsername: \nsuper\n\n\nPassword:  \nsuper1\n\n\n\n\nWhen you log in you should be presented with a welcome screen that shows you the three\nareas that are enabled by default - team lists, search and the admin area.\n\n\n\n\nOPAL applications are a collection of single page Angular apps that talk to the Django\nserver-side layer via JSON APIs. The Team Lists and Search options here are two examples of\nfront-end Angular single page apps.\n\n\nTeam lists\n\n\nMost clinical services will need at some stage to generate a list of patients - so OPAL provides\nthis functionality enabled by default.\n\n\nThe \nlist view\n is a spreadhseet-style list of patients - try navigating\nto the list view and adding a patient with the \nadd patient\n button.\n\n\n\n\nEach column contains a different type of information about a patient, while each\nrow represents one patient.\n\n\n\nStrictly speaking each row is an \nepisode\n\nof care for a patient - but we'll come to that in a second.\n\n\n\n\nThe columns you see initially are just a few of the standard clinical models that come with\nOPAL - for instance the Diagnosis model in your new application inherits from a model that\nlooks a lot like this:\n\n\nclass Diagnosis(EpisodeSubrecord):\n    condition         = ForeignKeyOrFreeText(Condition)\n    provisional       = models.BooleanField(default=False)\n    details           = models.CharField(max_length=255, blank=True)\n    date_of_diagnosis = models.DateField(blank=True, null=True)\n\n    class Meta:\n        abstract = True\n\n\n\nLookup Lists\n\n\nYou will notice that the condition field has a custom field type - \nForeignKeyOrFreeText\n.\nThis is a custom field type that we use with OPAL when we want to use a\n\nLookup List\n.\n\n\nLookup Lists allow us to reference canonical lists of available terminology as a foreign key, while\nalso allowing synonymous terms, and a free text override. That means that we can ensure that\nwe record high quality coded data, while allowing users an easy way to enter unusual edge\ncases.\n\n\nYou'll need to import the data for a terminology before you can start to take advantage of that.\nFor now, let's use the reference data from elCID (An OPAL application maintained by Open Health Care):\n\n\nwget https://raw.githubusercontent.com/openhealthcare/elcid/master/data/lookuplists/lookuplists.json -P data/lookuplists\n\n\n\n\nBy convention, we store data in the \n./data/lookuplists\n directory of our project.\n\n\n\n\nNow let's import the data:\n\n\npython manage.py load_lookup_lists\n\n\n\nNow refresh your application and try adding a new diagnosis to your patient. As you start to type in\nthe condition field, you'l see that the conditions we just imported appear as suggestions:\n\n\n\n\nAdd your own data models\n\n\nSo far we've begun to get a sense of the batteries-included parts of OPAL,\nbut before long, you're going to need to create models for your own needs.\n\n\nMost OPAL models are \nSubrecords\n - they relate to either a patient, or\nan episode (an episode is for example, an admission to hospital).\n\n\nLet's see how that works by creating a TODO list model that is assigned to\nepisodes of care. In your \nmynewapp/models.py\n :\n\n\nclass TODOItem(models.EpisodeSubrecord):\n    job       = fields.CharField(max_length=200)\n    due_date  = fields.DateField(blank=True, null=True)\n    details   = fields.TextField(blank=True, null=True)\n    completed = fields.BooleanField(default=False)\n\n\n\nThis is simply a Django model, apart from the parent class \nmodels.EpisodeSubrecord\n\nwhich provides us with some extra functionality:\n\n\n\n\nA relationship to an episode, linked to a patient\n\n\nJSON APIs for creating, retrieving and updating it\n\n\nEnsuring that the OPAL Angular layer knows it exists\n\n\nSome metadata fields, like created, updated, created_by, updated_by\n\n\n\n\nNext, we're going to let OPAL take care of the boilerplate that we'll need to use this\nmodel in our application. From the commandline:\n\n\n$ opal scaffold mynewapp\n\n\n\nLet's take a look at what that did:\n\n\n\n\nIt created a Django migration\n\n\nIt ran that migration for you\n\n\nIt created a detail template \nmynewapp/templates/records/todo_item.html\n\n\nIt created a form template \nmynewapp/templates/forms/todo_item_forml.html\n\n\n\n\nDetail template\n\n\nThe default detail template simply displays each field on a new line:\n\n\nspan ng-show=\"item.job\"\n[[ item.job ]] \nbr /\n/span\n\n\nspan ng-show=\"item.due_date\"\n[[ item.due_date  | shortDate ]] \nbr /\n/span\n\n\nspan ng-show=\"item.details\"\n[[ item.details ]] \nbr /\n/span\n\n\nspan ng-show=\"item.completed\"\n[[ item.completed ]] \nbr /\n/span\n\n\n\n\nForm template\n\n\nThe default form template will display each field on a new line, with some basic\nappropriate form field types set.\nIt uses the OPAL form helpers templatetag library.\n\n\n{% load forms %}\n{% input  field=\nTODOItem.job\n  %}\n{% datepicker  field=\nTODOItem.due_date\n  %}\n{% textarea  field=\nTODOItem.details\n  %}\n{% checkbox  field=\nTODOItem.completed\n  %}\n\n\n\n\nAdding TODOs to our Team Lists\n\n\nNow let's add our TODO list model as a column in the Spreadsheet-like list view.\n\n\nPatient Lists in OPAL are subclasses of \nopal.core.patient_lists.PatientList\n, and\nthey live in \npatient_lists.py\n files of our Django apps.\n\n\n\nTechnically these can live anywhere you like - although if you put them in other places\nyou're responsible for making sure that they're imported at startup.\n\nOPAL guarantees\nto autodiscover lists in `app.patient_list` modules.\n\n\n\n\nYou can see the basic list that the OPAL application scaffold created for you in\n\nyournewapp/patient_lists.py\n.\n\n\nclass AllPatientsList(core.patient_lists.PatientList):\n    display_name = 'All Patients'\n\n    schema = [\n        models.Demographics,\n        models.Diagnosis,\n        models.Treatment\n    ]\n\n    def get_queryset(self):\n        return Episode.objects.all()\n\n\n\n\nThe columns for lists are set in the \nschema\n property of the PatientList class. To add\nour TODO model to the list, just add the model to the schema:\n\n\n    schema = [\n        models.Demographics,\n        models.Diagnosis,\n        models.Treatment,\n        models.TODOItem\n    ]\n\n\n\n\nRefresh the lists page in your browser, and you'll see your new column on the end - add a\nTODO item, noting how we automatically get appropriate form types like datepickers and\ncheckboxes.\n\n\nYou can edit any entry in the list view by double clicking on it.\n\n\nTweaking the default scaffolding\n\n\nThe scaffolding templates are only really supposed to get you started - you'll often\nneed to tweak the templates they generate with whatever logic makes sense for your\napplication.\n\n\nFor us, you'll notice that the value of \nTODOItem.completed\n simply displays as false -\nwhich is not particularly useful. So let's update that using the OPAL\n\nBoxed filter\n. In \nmynewapp/templates/records/todo_item.html\n\nchange the last line to look like this:\n\n\nspan ng-show=\"item.completed\"\n[[ item.completed | boxed ]] \nbr /\n/span\n\n\n\n\nSet an Icon for your model\n\n\nYou'll notice that your new column is the only one without an icon - we set the icon by\nadding the following property to your \nTODOItem\n class:\n\n\n    _icon = 'fa fa-th-list'\n\n\n\nSome other batteries included\n\n\nLet's take a look at some of the other core functionality that we now have out of the box:\n\n\nSearch\n\n\nBy default, we also enable the search module, which allows you to search by patient name\nor unique identifier:\n\n\n\n\nDetail views\n\n\nWe also have a detail view for our patients, which you can access via search results. This\nview will typically allow for a more detailed display and editing of all the events\ncomprising a patient's care than is available on the list page.\n\n\n\n\nJSON APIs\n\n\nOPAL automatically creates self-documenting JSON APIs for your interacting with the data\nin your application. You can inspect these APIs interactively at the url:\n\n\nhttp://localhost:8000/api/v0.1/\n\n\n\n\n\nWhat next?\n\n\nThis is just a glimpse at the full range of functionality that comes with OPAL - there is\nmuch more to discover in the \nTopic Guides\n.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#writing-a-clinical-service-with-opal", 
            "text": "This tutorial will walk you through the creation of a new OPAL service.  The application we're going to be building will help clinical users to manage the patients on a ward in a hospital.  \nAs a Doctor  \nI want to know what's going on with the patients under my care \nSo that I can treat them effectively and safely.", 
            "title": "Writing a clinical service with OPAL"
        }, 
        {
            "location": "/tutorial/#bootstrapping-a-new-project", 
            "text": "We assume that you've already  Installed OPAL . You can tell which version of opal is installed\nby running this command  $ opal --version  At the start a new project, OPAL will bootstrap the initial project structure, including\na Djano project, some core datamodels (complete with JSON APIs) and a general application structure.  From the commandline:  $ opal startproject mynewapp  This will create a mynewap directory where your new project lives.  Let's have a look at what that created for you:  mynewapp/                   # Your project directory\n    LICENSE                 # A dummy LICENSE file\n    Procfile                # A procfile ready for deployment to e.g. Heroku\n    README.md\n    manage.py               # Django's manage.py script\n    requirements.txt        # Requirements file ready for your project\n\n    data/                   # A dummy directory for fixtures\n        lookuplists/        # A dummy directory for reference data\n\n    mynewapp/               # The actual python package for your application\n         __init__.py\n        models.py           # Data models for your application\n        settings.py         # Helpfully tweaked Django settings\n        tests.py            # Dummy unittests\n        urls.py             # Django Urlconf\n        wsgi.py\n\n        assets/             # Your static files directory\n        templates/          # Your template directory\n        migrations/         # Your Database migrations directory\n\n        opal.sqlite         # The Sqlite development database", 
            "title": "Bootstrapping a new project"
        }, 
        {
            "location": "/tutorial/#test-it-out", 
            "text": "The scaffolding step has generated you a working project - so let's check that out  cd mynewapp\npython manage.py runserver  If you now visit  http://localhost:8000  in your browser, you should see the standard login screen:   The scaffolding step created you a superuser, so try logging in with the credentials:   Username:  super  Password:   super1   When you log in you should be presented with a welcome screen that shows you the three\nareas that are enabled by default - team lists, search and the admin area.   OPAL applications are a collection of single page Angular apps that talk to the Django\nserver-side layer via JSON APIs. The Team Lists and Search options here are two examples of\nfront-end Angular single page apps.", 
            "title": "Test it out"
        }, 
        {
            "location": "/tutorial/#team-lists", 
            "text": "Most clinical services will need at some stage to generate a list of patients - so OPAL provides\nthis functionality enabled by default.  The  list view  is a spreadhseet-style list of patients - try navigating\nto the list view and adding a patient with the  add patient  button.   Each column contains a different type of information about a patient, while each\nrow represents one patient.  \nStrictly speaking each row is an  episode \nof care for a patient - but we'll come to that in a second.  The columns you see initially are just a few of the standard clinical models that come with\nOPAL - for instance the Diagnosis model in your new application inherits from a model that\nlooks a lot like this:  class Diagnosis(EpisodeSubrecord):\n    condition         = ForeignKeyOrFreeText(Condition)\n    provisional       = models.BooleanField(default=False)\n    details           = models.CharField(max_length=255, blank=True)\n    date_of_diagnosis = models.DateField(blank=True, null=True)\n\n    class Meta:\n        abstract = True", 
            "title": "Team lists"
        }, 
        {
            "location": "/tutorial/#lookup-lists", 
            "text": "You will notice that the condition field has a custom field type -  ForeignKeyOrFreeText .\nThis is a custom field type that we use with OPAL when we want to use a Lookup List .  Lookup Lists allow us to reference canonical lists of available terminology as a foreign key, while\nalso allowing synonymous terms, and a free text override. That means that we can ensure that\nwe record high quality coded data, while allowing users an easy way to enter unusual edge\ncases.  You'll need to import the data for a terminology before you can start to take advantage of that.\nFor now, let's use the reference data from elCID (An OPAL application maintained by Open Health Care):  wget https://raw.githubusercontent.com/openhealthcare/elcid/master/data/lookuplists/lookuplists.json -P data/lookuplists  \nBy convention, we store data in the  ./data/lookuplists  directory of our project.  Now let's import the data:  python manage.py load_lookup_lists  Now refresh your application and try adding a new diagnosis to your patient. As you start to type in\nthe condition field, you'l see that the conditions we just imported appear as suggestions:", 
            "title": "Lookup Lists"
        }, 
        {
            "location": "/tutorial/#add-your-own-data-models", 
            "text": "So far we've begun to get a sense of the batteries-included parts of OPAL,\nbut before long, you're going to need to create models for your own needs.  Most OPAL models are  Subrecords  - they relate to either a patient, or\nan episode (an episode is for example, an admission to hospital).  Let's see how that works by creating a TODO list model that is assigned to\nepisodes of care. In your  mynewapp/models.py  :  class TODOItem(models.EpisodeSubrecord):\n    job       = fields.CharField(max_length=200)\n    due_date  = fields.DateField(blank=True, null=True)\n    details   = fields.TextField(blank=True, null=True)\n    completed = fields.BooleanField(default=False)  This is simply a Django model, apart from the parent class  models.EpisodeSubrecord \nwhich provides us with some extra functionality:   A relationship to an episode, linked to a patient  JSON APIs for creating, retrieving and updating it  Ensuring that the OPAL Angular layer knows it exists  Some metadata fields, like created, updated, created_by, updated_by   Next, we're going to let OPAL take care of the boilerplate that we'll need to use this\nmodel in our application. From the commandline:  $ opal scaffold mynewapp  Let's take a look at what that did:   It created a Django migration  It ran that migration for you  It created a detail template  mynewapp/templates/records/todo_item.html  It created a form template  mynewapp/templates/forms/todo_item_forml.html", 
            "title": "Add your own data models"
        }, 
        {
            "location": "/tutorial/#detail-template", 
            "text": "The default detail template simply displays each field on a new line:  span ng-show=\"item.job\" [[ item.job ]]  br / /span  span ng-show=\"item.due_date\" [[ item.due_date  | shortDate ]]  br / /span  span ng-show=\"item.details\" [[ item.details ]]  br / /span  span ng-show=\"item.completed\" [[ item.completed ]]  br / /span", 
            "title": "Detail template"
        }, 
        {
            "location": "/tutorial/#form-template", 
            "text": "The default form template will display each field on a new line, with some basic\nappropriate form field types set.\nIt uses the OPAL form helpers templatetag library.  {% load forms %}\n{% input  field= TODOItem.job   %}\n{% datepicker  field= TODOItem.due_date   %}\n{% textarea  field= TODOItem.details   %}\n{% checkbox  field= TODOItem.completed   %}", 
            "title": "Form template"
        }, 
        {
            "location": "/tutorial/#adding-todos-to-our-team-lists", 
            "text": "Now let's add our TODO list model as a column in the Spreadsheet-like list view.  Patient Lists in OPAL are subclasses of  opal.core.patient_lists.PatientList , and\nthey live in  patient_lists.py  files of our Django apps.  \nTechnically these can live anywhere you like - although if you put them in other places\nyou're responsible for making sure that they're imported at startup. OPAL guarantees\nto autodiscover lists in `app.patient_list` modules.  You can see the basic list that the OPAL application scaffold created for you in yournewapp/patient_lists.py .  class AllPatientsList(core.patient_lists.PatientList):\n    display_name = 'All Patients'\n\n    schema = [\n        models.Demographics,\n        models.Diagnosis,\n        models.Treatment\n    ]\n\n    def get_queryset(self):\n        return Episode.objects.all()  The columns for lists are set in the  schema  property of the PatientList class. To add\nour TODO model to the list, just add the model to the schema:      schema = [\n        models.Demographics,\n        models.Diagnosis,\n        models.Treatment,\n        models.TODOItem\n    ]  Refresh the lists page in your browser, and you'll see your new column on the end - add a\nTODO item, noting how we automatically get appropriate form types like datepickers and\ncheckboxes.  You can edit any entry in the list view by double clicking on it.", 
            "title": "Adding TODOs to our Team Lists"
        }, 
        {
            "location": "/tutorial/#tweaking-the-default-scaffolding", 
            "text": "The scaffolding templates are only really supposed to get you started - you'll often\nneed to tweak the templates they generate with whatever logic makes sense for your\napplication.  For us, you'll notice that the value of  TODOItem.completed  simply displays as false -\nwhich is not particularly useful. So let's update that using the OPAL Boxed filter . In  mynewapp/templates/records/todo_item.html \nchange the last line to look like this:  span ng-show=\"item.completed\" [[ item.completed | boxed ]]  br / /span", 
            "title": "Tweaking the default scaffolding"
        }, 
        {
            "location": "/tutorial/#set-an-icon-for-your-model", 
            "text": "You'll notice that your new column is the only one without an icon - we set the icon by\nadding the following property to your  TODOItem  class:      _icon = 'fa fa-th-list'", 
            "title": "Set an Icon for your model"
        }, 
        {
            "location": "/tutorial/#some-other-batteries-included", 
            "text": "Let's take a look at some of the other core functionality that we now have out of the box:", 
            "title": "Some other batteries included"
        }, 
        {
            "location": "/tutorial/#search", 
            "text": "By default, we also enable the search module, which allows you to search by patient name\nor unique identifier:", 
            "title": "Search"
        }, 
        {
            "location": "/tutorial/#detail-views", 
            "text": "We also have a detail view for our patients, which you can access via search results. This\nview will typically allow for a more detailed display and editing of all the events\ncomprising a patient's care than is available on the list page.", 
            "title": "Detail views"
        }, 
        {
            "location": "/tutorial/#json-apis", 
            "text": "OPAL automatically creates self-documenting JSON APIs for your interacting with the data\nin your application. You can inspect these APIs interactively at the url:  http://localhost:8000/api/v0.1/", 
            "title": "JSON APIs"
        }, 
        {
            "location": "/tutorial/#what-next", 
            "text": "This is just a glimpse at the full range of functionality that comes with OPAL - there is\nmuch more to discover in the  Topic Guides .", 
            "title": "What next?"
        }, 
        {
            "location": "/guides/topic-guides/", 
            "text": "OPAL Guides\n\n\nA list of all available topic guides.\n\n\nOPAL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOPAL - Applications, Plugins\n\n\nHow OPAL components hang together\n\n\n\n\n\n\nCommand line tool\n\n\nrunning admin tasks from the command line\n\n\n\n\n\n\nDiscoverable\n\n\ndesign patterns and library for creating easily reusable features\n\n\n\n\n\n\nPlugins\n\n\nAvailable interfaces for OPAL plugins\n\n\n\n\n\n\nList of Plugins\n\n\nA list of available high quality plugins\n\n\n\n\n\n\n\n\nData and Business Logic\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Model\n\n\nHow OPAL models clinical reality\n\n\n\n\n\n\nCore Clinical Model\n\n\nThe core clinical data model available to OPAL applications\n\n\n\n\n\n\nReference data\n\n\nCanonical coded terms and reference data\n\n\n\n\n\n\nApp metadata\n\n\nWorking with Metadata on the front end\n\n\n\n\n\n\nFlow\n\n\nHooks to customise key moments in a patient's flow through a clinical service\n\n\n\n\n\n\nAngular models\n\n\nWorking with Clinical data in Angular\n\n\n\n\n\n\nRoles \n Permissions\n\n\nHow we handle authorization in OPAL\n\n\n\n\n\n\nTagging\n\n\nTagging episodes in OPAL\n\n\n\n\n\n\nJSON API\n\n\nThe OPAL JSON API\n\n\n\n\n\n\n\n\nPresentation and templating\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTemplates\n\n\nServer and client side templating\n\n\n\n\n\n\nDefault Context Processors\n\n\nOPAL Django context processors\n\n\n\n\n\n\nStatic Files\n\n\nHow OPAL handles static files\n\n\n\n\n\n\nForms\n\n\nForms for entering or editing data\n\n\n\n\n\n\nPatient Detail Views\n\n\nDetailed views of a Patient\n\n\n\n\n\n\nPatient List Views\n\n\nLists of patients\n\n\n\n\n\n\n\n\nOptional Components\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSearch\n\n\nDefault search implementation", 
            "title": "Guides"
        }, 
        {
            "location": "/guides/topic-guides/#opal-guides", 
            "text": "A list of all available topic guides.", 
            "title": "OPAL Guides"
        }, 
        {
            "location": "/guides/topic-guides/#opal", 
            "text": "OPAL - Applications, Plugins  How OPAL components hang together    Command line tool  running admin tasks from the command line    Discoverable  design patterns and library for creating easily reusable features    Plugins  Available interfaces for OPAL plugins    List of Plugins  A list of available high quality plugins", 
            "title": "OPAL"
        }, 
        {
            "location": "/guides/topic-guides/#data-and-business-logic", 
            "text": "Data Model  How OPAL models clinical reality    Core Clinical Model  The core clinical data model available to OPAL applications    Reference data  Canonical coded terms and reference data    App metadata  Working with Metadata on the front end    Flow  Hooks to customise key moments in a patient's flow through a clinical service    Angular models  Working with Clinical data in Angular    Roles   Permissions  How we handle authorization in OPAL    Tagging  Tagging episodes in OPAL    JSON API  The OPAL JSON API", 
            "title": "Data and Business Logic"
        }, 
        {
            "location": "/guides/topic-guides/#presentation-and-templating", 
            "text": "Templates  Server and client side templating    Default Context Processors  OPAL Django context processors    Static Files  How OPAL handles static files    Forms  Forms for entering or editing data    Patient Detail Views  Detailed views of a Patient    Patient List Views  Lists of patients", 
            "title": "Presentation and templating"
        }, 
        {
            "location": "/guides/topic-guides/#optional-components", 
            "text": "Search  Default search implementation", 
            "title": "Optional Components"
        }, 
        {
            "location": "/reference/reference_guides/", 
            "text": "OPAL Reference material\n\n\nThe following reference guides are available:\n\n\nModels\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nopal.models.Episode\n\n\nThe central Episode model\n\n\n\n\n\n\nopal.models.Patient\n\n\nThe Patient model\n\n\n\n\n\n\nopal.models.Subrecord\n\n\nfor subrecords of Episodes or Patients\n\n\n\n\n\n\nopal.models.*\n\n\nMixin helpers for useful functionality\n\n\n\n\n\n\n\n\nOPAL Core\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nopal.core.application\n\n\nOPAL Application objects\n\n\n\n\n\n\nopal.core.detail\n\n\nDetail Views - Custom views over one or many episodes.\n\n\n\n\n\n\nopal.core.episodes\n\n\nEpisode Categories - Controlling the behaviour of different types of episode\n\n\n\n\n\n\nopal.core.schemas\n\n\nSchemas - Dynamic columns for the table views\n\n\n\n\n\n\nopal.core.patient_lists\n\n\nPatient Lists - defining different types of list\n\n\n\n\n\n\n\n\nAngular Services\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEpisode\n\n\nEpisode objects\n\n\n\n\n\n\nItem\n\n\nSubrecord objects\n\n\n\n\n\n\nPatientSummary\n\n\nPatient search result summaries\n\n\n\n\n\n\nSearch Services\n\n\nServices from the Search module\n\n\n\n\n\n\n\n\nHelper libraries\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe forms Templatetag library\n\n\nThe building blocks for OPAL forms\n\n\n\n\n\n\nThe panels Templatetag library\n\n\nRendering record panels\n\n\n\n\n\n\nJavascript Helpers\n\n\nAngular filters and $rootScope methods\n\n\n\n\n\n\n\n\nOPAL Search module\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMaking Search Queries\n\n\nSearch query backends and helper functions\n\n\n\n\n\n\n\n\nMiscenlaneous documentation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChangelog\n\n\nOPAL Changelog\n\n\n\n\n\n\nUpgrading\n\n\nUpgrading between OPAL versions\n\n\n\n\n\n\nJavascript dependencies\n\n\nExternal javascript libraries available\n\n\n\n\n\n\nTesting\n\n\nTesting", 
            "title": "Reference"
        }, 
        {
            "location": "/reference/reference_guides/#opal-reference-material", 
            "text": "The following reference guides are available:", 
            "title": "OPAL Reference material"
        }, 
        {
            "location": "/reference/reference_guides/#models", 
            "text": "opal.models.Episode  The central Episode model    opal.models.Patient  The Patient model    opal.models.Subrecord  for subrecords of Episodes or Patients    opal.models.*  Mixin helpers for useful functionality", 
            "title": "Models"
        }, 
        {
            "location": "/reference/reference_guides/#opal-core", 
            "text": "opal.core.application  OPAL Application objects    opal.core.detail  Detail Views - Custom views over one or many episodes.    opal.core.episodes  Episode Categories - Controlling the behaviour of different types of episode    opal.core.schemas  Schemas - Dynamic columns for the table views    opal.core.patient_lists  Patient Lists - defining different types of list", 
            "title": "OPAL Core"
        }, 
        {
            "location": "/reference/reference_guides/#angular-services", 
            "text": "Episode  Episode objects    Item  Subrecord objects    PatientSummary  Patient search result summaries    Search Services  Services from the Search module", 
            "title": "Angular Services"
        }, 
        {
            "location": "/reference/reference_guides/#helper-libraries", 
            "text": "The forms Templatetag library  The building blocks for OPAL forms    The panels Templatetag library  Rendering record panels    Javascript Helpers  Angular filters and $rootScope methods", 
            "title": "Helper libraries"
        }, 
        {
            "location": "/reference/reference_guides/#opal-search-module", 
            "text": "Making Search Queries  Search query backends and helper functions", 
            "title": "OPAL Search module"
        }, 
        {
            "location": "/reference/reference_guides/#miscenlaneous-documentation", 
            "text": "Changelog  OPAL Changelog    Upgrading  Upgrading between OPAL versions    Javascript dependencies  External javascript libraries available    Testing  Testing", 
            "title": "Miscenlaneous documentation"
        }, 
        {
            "location": "/guides/components_overview/", 
            "text": "Components of an OPAL application\n\n\nOPAL applications will typically be made up of several types of components.\n\n\n\n\nOPAL\n\n\nThe core OPAL framework provides you with a range of commonly required elements\nof clinical applications.\n\n\nIt contains a core \ndata model\n for persisting clinical information,\nas well core clinical archetypes out of the box that build on many\nyears of collaboratively modelling clinical concepts by medical domain experts.\n\n\nOPAL also makes it easy to integrate standard clinical \nreference data\n\ninto your application - things like medical diagnoses, tests, drugs et cetera.\n\n\nSome common functional components end up in to most clinical applications, and many\nof these come with OPAL as \"batteries included\" - immediately available modular features\nthat can be simply re-used without having to reinvent the wheel.\n\n\nFor example:\n\n\n\n\nPatient lists\n\n\nSearch\n\n\nAuthentication and \nPermissions\n\n\nForms for data entry\n\n\nJSON based REST APIs\n for all of your models\n\n\n... and \nmany more\n...\n\n\n\n\nPlugins\n\n\nOPAL plugins are intended to provide high quality generic, composable, re-usable chunks of\nfunctionality that can be \"dropped in\" to an application. For example, installing the\n\nDashboards\n plugin allows you to easily\ncreate clinical dashboards within your application. The\n\nReferral\n plugin provides the plumbing for\nbuilding complex inter-team referrals within an institution.\n\n\nPlugins have a \nrich plugin API\n they can hook into to, and\nmany examples can be found by inspecting the source of \nexisting plugins\n.\n\n\nApplications\n\n\nAn application is the collection of configuration and bespoke functionality that would be\nprovided to an individual institution - it's the thing that you would look to deploy.\n\n\nExample applications include \nelCID\n - a for managing\ninfection patients, or \nOPAL-Renal\n - an MDT \n\nhandover tool for Renal wards.\n\n\nA hospital might have multiple clinical services running on one application, or multiple\napplications that integrate with one another.\n\n\nOpinionated but Pluggable\n\n\nOPAL is an opinionated framework. It expects the developer to structure code in a\ncertain way.\n\n\nOPAL expects features to be implemented as single page Angular.js applications, with the server\nmostly figuring as an API endpoint for reading and writing data.\n\n\nThat said, the technology stack of Django, Angular \n Bootstrap allows the confident user a huge\ndegree of flexibility when writing their own applications and plugins.\n\n\nFor instance, there is nothing to \nstop\n a developer from implementing a part of the functionality\nin some other Javascript framework, and simply calling the \nJSON API\n. However, by\ndoing so, the developer will lose a large collection of pre-existing libraries, conventions et cetera.\nWhile possible, this approach is not likely to be officially supported in the medium term.", 
            "title": "Component Overview"
        }, 
        {
            "location": "/guides/components_overview/#components-of-an-opal-application", 
            "text": "OPAL applications will typically be made up of several types of components.", 
            "title": "Components of an OPAL application"
        }, 
        {
            "location": "/guides/components_overview/#opal", 
            "text": "The core OPAL framework provides you with a range of commonly required elements\nof clinical applications.  It contains a core  data model  for persisting clinical information,\nas well core clinical archetypes out of the box that build on many\nyears of collaboratively modelling clinical concepts by medical domain experts.  OPAL also makes it easy to integrate standard clinical  reference data \ninto your application - things like medical diagnoses, tests, drugs et cetera.  Some common functional components end up in to most clinical applications, and many\nof these come with OPAL as \"batteries included\" - immediately available modular features\nthat can be simply re-used without having to reinvent the wheel.  For example:   Patient lists  Search  Authentication and  Permissions  Forms for data entry  JSON based REST APIs  for all of your models  ... and  many more ...", 
            "title": "OPAL"
        }, 
        {
            "location": "/guides/components_overview/#plugins", 
            "text": "OPAL plugins are intended to provide high quality generic, composable, re-usable chunks of\nfunctionality that can be \"dropped in\" to an application. For example, installing the Dashboards  plugin allows you to easily\ncreate clinical dashboards within your application. The Referral  plugin provides the plumbing for\nbuilding complex inter-team referrals within an institution.  Plugins have a  rich plugin API  they can hook into to, and\nmany examples can be found by inspecting the source of  existing plugins .", 
            "title": "Plugins"
        }, 
        {
            "location": "/guides/components_overview/#applications", 
            "text": "An application is the collection of configuration and bespoke functionality that would be\nprovided to an individual institution - it's the thing that you would look to deploy.  Example applications include  elCID  - a for managing\ninfection patients, or  OPAL-Renal  - an MDT  \nhandover tool for Renal wards.  A hospital might have multiple clinical services running on one application, or multiple\napplications that integrate with one another.", 
            "title": "Applications"
        }, 
        {
            "location": "/guides/components_overview/#opinionated-but-pluggable", 
            "text": "OPAL is an opinionated framework. It expects the developer to structure code in a\ncertain way.  OPAL expects features to be implemented as single page Angular.js applications, with the server\nmostly figuring as an API endpoint for reading and writing data.  That said, the technology stack of Django, Angular   Bootstrap allows the confident user a huge\ndegree of flexibility when writing their own applications and plugins.  For instance, there is nothing to  stop  a developer from implementing a part of the functionality\nin some other Javascript framework, and simply calling the  JSON API . However, by\ndoing so, the developer will lose a large collection of pre-existing libraries, conventions et cetera.\nWhile possible, this approach is not likely to be officially supported in the medium term.", 
            "title": "Opinionated but Pluggable"
        }, 
        {
            "location": "/guides/command_line_tool/", 
            "text": "The OPAL Command line tool\n\n\nOPAL ships with a helpful command line tool that helps with administrative tasks.\n\n\nThe \nopal\n script should be on your system path if you installed OPAL via setup.py or\npip. You can check whether it is available by running this command:\n\n\n$ opal -v\n\n\n\nstartproject \nname\n\n\nCreates a new OPAL project.\n\n\nThis creates boilerplate and a default configuration for your new project, including\ncreating a new underlying Django project, updating default settings to be compatible\nwith OPAL, creating directories and code boilerplate, and running initial migrations.\n\n\nstartplugin \nname\n\n\nCreates boilerplate code, and directory structures for a new OPAL plugin.\n\n\nscaffold \nappname\n\n\nUse with new record models.\n\n\nCreates and runs automatic migrations, creates display and form (modal) templates.\n\n\nRunning with \n--dry-run\n will run makemigrations with \n--dry-run\n and print display\nand form templates that would be generated.\n\n\ntest \nwhat\n\n\nRun our tests suites.\n\n\nDefaults to running both Python and Javascript tests.\n\n\nIf specified, will only run one specific kind of test.\n\n\n$ opal test py\n   $ opal test js\n\n\nWhen running Python tests, the \n-t\n or \n--test\n option allows the user to specify a single\ntest module, case or method to run.\n\n\n$ opal test py -t opal.tests.test_models\n\n\ncheckout\n\n\nEnsure that all of our application plugins and packages are on the correct branch.\n\n\nThis is particularly useful when working on OPAL itself, or when you have multiple\nprojects that use different versions of OPAL or plugins. It will assume that github\nbased requirements will be installed in development via \npython setup.py develop\n.\n\n\nThis command will parse your project's \nrequirements.txt\n, and then ensure that any\nGithub sources are checked out loclaly to the branch specified therein.", 
            "title": "Command Line tool"
        }, 
        {
            "location": "/guides/command_line_tool/#the-opal-command-line-tool", 
            "text": "OPAL ships with a helpful command line tool that helps with administrative tasks.  The  opal  script should be on your system path if you installed OPAL via setup.py or\npip. You can check whether it is available by running this command:  $ opal -v", 
            "title": "The OPAL Command line tool"
        }, 
        {
            "location": "/guides/command_line_tool/#startproject-name", 
            "text": "Creates a new OPAL project.  This creates boilerplate and a default configuration for your new project, including\ncreating a new underlying Django project, updating default settings to be compatible\nwith OPAL, creating directories and code boilerplate, and running initial migrations.", 
            "title": "startproject &lt;name&gt;"
        }, 
        {
            "location": "/guides/command_line_tool/#startplugin-name", 
            "text": "Creates boilerplate code, and directory structures for a new OPAL plugin.", 
            "title": "startplugin &lt;name&gt;"
        }, 
        {
            "location": "/guides/command_line_tool/#scaffold-appname", 
            "text": "Use with new record models.  Creates and runs automatic migrations, creates display and form (modal) templates.  Running with  --dry-run  will run makemigrations with  --dry-run  and print display\nand form templates that would be generated.", 
            "title": "scaffold &lt;appname&gt;"
        }, 
        {
            "location": "/guides/command_line_tool/#test-what", 
            "text": "Run our tests suites.  Defaults to running both Python and Javascript tests.  If specified, will only run one specific kind of test.  $ opal test py\n   $ opal test js  When running Python tests, the  -t  or  --test  option allows the user to specify a single\ntest module, case or method to run.  $ opal test py -t opal.tests.test_models", 
            "title": "test &lt;what&gt;"
        }, 
        {
            "location": "/guides/command_line_tool/#checkout", 
            "text": "Ensure that all of our application plugins and packages are on the correct branch.  This is particularly useful when working on OPAL itself, or when you have multiple\nprojects that use different versions of OPAL or plugins. It will assume that github\nbased requirements will be installed in development via  python setup.py develop .  This command will parse your project's  requirements.txt , and then ensure that any\nGithub sources are checked out loclaly to the branch specified therein.", 
            "title": "checkout"
        }, 
        {
            "location": "/guides/plugins/", 
            "text": "Writing Plugins\n\n\nOPAL Plugins are Django apps on the server side, and collections of angular.js\nmodels for the client.\n\n\nGetting started with your plugin\n\n\nThe OPAL commandline tool will bootstrap your plugin for you - just run:\n\n\n$ opal startplugin yourcoolplugin\n\n\n\nAdding Discoverable Functionality\n\n\nA common pattern for plugins is to add functionality that other plugins or applications\ncan use by inheriting a base class that you define in a file with a magic name. (In\nmuch the same way that Django provides models.)\n\n\nFor example, if you're creating an appointments plugin that helps people to book and schedule\nappointments in clinics, you would create a base \nClinic\n class that can be subclassed to\ncreate specific clinics.\n\n\nclass Clinic(opal.core.discoverable.DiscoverableFeature):\n    module_name = 'clinics'\n\n\n\nWe can then create clinics in any installed app, and they will be available from \nClinic.list()\n\n\nclass OutpatientsClinic(Clinic):\n    name = 'Outpatients'\n\n    # Add your custom clnic functionality here e.g.\n    def book_appointment(self, date, patient):\n        pass\n\n\nClinic.list()\n# -\n Generator including OutPatientsClinic\n\nClinic.get('outpatients)\n# -\n OutpatientsClinic\n\n\n\nDefining new flows\n\n\nPlugins can define flows. They should return a dictionary of flows from the\nflows() method of the plugin class.\n\n\nGetting a plugin directory\n\n\nEach plugin has a \ndirectory()\n method that returns\nthe file system location of the module.\n\n\nAdding URLS\n\n\nAdd an urls.py, then add to your plugin class as YourPlugin.urls\n\n\nNaturally, these can point to views in your plugin!\n\n\nAdding Javascript\n\n\nadd to static, then add to your plugin class as YourPlugin.javascripts\n\n\nThere are some restricted namespaces for these...\n\n\nAdding APIs\n\n\nOPAL uses Django Rest Framweork to provide APIs, and you may add to these from your plugin.\nBy convention, APIs live in \nyourplugin/api.py\n. You are expected to provide a\n\nrest_framework.viewsets.ViewSet\n subclass, which you then detail as the \n.apis\n attribute\nof your plugin.\n\n\n# yourplugin/api.py\nfrom rest_framework.viewsets import ViewSet\nfrom rest_framework.response import Response\n\nclass PingViewSet(ViewSet):\n    def list(self, request): return Response('pong')\n\n# yourplugin/__init__.py\nfrom opal.core.plugins import OpalPlugin\nfrom yourplugin import api\n\nclass YourPlugin(OpalPlugin):\n    apis = [\n        ('ping', api.PingViewSet)\n    ]\n\n\n\nThese APIs will then be available and self-documenting fom the standard OPAL url \n/api/v0.1/\n\n\nPermissioning\n\n\nDevelopers are strongly encouraged to ensure that APIs which\nserve patient data are restricted to logged in users. Django Rest Framework \nViewSet\n classes\nhave an \nextensive permissioning system\n.\n\n\nOpal ships with the base ViewSet class \nopal.core.api.LoginRequiredViewset\n which adds the Django\nRest Framework permission class IsAuthenticated to your viewset.\n\n\n    class PingViewSet(LoginRequiredViewset):\n        def list(self, request):\n            return Response('pong')\n\n\n\n\nAdding Actions to the sidebar\n\n\nActions can be added to the sidebar by setting the \nactions\n attribute of your plugin.\nActions is expected to be an iterable of strings which are templates to be included in\nthe sidebar. By convention, actions will live in \n./templates/actions/\n .\n\n\n# __init__.py:\nclass Plugin(OpalPlugin):\n    actions = ('actions/javascript_alert.html', 'actions/dummy_button.html')\n\n\n\nAnd then in the template:\n\n\np ng-show=\"episode.category == 'YourEpisodeCategory'\"\n\n  \nbutton class=\"btn btn-primary\" ng-click=\"alert('Boom!')\"\n\n    \ni href=\"fa fa-warning\"\n/i\n\n    ALERT ME\n  \n/button\n\n\n/p\n\n\n\n\nAdding dependencies globally to our angular modules\n\n\nDependencies listed in \nangular_module_deps\n will be added to all Angular modules (as long as they\nuse the OPAL.module() API. If not, you're on your own. We could monkey patch angular.module, but we\nwon't for now.\n\n\nInstalling plugins\n\n\nAdd to installed apps\nAdd to requirements if appropriate\n\n\nAdding extra markup to the \n tag\n\n\nAny templates you define in the property .head_extra will be included in the", 
            "title": "Plugins"
        }, 
        {
            "location": "/guides/plugins/#writing-plugins", 
            "text": "OPAL Plugins are Django apps on the server side, and collections of angular.js\nmodels for the client.", 
            "title": "Writing Plugins"
        }, 
        {
            "location": "/guides/plugins/#getting-started-with-your-plugin", 
            "text": "The OPAL commandline tool will bootstrap your plugin for you - just run:  $ opal startplugin yourcoolplugin", 
            "title": "Getting started with your plugin"
        }, 
        {
            "location": "/guides/plugins/#adding-discoverable-functionality", 
            "text": "A common pattern for plugins is to add functionality that other plugins or applications\ncan use by inheriting a base class that you define in a file with a magic name. (In\nmuch the same way that Django provides models.)  For example, if you're creating an appointments plugin that helps people to book and schedule\nappointments in clinics, you would create a base  Clinic  class that can be subclassed to\ncreate specific clinics.  class Clinic(opal.core.discoverable.DiscoverableFeature):\n    module_name = 'clinics'  We can then create clinics in any installed app, and they will be available from  Clinic.list()  class OutpatientsClinic(Clinic):\n    name = 'Outpatients'\n\n    # Add your custom clnic functionality here e.g.\n    def book_appointment(self, date, patient):\n        pass\n\n\nClinic.list()\n# -  Generator including OutPatientsClinic\n\nClinic.get('outpatients)\n# -  OutpatientsClinic", 
            "title": "Adding Discoverable Functionality"
        }, 
        {
            "location": "/guides/plugins/#defining-new-flows", 
            "text": "Plugins can define flows. They should return a dictionary of flows from the\nflows() method of the plugin class.", 
            "title": "Defining new flows"
        }, 
        {
            "location": "/guides/plugins/#getting-a-plugin-directory", 
            "text": "Each plugin has a  directory()  method that returns\nthe file system location of the module.", 
            "title": "Getting a plugin directory"
        }, 
        {
            "location": "/guides/plugins/#adding-urls", 
            "text": "Add an urls.py, then add to your plugin class as YourPlugin.urls  Naturally, these can point to views in your plugin!", 
            "title": "Adding URLS"
        }, 
        {
            "location": "/guides/plugins/#adding-javascript", 
            "text": "add to static, then add to your plugin class as YourPlugin.javascripts  There are some restricted namespaces for these...", 
            "title": "Adding Javascript"
        }, 
        {
            "location": "/guides/plugins/#adding-apis", 
            "text": "OPAL uses Django Rest Framweork to provide APIs, and you may add to these from your plugin.\nBy convention, APIs live in  yourplugin/api.py . You are expected to provide a rest_framework.viewsets.ViewSet  subclass, which you then detail as the  .apis  attribute\nof your plugin.  # yourplugin/api.py\nfrom rest_framework.viewsets import ViewSet\nfrom rest_framework.response import Response\n\nclass PingViewSet(ViewSet):\n    def list(self, request): return Response('pong')\n\n# yourplugin/__init__.py\nfrom opal.core.plugins import OpalPlugin\nfrom yourplugin import api\n\nclass YourPlugin(OpalPlugin):\n    apis = [\n        ('ping', api.PingViewSet)\n    ]  These APIs will then be available and self-documenting fom the standard OPAL url  /api/v0.1/", 
            "title": "Adding APIs"
        }, 
        {
            "location": "/guides/plugins/#permissioning", 
            "text": "Developers are strongly encouraged to ensure that APIs which\nserve patient data are restricted to logged in users. Django Rest Framework  ViewSet  classes\nhave an  extensive permissioning system .  Opal ships with the base ViewSet class  opal.core.api.LoginRequiredViewset  which adds the Django\nRest Framework permission class IsAuthenticated to your viewset.      class PingViewSet(LoginRequiredViewset):\n        def list(self, request):\n            return Response('pong')", 
            "title": "Permissioning"
        }, 
        {
            "location": "/guides/plugins/#adding-actions-to-the-sidebar", 
            "text": "Actions can be added to the sidebar by setting the  actions  attribute of your plugin.\nActions is expected to be an iterable of strings which are templates to be included in\nthe sidebar. By convention, actions will live in  ./templates/actions/  .  # __init__.py:\nclass Plugin(OpalPlugin):\n    actions = ('actions/javascript_alert.html', 'actions/dummy_button.html')  And then in the template:  p ng-show=\"episode.category == 'YourEpisodeCategory'\" \n   button class=\"btn btn-primary\" ng-click=\"alert('Boom!')\" \n     i href=\"fa fa-warning\" /i \n    ALERT ME\n   /button  /p", 
            "title": "Adding Actions to the sidebar"
        }, 
        {
            "location": "/guides/plugins/#adding-dependencies-globally-to-our-angular-modules", 
            "text": "Dependencies listed in  angular_module_deps  will be added to all Angular modules (as long as they\nuse the OPAL.module() API. If not, you're on your own. We could monkey patch angular.module, but we\nwon't for now.", 
            "title": "Adding dependencies globally to our angular modules"
        }, 
        {
            "location": "/guides/plugins/#installing-plugins", 
            "text": "Add to installed apps\nAdd to requirements if appropriate", 
            "title": "Installing plugins"
        }, 
        {
            "location": "/guides/plugins/#adding-extra-markup-to-the-tag", 
            "text": "Any templates you define in the property .head_extra will be included in the", 
            "title": "Adding extra markup to the  tag"
        }, 
        {
            "location": "/guides/plugins_list/", 
            "text": "OPAL Plugins list\n\n\nThe OPAL ecosystem has a rich array of re-usable Open Source plugins that can be used as composable\nunits of functionality to build your application. This page lists some of the best available:\n\n\nopal.core.search\n\n\nThe Search plugin bundled with OPAL core provides a default database based search implementation \nfor your application, and is scheduled to provide hooks for e.g. using Elastic Search as your \nserach backend.\n\n\nopal.core.collaborative\n\n\nThe Collaborative plugin bundled with OPAL core provides a mechanism for providing realtime\ncollaborative editing of patient data within lists, by providing a streaming websocket link\nof updates from other open sessions. (Requires \nGlossolalia\n ).\n\n\nopal-opat\n\n\nThe \nOPAT\n plugin provides a set of teams, flows\nand record types for running a BSAC OPAT clinic.\n\n\nopal-research\n\n\nThe \nResearch\n plugin allows an OPAL application to be used as the\ndata collection method for multiple concurrent research studies, including researcher blinding, a \nstructured role \n permission framework.\n\n\nopal-walk-in\n\n\nThe \nWalk In\n plugin supports the operation of \ndrop in services within your institution, including registration, triage, escalation \n \ndischarge summaries.\n\n\nopal-wardround\n\n\nThe \nWardround\n plugin provides structured virtual\nward rounds - sequential subsets of patients matching arbitrary criteria that the user may step \nthrough in order.\n\n\nopal-dischargesummary\n\n\nThe \nDischarge Summary\n plugin allows the\nuser to generate templated letters from the data concerning an episode already held in the Application.\n\n\nopal-referral\n\n\nThe \nReferral\n plugin provides the plumbing for \nbuilding complex inter-team referrals within an institution.\n\n\nopal-dashboard\n\n\nThe \nDashboard\n plugin allows for realtime clinical \ndashboards featuring arbitrary metrics, displayed within your application.\n\n\nopal-observations\n\n\nThe \nObservations\n plugin caters for the recording and\ndisplay of electronic observations data.\n\n\nopal-analytics\n\n\nThe \nAnalytics\n plugin allows you to integrate\nyour application with Google or Piwik Analytics with a minimum of fuss.\n\n\nopal-guidelines\n\n\nThe \nGuidelines\n plugin presents contextual links to clinical\nguidelines in use at your institution when viewing records of patients whose condition matches those guidelines.\n\n\nCan be used with national or local guidelines.\n\n\nopal-iframe-api\n\n\nThe \nIframe Api\n plugin allows you to set up an api key. \nWith this Api key you can create templates to view subrecords for embedding in for example iframes.", 
            "title": "Plugin List"
        }, 
        {
            "location": "/guides/plugins_list/#opal-plugins-list", 
            "text": "The OPAL ecosystem has a rich array of re-usable Open Source plugins that can be used as composable\nunits of functionality to build your application. This page lists some of the best available:", 
            "title": "OPAL Plugins list"
        }, 
        {
            "location": "/guides/plugins_list/#opalcoresearch", 
            "text": "The Search plugin bundled with OPAL core provides a default database based search implementation \nfor your application, and is scheduled to provide hooks for e.g. using Elastic Search as your \nserach backend.", 
            "title": "opal.core.search"
        }, 
        {
            "location": "/guides/plugins_list/#opalcorecollaborative", 
            "text": "The Collaborative plugin bundled with OPAL core provides a mechanism for providing realtime\ncollaborative editing of patient data within lists, by providing a streaming websocket link\nof updates from other open sessions. (Requires  Glossolalia  ).", 
            "title": "opal.core.collaborative"
        }, 
        {
            "location": "/guides/plugins_list/#opal-opat", 
            "text": "The  OPAT  plugin provides a set of teams, flows\nand record types for running a BSAC OPAT clinic.", 
            "title": "opal-opat"
        }, 
        {
            "location": "/guides/plugins_list/#opal-research", 
            "text": "The  Research  plugin allows an OPAL application to be used as the\ndata collection method for multiple concurrent research studies, including researcher blinding, a \nstructured role   permission framework.", 
            "title": "opal-research"
        }, 
        {
            "location": "/guides/plugins_list/#opal-walk-in", 
            "text": "The  Walk In  plugin supports the operation of \ndrop in services within your institution, including registration, triage, escalation   \ndischarge summaries.", 
            "title": "opal-walk-in"
        }, 
        {
            "location": "/guides/plugins_list/#opal-wardround", 
            "text": "The  Wardround  plugin provides structured virtual\nward rounds - sequential subsets of patients matching arbitrary criteria that the user may step \nthrough in order.", 
            "title": "opal-wardround"
        }, 
        {
            "location": "/guides/plugins_list/#opal-dischargesummary", 
            "text": "The  Discharge Summary  plugin allows the\nuser to generate templated letters from the data concerning an episode already held in the Application.", 
            "title": "opal-dischargesummary"
        }, 
        {
            "location": "/guides/plugins_list/#opal-referral", 
            "text": "The  Referral  plugin provides the plumbing for \nbuilding complex inter-team referrals within an institution.", 
            "title": "opal-referral"
        }, 
        {
            "location": "/guides/plugins_list/#opal-dashboard", 
            "text": "The  Dashboard  plugin allows for realtime clinical \ndashboards featuring arbitrary metrics, displayed within your application.", 
            "title": "opal-dashboard"
        }, 
        {
            "location": "/guides/plugins_list/#opal-observations", 
            "text": "The  Observations  plugin caters for the recording and\ndisplay of electronic observations data.", 
            "title": "opal-observations"
        }, 
        {
            "location": "/guides/plugins_list/#opal-analytics", 
            "text": "The  Analytics  plugin allows you to integrate\nyour application with Google or Piwik Analytics with a minimum of fuss.", 
            "title": "opal-analytics"
        }, 
        {
            "location": "/guides/plugins_list/#opal-guidelines", 
            "text": "The  Guidelines  plugin presents contextual links to clinical\nguidelines in use at your institution when viewing records of patients whose condition matches those guidelines.  Can be used with national or local guidelines.", 
            "title": "opal-guidelines"
        }, 
        {
            "location": "/guides/plugins_list/#opal-iframe-api", 
            "text": "The  Iframe Api  plugin allows you to set up an api key. \nWith this Api key you can create templates to view subrecords for embedding in for example iframes.", 
            "title": "opal-iframe-api"
        }, 
        {
            "location": "/guides/datamodel/", 
            "text": "The OPAL Data model\n\n\nThe OPAL data model allows for patients to have multiple sequential or concurrent\n\nEpisodes of care\n. Some information is linked to an \nEpisode\n, some is linked to\na \nPatient\n.\n\n\n\n\nPatients\n\n\nA \nPatient\n may have many \nEpisodes\n. An \nEpisode\n is something like an Inpatient admission,\na telephone liaison, care under an outpatient clinic, an appointment at a drop in clinic.\nApplications or plugins may define their own \nEpisode\n categories, and a common pattern is to\nalter the display or available functionality by episode type. (e.g. You may associate\ntemplates for discharge summaries with particular episode types)\n\n\nA \nPatient\n will have \nSubrecords\n (such as e.g. Demographics) which follow them across multiple\nepisodes. These are information linked to a particular person, and should be implemented as\nDjango models that inherit from the \nopal.models.PatientSubrecord\n base class.\n\n\nEpisodes\n\n\nAn \nEpisode\n is linked to a \nPatient\n, and will contain some metadata about the type and date\nof the episode. The field \nEpisode.category_name\n stores a string representing the relevant\n\nEpisodeCategory\n e.g. ('Inpatient', 'Outpatient', ...), while a category object is returned\nfrom the \nepisode.category\n field. The start and end dates of an \nEpisode\n may be retrieved\nfrom the \nstart\n and \nend\n properties.\n\n\nAn \nEpisode\n will have \nSubrecords\n (such as e.g. Diagnosis) which are linked to this episode of\ncare. These should be implemented as Django models that inherit from the \nopal.models.EpisodeSubRecord\n\nbase class.\n\n\nRecords\n\n\nA \nSubrecord\n consists of a collection of fields that constitute a record. For example, one could\nimplement a Demograpics \nSubrecord\n as follows:\n\n\nclass Demographics(PatientSubrecord):\n    name             = models.CharField(max_length=255, blank=True)\n    hospital_number  = models.CharField(max_length=255, blank=True)\n    date_of_birth    = models.DateField(null=True, blank=True)\n    ethnicity        = models.CharField(max_length=255, blank=True,\n                                        null=True)\n    gender           = models.CharField(max_length=255, blank=True,\n                                        null=True)\n\n\n\nSubrecords also define various properties that will provide metadata about their\ndisplay or structure, which are documented in the\n\nSubrecord reference material\n\n\nCore Clinical Data Model\n\n\nOPAL ships with a wide range of core clinical concepts implemented as Abstract Subrecords.\nApplications that are generated via the \n$ opal startproject\n command will automatically\ncontain concrete implementations of these models in the application.\n\n\nFull documentation of these models is available in the \nArchetypes\n documentation.\n\n\nReference Data\n\n\nOPAL comes with a set of clinical terminology data models out of the box. - we often\nwant to link our records to one of these - for example to record a type of condition\na patient might have, or a drug they are taking.\n\n\nFull documentation of these is available in the \nLookup lists\n documentation.", 
            "title": "Data Model"
        }, 
        {
            "location": "/guides/datamodel/#the-opal-data-model", 
            "text": "The OPAL data model allows for patients to have multiple sequential or concurrent Episodes of care . Some information is linked to an  Episode , some is linked to\na  Patient .", 
            "title": "The OPAL Data model"
        }, 
        {
            "location": "/guides/datamodel/#patients", 
            "text": "A  Patient  may have many  Episodes . An  Episode  is something like an Inpatient admission,\na telephone liaison, care under an outpatient clinic, an appointment at a drop in clinic.\nApplications or plugins may define their own  Episode  categories, and a common pattern is to\nalter the display or available functionality by episode type. (e.g. You may associate\ntemplates for discharge summaries with particular episode types)  A  Patient  will have  Subrecords  (such as e.g. Demographics) which follow them across multiple\nepisodes. These are information linked to a particular person, and should be implemented as\nDjango models that inherit from the  opal.models.PatientSubrecord  base class.", 
            "title": "Patients"
        }, 
        {
            "location": "/guides/datamodel/#episodes", 
            "text": "An  Episode  is linked to a  Patient , and will contain some metadata about the type and date\nof the episode. The field  Episode.category_name  stores a string representing the relevant EpisodeCategory  e.g. ('Inpatient', 'Outpatient', ...), while a category object is returned\nfrom the  episode.category  field. The start and end dates of an  Episode  may be retrieved\nfrom the  start  and  end  properties.  An  Episode  will have  Subrecords  (such as e.g. Diagnosis) which are linked to this episode of\ncare. These should be implemented as Django models that inherit from the  opal.models.EpisodeSubRecord \nbase class.", 
            "title": "Episodes"
        }, 
        {
            "location": "/guides/datamodel/#records", 
            "text": "A  Subrecord  consists of a collection of fields that constitute a record. For example, one could\nimplement a Demograpics  Subrecord  as follows:  class Demographics(PatientSubrecord):\n    name             = models.CharField(max_length=255, blank=True)\n    hospital_number  = models.CharField(max_length=255, blank=True)\n    date_of_birth    = models.DateField(null=True, blank=True)\n    ethnicity        = models.CharField(max_length=255, blank=True,\n                                        null=True)\n    gender           = models.CharField(max_length=255, blank=True,\n                                        null=True)  Subrecords also define various properties that will provide metadata about their\ndisplay or structure, which are documented in the Subrecord reference material", 
            "title": "Records"
        }, 
        {
            "location": "/guides/datamodel/#core-clinical-data-model", 
            "text": "OPAL ships with a wide range of core clinical concepts implemented as Abstract Subrecords.\nApplications that are generated via the  $ opal startproject  command will automatically\ncontain concrete implementations of these models in the application.  Full documentation of these models is available in the  Archetypes  documentation.", 
            "title": "Core Clinical Data Model"
        }, 
        {
            "location": "/guides/datamodel/#reference-data", 
            "text": "OPAL comes with a set of clinical terminology data models out of the box. - we often\nwant to link our records to one of these - for example to record a type of condition\na patient might have, or a drug they are taking.  Full documentation of these is available in the  Lookup lists  documentation.", 
            "title": "Reference Data"
        }, 
        {
            "location": "/guides/archetypes/", 
            "text": "Core Clinical Archetypes\n\n\nOPAL ships with a wide range of core clinical concepts implemented as Abstract Subrecords.\nApplications that are generated via the \n$ opal startproject\n command will automatically\ncontain concrete implementations of these models in the application.\n\n\nCommon Metadata fields\n\n\nAll subrecords will contain the following fields, which are not repreated individually\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\ncreated_by\n\n\nFK\n\n\nUser ID\n\n\n\n\n\n\ncreated\n\n\nDate\n\n\n\n\n\n\n\n\nupdated_by\n\n\nFK User ID\n\n\n\n\n\n\n\n\nupdate\n\n\nDate\n\n\n\n\n\n\n\n\n\n\nThe details of each individual archetype are set out below:\n\n\nPatient Subrecords\n\n\nDemographics\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\nhospital_number\n\n\nChar\n\n\n255\n\n\n\n\n\n\nnhs_number\n\n\nChar\n\n\n255\n\n\n\n\n\n\ndate_of_birth\n\n\nDate\n\n\n\n\n\n\n\n\nplace_of_birth\n\n\nFKorFT(Destination)\n\n\n\n\n\n\n\n\nethnicity\n\n\nFKorFT(Ethnicity)\n\n\n\n\n\n\n\n\nsurname\n\n\nChar\n\n\n255\n\n\n\n\n\n\nfirst_name\n\n\nChar\n\n\n255\n\n\n\n\n\n\nmiddle_name\n\n\nChar\n\n\n255\n\n\n\n\n\n\nsex\n\n\nFKorFT(Gender)\n\n\n\n\n\n\n\n\n\n\nAllergies\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\ndrug\n\n\nFKorFT(Drug)\n\n\n\n\n\n\n\n\nprovisional\n\n\nBoolean\n\n\n\n\n\n\n\n\ndetails\n\n\nChar\n\n\n255\n\n\n\n\n\n\n\n\nEpisode Subrecords\n\n\nLocation\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\ncategory\n\n\nChar\n\n\n255\n\n\n\n\n\n\nhospital\n\n\nChar\n\n\n255\n\n\n\n\n\n\nward\n\n\nChar\n\n\n255\n\n\n\n\n\n\nbed\n\n\nChar\n\n\n255\n\n\n\n\n\n\n\n\nTreatment\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\ndrug\n\n\nFKorFT(Drug)\n\n\n\n\n\n\n\n\ndose\n\n\nChar\n\n\n255\n\n\n\n\n\n\nroute\n\n\nFKorFT(Drugroute)\n\n\n\n\n\n\n\n\nstart_date\n\n\nDate\n\n\n\n\n\n\n\n\nend_date\n\n\nDate\n\n\n\n\n\n\n\n\nfrequency\n\n\nFKorFT(Drugfreq)\n\n\n\n\n\n\n\n\n\n\nDiagnosis\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\ncondition\n\n\nFKorFT(Condition)\n\n\n\n\n\n\n\n\nprovisional\n\n\nBoolean\n\n\n\n\n\n\n\n\ndetails\n\n\nChar\n\n\n255\n\n\n\n\n\n\ndate_of_diagnosis\n\n\nDate\n\n\n\n\n\n\n\n\n\n\nPastMedicalHistory\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\ncondition\n\n\nFKorFT(Condition)\n\n\n\n\n\n\n\n\nyear\n\n\nChar\n\n\n4\n\n\n\n\n\n\ndetails\n\n\nChar\n\n\n255\n\n\n\n\n\n\n\n\nSymptomComplex\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\nsymptoms\n\n\nManyToMany(Symptom)\n\n\n\n\n\n\n\n\nduration\n\n\nChar\n\n\n255\n\n\n\n\n\n\ndetails\n\n\nText\n\n\n\n\n\n\n\n\n\n\nReferralRoute\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\ninternal\n\n\nNullBoolean\n\n\n\n\n\n\n\n\nreferral_route\n\n\nFKorFT(ReferralOrganisation)\n\n\n\n\n\n\n\n\nreferral_name\n\n\nChar\n\n\n255\n\n\n\n\n\n\ndate_of_referral\n\n\nDate\n\n\n\n\n\n\n\n\nreferral_team\n\n\nFKorFT(Speciality)\n\n\n\n\n\n\n\n\nreferral_reason\n\n\nFKorFT(ReferralReason)\n\n\n\n\n\n\n\n\n\n\nPatientConsultation\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\nwhen\n\n\nDatetime\n\n\n\n\n\n\n\n\ninitials\n\n\nChar\n\n\n255\n\n\n\n\n\n\nreason_for_interaction\n\n\nFKorFT(Patient_consultation_reason_for_interaction)\n\n\n\n\n\n\n\n\ndiscussion\n\n\nText\n\n\n\n\n\n\n\n\n\n\nInvestigation\n\n\n\n\n\n\n\n\nField\n\n\nType\n\n\nLength\n\n\n\n\n\n\n\n\n\n\ntest\n\n\nChar\n\n\n255\n\n\n\n\n\n\ndate_ordered\n\n\nDate\n\n\n\n\n\n\n\n\ndetails\n\n\nChar\n\n\n255\n\n\n\n\n\n\nmicroscopy\n\n\nChar\n\n\n255\n\n\n\n\n\n\norganism\n\n\nChar\n\n\n255\n\n\n\n\n\n\nsensitive_antibiotics\n\n\nChar\n\n\n255\n\n\n\n\n\n\nresistant_antibiotics\n\n\nChar\n\n\n255\n\n\n\n\n\n\nresult\n\n\nChar\n\n\n255\n\n\n\n\n\n\nigm\n\n\nChar\n\n\n20\n\n\n\n\n\n\nigg\n\n\nChar\n\n\n20\n\n\n\n\n\n\nvca_igm\n\n\nChar\n\n\n20\n\n\n\n\n\n\nvca_igg\n\n\nChar\n\n\n20\n\n\n\n\n\n\nebna_igg\n\n\nChar\n\n\n20\n\n\n\n\n\n\nhbsag\n\n\nChar\n\n\n20\n\n\n\n\n\n\nanti_hbs\n\n\nChar\n\n\n20\n\n\n\n\n\n\nanti_hbcore_igm\n\n\nChar\n\n\n20\n\n\n\n\n\n\nanti_hbcore_igg\n\n\nChar\n\n\n20\n\n\n\n\n\n\nrpr\n\n\nChar\n\n\n20\n\n\n\n\n\n\ntppa\n\n\nChar\n\n\n20\n\n\n\n\n\n\nviral_load\n\n\nChar\n\n\n20\n\n\n\n\n\n\nparasitaemia\n\n\nChar\n\n\n20\n\n\n\n\n\n\nhsv\n\n\nChar\n\n\n20\n\n\n\n\n\n\nvzv\n\n\nChar\n\n\n20\n\n\n\n\n\n\nsyphilis\n\n\nChar\n\n\n20\n\n\n\n\n\n\nc_difficile_antigen\n\n\nChar\n\n\n20\n\n\n\n\n\n\nc_difficile_toxin\n\n\nChar\n\n\n20\n\n\n\n\n\n\nspecies\n\n\nChar\n\n\n20\n\n\n\n\n\n\nhsv_1\n\n\nChar\n\n\n20\n\n\n\n\n\n\nhsv_2\n\n\nChar\n\n\n20\n\n\n\n\n\n\nenterovirus\n\n\nChar\n\n\n20\n\n\n\n\n\n\ncmv\n\n\nChar\n\n\n20\n\n\n\n\n\n\nebv\n\n\nChar\n\n\n20\n\n\n\n\n\n\ninfluenza_a\n\n\nChar\n\n\n20\n\n\n\n\n\n\ninfluenza_b\n\n\nChar\n\n\n20\n\n\n\n\n\n\nparainfluenza\n\n\nChar\n\n\n20\n\n\n\n\n\n\nmetapneumovirus\n\n\nChar\n\n\n20\n\n\n\n\n\n\nrsv\n\n\nChar\n\n\n20\n\n\n\n\n\n\nadenovirus\n\n\nChar\n\n\n20\n\n\n\n\n\n\nnorovirus\n\n\nChar\n\n\n20\n\n\n\n\n\n\nrotavirus\n\n\nChar\n\n\n20\n\n\n\n\n\n\ngiardia\n\n\nChar\n\n\n20\n\n\n\n\n\n\nentamoeba_histolytica\n\n\nChar\n\n\n20\n\n\n\n\n\n\ncryptosporidium\n\n\nChar\n\n\n20", 
            "title": "Archetypes"
        }, 
        {
            "location": "/guides/archetypes/#core-clinical-archetypes", 
            "text": "OPAL ships with a wide range of core clinical concepts implemented as Abstract Subrecords.\nApplications that are generated via the  $ opal startproject  command will automatically\ncontain concrete implementations of these models in the application.", 
            "title": "Core Clinical Archetypes"
        }, 
        {
            "location": "/guides/archetypes/#common-metadata-fields", 
            "text": "All subrecords will contain the following fields, which are not repreated individually     Field  Type  Length      created_by  FK  User ID    created  Date     updated_by  FK User ID     update  Date      The details of each individual archetype are set out below:", 
            "title": "Common Metadata fields"
        }, 
        {
            "location": "/guides/archetypes/#patient-subrecords", 
            "text": "", 
            "title": "Patient Subrecords"
        }, 
        {
            "location": "/guides/archetypes/#demographics", 
            "text": "Field  Type  Length      hospital_number  Char  255    nhs_number  Char  255    date_of_birth  Date     place_of_birth  FKorFT(Destination)     ethnicity  FKorFT(Ethnicity)     surname  Char  255    first_name  Char  255    middle_name  Char  255    sex  FKorFT(Gender)", 
            "title": "Demographics"
        }, 
        {
            "location": "/guides/archetypes/#allergies", 
            "text": "Field  Type  Length      drug  FKorFT(Drug)     provisional  Boolean     details  Char  255", 
            "title": "Allergies"
        }, 
        {
            "location": "/guides/archetypes/#episode-subrecords", 
            "text": "", 
            "title": "Episode Subrecords"
        }, 
        {
            "location": "/guides/archetypes/#location", 
            "text": "Field  Type  Length      category  Char  255    hospital  Char  255    ward  Char  255    bed  Char  255", 
            "title": "Location"
        }, 
        {
            "location": "/guides/archetypes/#treatment", 
            "text": "Field  Type  Length      drug  FKorFT(Drug)     dose  Char  255    route  FKorFT(Drugroute)     start_date  Date     end_date  Date     frequency  FKorFT(Drugfreq)", 
            "title": "Treatment"
        }, 
        {
            "location": "/guides/archetypes/#diagnosis", 
            "text": "Field  Type  Length      condition  FKorFT(Condition)     provisional  Boolean     details  Char  255    date_of_diagnosis  Date", 
            "title": "Diagnosis"
        }, 
        {
            "location": "/guides/archetypes/#pastmedicalhistory", 
            "text": "Field  Type  Length      condition  FKorFT(Condition)     year  Char  4    details  Char  255", 
            "title": "PastMedicalHistory"
        }, 
        {
            "location": "/guides/archetypes/#symptomcomplex", 
            "text": "Field  Type  Length      symptoms  ManyToMany(Symptom)     duration  Char  255    details  Text", 
            "title": "SymptomComplex"
        }, 
        {
            "location": "/guides/archetypes/#referralroute", 
            "text": "Field  Type  Length      internal  NullBoolean     referral_route  FKorFT(ReferralOrganisation)     referral_name  Char  255    date_of_referral  Date     referral_team  FKorFT(Speciality)     referral_reason  FKorFT(ReferralReason)", 
            "title": "ReferralRoute"
        }, 
        {
            "location": "/guides/archetypes/#patientconsultation", 
            "text": "Field  Type  Length      when  Datetime     initials  Char  255    reason_for_interaction  FKorFT(Patient_consultation_reason_for_interaction)     discussion  Text", 
            "title": "PatientConsultation"
        }, 
        {
            "location": "/guides/archetypes/#investigation", 
            "text": "Field  Type  Length      test  Char  255    date_ordered  Date     details  Char  255    microscopy  Char  255    organism  Char  255    sensitive_antibiotics  Char  255    resistant_antibiotics  Char  255    result  Char  255    igm  Char  20    igg  Char  20    vca_igm  Char  20    vca_igg  Char  20    ebna_igg  Char  20    hbsag  Char  20    anti_hbs  Char  20    anti_hbcore_igm  Char  20    anti_hbcore_igg  Char  20    rpr  Char  20    tppa  Char  20    viral_load  Char  20    parasitaemia  Char  20    hsv  Char  20    vzv  Char  20    syphilis  Char  20    c_difficile_antigen  Char  20    c_difficile_toxin  Char  20    species  Char  20    hsv_1  Char  20    hsv_2  Char  20    enterovirus  Char  20    cmv  Char  20    ebv  Char  20    influenza_a  Char  20    influenza_b  Char  20    parainfluenza  Char  20    metapneumovirus  Char  20    rsv  Char  20    adenovirus  Char  20    norovirus  Char  20    rotavirus  Char  20    giardia  Char  20    entamoeba_histolytica  Char  20    cryptosporidium  Char  20", 
            "title": "Investigation"
        }, 
        {
            "location": "/guides/working_with_data_in_angular/", 
            "text": "Working with Clinical Data in Angular\n\n\nOPAL provides a range of Angular services for working with clinical data on\nthe front end.\n\n\nThe Episode Service\n\n\nThe \nEpisode\n Service will return an Episode object that represents an individual\nepisode of care, and provides various methods for interacting with both episodes and\nsubrecords.\n\n\nvar episode = new Episode(my_episode_data);\nvar editing = episode.makeCopy();\nediting.start_date = new Date();\nepisode.save(editing);\n\n\n\n\nThe Item Service\n\n\nThe \nItem\n Service returns Item objects that represent individual instances of\nsubrecords. They must be initialised with an episode and a schema representing\nthe available data fields for this subrecord type.\n\n\nvar diagnosis = new Item({}, episode, $rootScope.fields.diagnosis);\nvar editing = diagnosis.makeCopy();\nediting.date_of_diagnosis = new Date();\ndiagnosis.save(editing);\n\n\n\n\nSubrecord CRUD modals\n\n\nThe \nEpisode\n service has a convenient API that allows you to open a modal to edit\na new or existing subrecord.\n\n\nepiode.recordEditor.newItem('diagnosis'):\n// -\n Opens a modal with the diagnosis form and will create a new diagnosis on save\n\nepisode.recordEditor.editItem('diagnosis', 0);\n// -\n Opens a modal that allows the user to edit the first diagnosis\n\nepisode.recordEditor.deleteItem('diagnosis', 0);\n// -\n Prompts the user to confirm the deletion of the first diagnosis\n\n\n\n\nCustomising Subrecords\n\n\nSometimes our application will wish to customise a subrecord of a particular type - for\ninstance to set default values. We do this by setting a custom record service.\n\n\nFirst, we set the name of the service to use as a constructor for this record type as\na property on the model.\n\n\n# yourapp/models.py\nclass Diagnosis(models.Diagnosis):\n    _angular_service = 'Diagnosis'\n\n\n\n\nNext we must include the file with our new service in our application.\n\n\n# yourapp/__init__.py\nclass YourApp(application.OpalApplication):\n    javascripts = [..., 'js/diagnosis.js', ...]\n\n\n\n\nFinally we define an Angular service which expects to be passed the record in order\nto set defaults.\n\n\n// yourapp/static/js/diagnosis.js\nangular.module('opal.records').factory('Diagnosis', function(){\n    return function(record){\n        if(!record.date_of_diagnosis){ record.date_of_diagnosis = moment()}\n        return record;\n    }\n});", 
            "title": "Angular Models"
        }, 
        {
            "location": "/guides/working_with_data_in_angular/#working-with-clinical-data-in-angular", 
            "text": "OPAL provides a range of Angular services for working with clinical data on\nthe front end.", 
            "title": "Working with Clinical Data in Angular"
        }, 
        {
            "location": "/guides/working_with_data_in_angular/#the-episode-service", 
            "text": "The  Episode  Service will return an Episode object that represents an individual\nepisode of care, and provides various methods for interacting with both episodes and\nsubrecords.  var episode = new Episode(my_episode_data);\nvar editing = episode.makeCopy();\nediting.start_date = new Date();\nepisode.save(editing);", 
            "title": "The Episode Service"
        }, 
        {
            "location": "/guides/working_with_data_in_angular/#the-item-service", 
            "text": "The  Item  Service returns Item objects that represent individual instances of\nsubrecords. They must be initialised with an episode and a schema representing\nthe available data fields for this subrecord type.  var diagnosis = new Item({}, episode, $rootScope.fields.diagnosis);\nvar editing = diagnosis.makeCopy();\nediting.date_of_diagnosis = new Date();\ndiagnosis.save(editing);", 
            "title": "The Item Service"
        }, 
        {
            "location": "/guides/working_with_data_in_angular/#subrecord-crud-modals", 
            "text": "The  Episode  service has a convenient API that allows you to open a modal to edit\na new or existing subrecord.  epiode.recordEditor.newItem('diagnosis'):\n// -  Opens a modal with the diagnosis form and will create a new diagnosis on save\n\nepisode.recordEditor.editItem('diagnosis', 0);\n// -  Opens a modal that allows the user to edit the first diagnosis\n\nepisode.recordEditor.deleteItem('diagnosis', 0);\n// -  Prompts the user to confirm the deletion of the first diagnosis", 
            "title": "Subrecord CRUD modals"
        }, 
        {
            "location": "/guides/working_with_data_in_angular/#customising-subrecords", 
            "text": "Sometimes our application will wish to customise a subrecord of a particular type - for\ninstance to set default values. We do this by setting a custom record service.  First, we set the name of the service to use as a constructor for this record type as\na property on the model.  # yourapp/models.py\nclass Diagnosis(models.Diagnosis):\n    _angular_service = 'Diagnosis'  Next we must include the file with our new service in our application.  # yourapp/__init__.py\nclass YourApp(application.OpalApplication):\n    javascripts = [..., 'js/diagnosis.js', ...]  Finally we define an Angular service which expects to be passed the record in order\nto set defaults.  // yourapp/static/js/diagnosis.js\nangular.module('opal.records').factory('Diagnosis', function(){\n    return function(record){\n        if(!record.date_of_diagnosis){ record.date_of_diagnosis = moment()}\n        return record;\n    }\n});", 
            "title": "Customising Subrecords"
        }, 
        {
            "location": "/guides/flow/", 
            "text": "Flow hooks in OPAL\n\n\nOPAL provides various hooks that developers can use to customise behaviour at certain key points in a\npatient's journey through a clinical service - for example when a patient is discharged.\n\n\nThese hooks are associated with verbs \nenter\n, \nexit\n.\n\n\nThe Flow service\n\n\nYour application scaffold will have created a file at\n\n./yourapp/assets/js/yourapp/services/flow.js\n. This file will declare an angular service that\nyour application will use to determine how to move to the correct next step for a patient.\n\n\nTo enable this, we must set the following setting:\n\n\n# settings.py\nOPAL_FLOW_SERVICE = 'MyAppFlow'\n\n\n\n\nFlow services must define an \nenter\n and an \nexit\n method, which both return the appropriate\nangular controller and template to use. Although OPAL provides sensible default controllers and\ntemplates for these common actions, applications with custom flows may customise these methods\nas required.\n\n\nThe enter verb\n\n\nThe enter verb is called when a patient is added to a service - for instance by adding a patient to a team list.\n\n\nImplementations of enter are expected to return a dictionary of the controller and template they wish to be called.\n\n\nenter: function(){\n        return {\n            'controller': 'HospitalNumberCtrl',\n            'template'  : '/templates/modals/hospital_number.html/'\n        }\n    }\n\n\n\nA common strategy is to examine angular \n$route\n or \n$routeParams\n to determine where the user is in the application.\nFor instance you may wish to have custom controllers for a particular patient list, or the search results page.\n\n\nThe exit verb\n\n\nThe exit verb is called when a patient is moving through a service - for instance when we discharge a patient, or end\none phase of a clinical pathway.\n\n\nImplementations of exit are expected to return a dictionary of the controller and template they wish to be called.\n\n\nThe enter verb will receive the episode that we are acting on - for instance a controller that acts differently for\ndeceased patients might look as follows\n\n\nexit: function(episode){\n      if(episode.demographics[0].deceased){\n          return {\n              'controller': 'DeceasedDischargeEpisodeCtrl',\n              'template'  : '/templates/modals/deceased_discharge.html/'\n          }\n      }\n      return {\n          'controller': 'DischargeEpisodeCtrl',\n          'template'  : '/templates/modals/discharge_episode.html/'\n      }\n    }", 
            "title": "Flow"
        }, 
        {
            "location": "/guides/flow/#flow-hooks-in-opal", 
            "text": "OPAL provides various hooks that developers can use to customise behaviour at certain key points in a\npatient's journey through a clinical service - for example when a patient is discharged.  These hooks are associated with verbs  enter ,  exit .", 
            "title": "Flow hooks in OPAL"
        }, 
        {
            "location": "/guides/flow/#the-flow-service", 
            "text": "Your application scaffold will have created a file at ./yourapp/assets/js/yourapp/services/flow.js . This file will declare an angular service that\nyour application will use to determine how to move to the correct next step for a patient.  To enable this, we must set the following setting:  # settings.py\nOPAL_FLOW_SERVICE = 'MyAppFlow'  Flow services must define an  enter  and an  exit  method, which both return the appropriate\nangular controller and template to use. Although OPAL provides sensible default controllers and\ntemplates for these common actions, applications with custom flows may customise these methods\nas required.", 
            "title": "The Flow service"
        }, 
        {
            "location": "/guides/flow/#the-enter-verb", 
            "text": "The enter verb is called when a patient is added to a service - for instance by adding a patient to a team list.  Implementations of enter are expected to return a dictionary of the controller and template they wish to be called.  enter: function(){\n        return {\n            'controller': 'HospitalNumberCtrl',\n            'template'  : '/templates/modals/hospital_number.html/'\n        }\n    }  A common strategy is to examine angular  $route  or  $routeParams  to determine where the user is in the application.\nFor instance you may wish to have custom controllers for a particular patient list, or the search results page.", 
            "title": "The enter verb"
        }, 
        {
            "location": "/guides/flow/#the-exit-verb", 
            "text": "The exit verb is called when a patient is moving through a service - for instance when we discharge a patient, or end\none phase of a clinical pathway.  Implementations of exit are expected to return a dictionary of the controller and template they wish to be called.  The enter verb will receive the episode that we are acting on - for instance a controller that acts differently for\ndeceased patients might look as follows  exit: function(episode){\n      if(episode.demographics[0].deceased){\n          return {\n              'controller': 'DeceasedDischargeEpisodeCtrl',\n              'template'  : '/templates/modals/deceased_discharge.html/'\n          }\n      }\n      return {\n          'controller': 'DischargeEpisodeCtrl',\n          'template'  : '/templates/modals/discharge_episode.html/'\n      }\n    }", 
            "title": "The exit verb"
        }, 
        {
            "location": "/guides/roles_and_permissions/", 
            "text": "Roles \n Permissions in OPAL\n\n\nOPAL provides some global per-user flags, which are set in the UserProfile model, as well\nas more detailed permissions available via roles.\n\n\nThe UserProfile model\n\n\nSome global properties about Users are set in the \nopal.models.UserProfile\n\nmodel.\n\n\nUserProflie._can_extract\n\n\nBoolean flag to determine whether this user is allowed to download data extracts\nfrom the system\n\n\nUserProflie._force_password_change\n\n\nBoolean flag to determine whether we would like to force this user to change\ntheir password on their next login. This defaults to \nTrue\n when the \nUser\n is\nfirst created.\n\n\nUserProfile._readonly\n\n\nBoolean flag to determine whether this user has readonly access.\n\n\nUserProfile._restricted_only\n\n\nBoolean flag to determine whether this user should be only shown teams for which they\nhave explicitly been given permission to view or whether they should also see the list of\ngeneral access teams.\n\n\nUserProfile.get_roles()\n\n\nReturn a dictionary of roles in various contexts for our user\n\n\nprofile.get_roles() # -\n\n{\n    'default': ['doctor'],\n    'some_research_study': ['Clinical Lead']\n}\n\n\n\nUserProfile.get_teams()\n\n\nReturn a list of \nTeam\n objects that this user should be allowed to see.\n\n\nRoles\n\n\nA user may be given a particular role. These can be either global - in which case they are\nreturned in the 'default' section of the roles dict from \nget_roles()\n, or specific to\na team.", 
            "title": "Roles & Permissions"
        }, 
        {
            "location": "/guides/roles_and_permissions/#roles-permissions-in-opal", 
            "text": "OPAL provides some global per-user flags, which are set in the UserProfile model, as well\nas more detailed permissions available via roles.", 
            "title": "Roles &amp; Permissions in OPAL"
        }, 
        {
            "location": "/guides/roles_and_permissions/#the-userprofile-model", 
            "text": "Some global properties about Users are set in the  opal.models.UserProfile \nmodel.", 
            "title": "The UserProfile model"
        }, 
        {
            "location": "/guides/roles_and_permissions/#userproflie_can_extract", 
            "text": "Boolean flag to determine whether this user is allowed to download data extracts\nfrom the system", 
            "title": "UserProflie._can_extract"
        }, 
        {
            "location": "/guides/roles_and_permissions/#userproflie_force_password_change", 
            "text": "Boolean flag to determine whether we would like to force this user to change\ntheir password on their next login. This defaults to  True  when the  User  is\nfirst created.", 
            "title": "UserProflie._force_password_change"
        }, 
        {
            "location": "/guides/roles_and_permissions/#userprofile_readonly", 
            "text": "Boolean flag to determine whether this user has readonly access.", 
            "title": "UserProfile._readonly"
        }, 
        {
            "location": "/guides/roles_and_permissions/#userprofile_restricted_only", 
            "text": "Boolean flag to determine whether this user should be only shown teams for which they\nhave explicitly been given permission to view or whether they should also see the list of\ngeneral access teams.", 
            "title": "UserProfile._restricted_only"
        }, 
        {
            "location": "/guides/roles_and_permissions/#userprofileget_roles", 
            "text": "Return a dictionary of roles in various contexts for our user  profile.get_roles() # - \n{\n    'default': ['doctor'],\n    'some_research_study': ['Clinical Lead']\n}", 
            "title": "UserProfile.get_roles()"
        }, 
        {
            "location": "/guides/roles_and_permissions/#userprofileget_teams", 
            "text": "Return a list of  Team  objects that this user should be allowed to see.", 
            "title": "UserProfile.get_teams()"
        }, 
        {
            "location": "/guides/roles_and_permissions/#roles", 
            "text": "A user may be given a particular role. These can be either global - in which case they are\nreturned in the 'default' section of the roles dict from  get_roles() , or specific to\na team.", 
            "title": "Roles"
        }, 
        {
            "location": "/guides/tagging/", 
            "text": "Tagging\n\n\nEpisodes in OPAL may be tagged. This is commonly used as a mechanism to\nrecord that a particular team is looking after a patient - via \nTaggedPatientList\n,\nbut also to group patients.\n\n\nFor instance, we might like to 'tag' episodes with a particular string when some\nparticular event occurrs so that we can run reports or analyse these groups later.\n\n\nThe \"Teams\" modal in list and detail views, is actually an interface over updating\nthe tagging of the episode in question.\n\n\nMetadata concerning tags can be found via the Options API.", 
            "title": "Tagging"
        }, 
        {
            "location": "/guides/tagging/#tagging", 
            "text": "Episodes in OPAL may be tagged. This is commonly used as a mechanism to\nrecord that a particular team is looking after a patient - via  TaggedPatientList ,\nbut also to group patients.  For instance, we might like to 'tag' episodes with a particular string when some\nparticular event occurrs so that we can run reports or analyse these groups later.  The \"Teams\" modal in list and detail views, is actually an interface over updating\nthe tagging of the episode in question.  Metadata concerning tags can be found via the Options API.", 
            "title": "Tagging"
        }, 
        {
            "location": "/guides/json_api/", 
            "text": "The OPAL JSON API\n\n\nOPAL features a rich, self documenting set of open JSON APIs.\n\n\nOPAL applications are generally simply a collection of Browser-based clients\nfor these APIs.\n\n\nOPAL uses Django Rest Framework to provide it's APIs.\n\n\nYou may examine the API of any running OPAL application by navigating to the url \n/api/v0.1/\n\n\nAdding your own APIs\n\n\nYou can add your own APIs to the OPAL API namespace \nfrom plugins\n or\nby registering them directly with the router.\n\n\nfrom rest_framework.viewsets import ViewSet\nfrom rest_framework.response import Response\nfrom opal.core.api import router\n\n\nclass PingViewSet(ViewSet):\n    def list(self, request): return Response('pong')\n\nrouter.register('ping', PingViewSet)\n\n\n\nAuthentication\n\n\nOPAL uses\n\nDjango Rest Framework\n (DRF) to\nprovide APIs. DRF ships with multiple authentication\nmechanisms which are highly configurable. By default, OPAL applications (e.g. created with\nthe OPAL scaffolding) will enable Sesison and Token based authentication.\n\n\nMore details on DRF authentication are available in\n\ntheir excellent documentation\n.\n\n\nPermissioning\n\n\nOPAL uses the DRF permissions system for JSON APIs.\n\n\nOPAL ships with \nopal.core.api.LoginRequiredViewset\n which adds the permission class\nIsAuthenticated by default. Developers are strongly encouraged to ensure that APIs which\nserve patient data are restricted to logged in users.\n\n\nMore details on DRF permissions are available \nin the DRF documentation\n\n.\n\n\nSession Based\n\n\nSession based authentication enables users logged in via the standard Django auth mechanism\nto use the API. This is what most OPAL applications in the browser will use.\n\n\nToken Based\n\n\nToken based authentication is targetted at other applications consuming the OPAL API, and\nrequires the application to pass an API token as a header. These tokens must be associated\nwith a Django user, and can be created in the Django Admin.\n\n\nAn example of a client using token based authentication is found in the\n\nOPALAPI\n project.", 
            "title": "JSON API"
        }, 
        {
            "location": "/guides/json_api/#the-opal-json-api", 
            "text": "OPAL features a rich, self documenting set of open JSON APIs.  OPAL applications are generally simply a collection of Browser-based clients\nfor these APIs.  OPAL uses Django Rest Framework to provide it's APIs.  You may examine the API of any running OPAL application by navigating to the url  /api/v0.1/", 
            "title": "The OPAL JSON API"
        }, 
        {
            "location": "/guides/json_api/#adding-your-own-apis", 
            "text": "You can add your own APIs to the OPAL API namespace  from plugins  or\nby registering them directly with the router.  from rest_framework.viewsets import ViewSet\nfrom rest_framework.response import Response\nfrom opal.core.api import router\n\n\nclass PingViewSet(ViewSet):\n    def list(self, request): return Response('pong')\n\nrouter.register('ping', PingViewSet)", 
            "title": "Adding your own APIs"
        }, 
        {
            "location": "/guides/json_api/#authentication", 
            "text": "OPAL uses Django Rest Framework  (DRF) to\nprovide APIs. DRF ships with multiple authentication\nmechanisms which are highly configurable. By default, OPAL applications (e.g. created with\nthe OPAL scaffolding) will enable Sesison and Token based authentication.  More details on DRF authentication are available in their excellent documentation .", 
            "title": "Authentication"
        }, 
        {
            "location": "/guides/json_api/#permissioning", 
            "text": "OPAL uses the DRF permissions system for JSON APIs.  OPAL ships with  opal.core.api.LoginRequiredViewset  which adds the permission class\nIsAuthenticated by default. Developers are strongly encouraged to ensure that APIs which\nserve patient data are restricted to logged in users.  More details on DRF permissions are available  in the DRF documentation \n.", 
            "title": "Permissioning"
        }, 
        {
            "location": "/guides/json_api/#session-based", 
            "text": "Session based authentication enables users logged in via the standard Django auth mechanism\nto use the API. This is what most OPAL applications in the browser will use.", 
            "title": "Session Based"
        }, 
        {
            "location": "/guides/json_api/#token-based", 
            "text": "Token based authentication is targetted at other applications consuming the OPAL API, and\nrequires the application to pass an API token as a header. These tokens must be associated\nwith a Django user, and can be created in the Django Admin.  An example of a client using token based authentication is found in the OPALAPI  project.", 
            "title": "Token Based"
        }, 
        {
            "location": "/guides/referencedata/", 
            "text": "Reference data\n\n\nLookup Lists allow us to create or reference canonical lists of available terminology as a\nforeign key, while also allowing synonymous terms, and a free text override.\n\n\nAdding a lookup list\n\n\nLookup lists are subclasses of \nopal.core.lookuplists.LookupList\n. Typically, a specific named\nlookup list will not need to do anything other than define a class that inherits from the base\nclass.\n\n\nThe custom field type \nopal.core.fields.ForeignKeyOrFreeText\n allows you to build interfaces\nthat cater for synonyms, and also allow the user to enter a free text string that is not in\nthe lookup list.\n\n\n# yourapp.models\nfrom django.db import models\nfrom opal.core import lookuplists\nfrom opal.core.fields import ForeignKeyOrFreeText\nfrom opal.models import EpisodeSubrecord\n\nclass TreatmentType(lookuplists.LookupList): pass\n\nclass Treatment(EpisodeSubrecord):\n    treatment = ForeignKeyOrFreeText(TreatmentType)\n    notes     = models.CharField(max_length=200)\n\n\n\n\nWhen you create your lookup list, you are creating a new model, so you will need a new migration\nto accompany it.\n\n\n$ python manage.py schemamigration --atuo yourapp\n$ python manage.py migrate yourapp\n\n\n\n\nThe lookup list will automatically be added to the admin.\n\n\nReference data JSON API\n\n\nReference data is available over the OPAL JSON API.\n\n\nYou may either load all lookuplists at once via the \n/api/v0.1/referencedata/\n endpoint, or\nindividual lookuplists by name - for example all diagnoses from \n/api/v0.1/referencedata/diagnosis/\n.\n\n\nThe reference data API also loads all synonyms in a flat list - the conversion of synonyms to their\ncanonical form is handled by the save mechanism of subrecords using \nForeignKeyOrFreeText\n fields.\n\n\nWorking with reference data on the front end\n\n\nThe Angular service \nReferencedata\n can be used to fetch all lookuplists at once - for instance\nloaded in the Angular routing for a controller in your application\n\n\nwhen('/my/route', {\n    controller: 'MyCtrl',\n    resolve: {\n           referencedata: function(Referencedata){ return Referencedata; }\n         }\n    }\n\n\n\n\nLookuplists will then be available either as properties of the \nreferencedata\n object.\n\n\nUsing referencedata in forms\n\n\nThe OPAL \nform templatetag library\n allow us to easily incorporate\nreferencedata into the forms we build, eiether by detecting their use automatically when we have\n\nForeignKeyOrFreeText\n fields, or explicitly by passing an argument.\n\n\n{% load forms %}\n{% input field=\nDiagnosis.condition\n %}\n{% select label=\nList of Conditions\n lookuplist=\nreferencedata.diagnosis\n %}\n\n\n\n\nProviding data for lookuplists\n\n\nReference data can be provided at application or plugin level in a file named \nlookuplists.json\n found in the\n\n{{ app_or_plugin }}/data/lookuplists\n directory. This data should be in the OPAL JSON format.\n\n\n{\n    \nname_of_lookuplist\n: [\n        {\n            \nname\n: \nValue of lookuplist item\n,\n            \nsynonyms\n: [\nSynonym 1\n,]\n\n        },\n    ]\n}\n\n\n\n\nManagement commands\n\n\nOPAL ships with some managemnent commands for importing and exporting lookup lists\n\n\ndump_lookup_lists\n\n\nPrints all lookuplists as JSON to stdout.\n\n\nload_lookup_lists\n\n\nLoads lookup lists from all plugins/apps in the OPAL JSON format. The lookup lists are expected to be in\n\n{{ app }}/data/lookuplists/lookuplists.json\n\n\ndelete_all_lookuplists\n\n\nDeletes all currently lookuplist values and related synonyms", 
            "title": "Referencedata"
        }, 
        {
            "location": "/guides/referencedata/#reference-data", 
            "text": "Lookup Lists allow us to create or reference canonical lists of available terminology as a\nforeign key, while also allowing synonymous terms, and a free text override.", 
            "title": "Reference data"
        }, 
        {
            "location": "/guides/referencedata/#adding-a-lookup-list", 
            "text": "Lookup lists are subclasses of  opal.core.lookuplists.LookupList . Typically, a specific named\nlookup list will not need to do anything other than define a class that inherits from the base\nclass.  The custom field type  opal.core.fields.ForeignKeyOrFreeText  allows you to build interfaces\nthat cater for synonyms, and also allow the user to enter a free text string that is not in\nthe lookup list.  # yourapp.models\nfrom django.db import models\nfrom opal.core import lookuplists\nfrom opal.core.fields import ForeignKeyOrFreeText\nfrom opal.models import EpisodeSubrecord\n\nclass TreatmentType(lookuplists.LookupList): pass\n\nclass Treatment(EpisodeSubrecord):\n    treatment = ForeignKeyOrFreeText(TreatmentType)\n    notes     = models.CharField(max_length=200)  When you create your lookup list, you are creating a new model, so you will need a new migration\nto accompany it.  $ python manage.py schemamigration --atuo yourapp\n$ python manage.py migrate yourapp  The lookup list will automatically be added to the admin.", 
            "title": "Adding a lookup list"
        }, 
        {
            "location": "/guides/referencedata/#reference-data-json-api", 
            "text": "Reference data is available over the OPAL JSON API.  You may either load all lookuplists at once via the  /api/v0.1/referencedata/  endpoint, or\nindividual lookuplists by name - for example all diagnoses from  /api/v0.1/referencedata/diagnosis/ .  The reference data API also loads all synonyms in a flat list - the conversion of synonyms to their\ncanonical form is handled by the save mechanism of subrecords using  ForeignKeyOrFreeText  fields.", 
            "title": "Reference data JSON API"
        }, 
        {
            "location": "/guides/referencedata/#working-with-reference-data-on-the-front-end", 
            "text": "The Angular service  Referencedata  can be used to fetch all lookuplists at once - for instance\nloaded in the Angular routing for a controller in your application  when('/my/route', {\n    controller: 'MyCtrl',\n    resolve: {\n           referencedata: function(Referencedata){ return Referencedata; }\n         }\n    }  Lookuplists will then be available either as properties of the  referencedata  object.", 
            "title": "Working with reference data on the front end"
        }, 
        {
            "location": "/guides/referencedata/#using-referencedata-in-forms", 
            "text": "The OPAL  form templatetag library  allow us to easily incorporate\nreferencedata into the forms we build, eiether by detecting their use automatically when we have ForeignKeyOrFreeText  fields, or explicitly by passing an argument.  {% load forms %}\n{% input field= Diagnosis.condition  %}\n{% select label= List of Conditions  lookuplist= referencedata.diagnosis  %}", 
            "title": "Using referencedata in forms"
        }, 
        {
            "location": "/guides/referencedata/#providing-data-for-lookuplists", 
            "text": "Reference data can be provided at application or plugin level in a file named  lookuplists.json  found in the {{ app_or_plugin }}/data/lookuplists  directory. This data should be in the OPAL JSON format.  {\n     name_of_lookuplist : [\n        {\n             name :  Value of lookuplist item ,\n             synonyms : [ Synonym 1 ,]\n\n        },\n    ]\n}", 
            "title": "Providing data for lookuplists"
        }, 
        {
            "location": "/guides/referencedata/#management-commands", 
            "text": "OPAL ships with some managemnent commands for importing and exporting lookup lists", 
            "title": "Management commands"
        }, 
        {
            "location": "/guides/referencedata/#dump_lookup_lists", 
            "text": "Prints all lookuplists as JSON to stdout.", 
            "title": "dump_lookup_lists"
        }, 
        {
            "location": "/guides/referencedata/#load_lookup_lists", 
            "text": "Loads lookup lists from all plugins/apps in the OPAL JSON format. The lookup lists are expected to be in {{ app }}/data/lookuplists/lookuplists.json", 
            "title": "load_lookup_lists"
        }, 
        {
            "location": "/guides/referencedata/#delete_all_lookuplists", 
            "text": "Deletes all currently lookuplist values and related synonyms", 
            "title": "delete_all_lookuplists"
        }, 
        {
            "location": "/guides/metadata/", 
            "text": "Application Metadata\n\n\nApplications commonly need to pass data to the front end which is not either clinical\ndata about a patient or episode of care, or coded \nreference data\n.\n\n\nOPAL provides a simple API for working with such data via the \nopal.core.metadata.Metadata\n\n\ndiscoverable\n.\n\n\nmetadata is made available on the scopes for patient lists and\npatient details\n\n\nDefining Metadata\n\n\nDefining metadata uses the same pattern as all \ndiscoverable\n features, we\ndefine a subclass:\n\n\nfrom django.conf import settings\nfrom opal.core import metadata\n\nclass FavouriteColours(metadata.Metadata):\n    slug = 'favourite-colour'\n\n    @classmethod\n    def to_dict(klass):\n        return {'favourite_colour': settings.FAVOURITE_COLOUR}\n\n\n\n\nAccessing Metadata on the front end\n\n\nWe can access our metadata with the Angular \nMetadata\n service.\n\n\n// yourapp/routes.js\nwhen('/my/route', {\n    controller: 'MyCtrl',\n    resolve: {\n           metadata: function(Metadata){ return Metadata; }\n         }\n    }\n\n// yourapp/yourctrl.js\nangular.module('yourapp.controllers').controller(\n    'MyCtrl', function($scope, metadata){\n\n      $scope.favourite_colour = metadata.favourite_colour;\n      console.log($scope.favourite_colour);\n      // -\n Whatever settings.FAVOURITE_COLOUR is set to\n\n});", 
            "title": "Metadata"
        }, 
        {
            "location": "/guides/metadata/#application-metadata", 
            "text": "Applications commonly need to pass data to the front end which is not either clinical\ndata about a patient or episode of care, or coded  reference data .  OPAL provides a simple API for working with such data via the  opal.core.metadata.Metadata  discoverable .  metadata is made available on the scopes for patient lists and\npatient details", 
            "title": "Application Metadata"
        }, 
        {
            "location": "/guides/metadata/#defining-metadata", 
            "text": "Defining metadata uses the same pattern as all  discoverable  features, we\ndefine a subclass:  from django.conf import settings\nfrom opal.core import metadata\n\nclass FavouriteColours(metadata.Metadata):\n    slug = 'favourite-colour'\n\n    @classmethod\n    def to_dict(klass):\n        return {'favourite_colour': settings.FAVOURITE_COLOUR}", 
            "title": "Defining Metadata"
        }, 
        {
            "location": "/guides/metadata/#accessing-metadata-on-the-front-end", 
            "text": "We can access our metadata with the Angular  Metadata  service.  // yourapp/routes.js\nwhen('/my/route', {\n    controller: 'MyCtrl',\n    resolve: {\n           metadata: function(Metadata){ return Metadata; }\n         }\n    }\n\n// yourapp/yourctrl.js\nangular.module('yourapp.controllers').controller(\n    'MyCtrl', function($scope, metadata){\n\n      $scope.favourite_colour = metadata.favourite_colour;\n      console.log($scope.favourite_colour);\n      // -  Whatever settings.FAVOURITE_COLOUR is set to\n\n});", 
            "title": "Accessing Metadata on the front end"
        }, 
        {
            "location": "/guides/lookup_lists/", 
            "text": "", 
            "title": "Lookup Lists"
        }, 
        {
            "location": "/guides/templates/", 
            "text": "Templates in OPAL\n\n\nOPAL uses a mixture of Django and Angular templates.\n\n\nAngular templates\n\n\nIn order to be compatible with Django templating, we use the \n[[ ... ]]\n notation for\nAngular interpolation, which allows us to mix Django template interpolation in templates\ndesigned to be rendered by Angular on the client side.\n\n\n!-- app_details_snippet.html --\n\n{{ OPAL_BRAND_NAME }} [[ OPAL_VERSION ]]\n\n\n\nGeneric Template URL\n\n\nOn many occasions we simply want to fetch a template from the server in our Angular code\nwithout any further processing. OPAL provides a default catchall HTML template url which\nwill render .html files direct from disk.\n\n\n# opal.urls\n\nurl(r'templates/(?P\ntemplate_name\n[a-z_/]+.html)', views.RawTemplateView.as_view())\n\n\n\nSo if our template is at \n./myapp/templates/foo/bar.html\n, then the url \n/templates/foo/bar.html\n\nwill return it.", 
            "title": "Templates"
        }, 
        {
            "location": "/guides/templates/#templates-in-opal", 
            "text": "OPAL uses a mixture of Django and Angular templates.", 
            "title": "Templates in OPAL"
        }, 
        {
            "location": "/guides/templates/#angular-templates", 
            "text": "In order to be compatible with Django templating, we use the  [[ ... ]]  notation for\nAngular interpolation, which allows us to mix Django template interpolation in templates\ndesigned to be rendered by Angular on the client side.  !-- app_details_snippet.html -- \n{{ OPAL_BRAND_NAME }} [[ OPAL_VERSION ]]", 
            "title": "Angular templates"
        }, 
        {
            "location": "/guides/templates/#generic-template-url", 
            "text": "On many occasions we simply want to fetch a template from the server in our Angular code\nwithout any further processing. OPAL provides a default catchall HTML template url which\nwill render .html files direct from disk.  # opal.urls\n\nurl(r'templates/(?P template_name [a-z_/]+.html)', views.RawTemplateView.as_view())  So if our template is at  ./myapp/templates/foo/bar.html , then the url  /templates/foo/bar.html \nwill return it.", 
            "title": "Generic Template URL"
        }, 
        {
            "location": "/guides/context_processors/", 
            "text": "Default context Processors\n\n\nsettings\n\n\nall settings are copied into the context of the template\n\n\nmodels\n\n\nall subrecords are copied into the context of the template under the namespace models, e.g. the allergies subrecord can be referred to by models.Allergy", 
            "title": "Context Processors"
        }, 
        {
            "location": "/guides/context_processors/#default-context-processors", 
            "text": "", 
            "title": "Default context Processors"
        }, 
        {
            "location": "/guides/context_processors/#settings", 
            "text": "all settings are copied into the context of the template", 
            "title": "settings"
        }, 
        {
            "location": "/guides/context_processors/#models", 
            "text": "all subrecords are copied into the context of the template under the namespace models, e.g. the allergies subrecord can be referred to by models.Allergy", 
            "title": "models"
        }, 
        {
            "location": "/guides/static_files/", 
            "text": "Static Files in OPAL\n\n\nAs with any Javascript heavy application, OPAL apps can quickly accumulate large numbers\nof static files. OPAL ships with the \nDjango Compressor\n\nlibrary out of the box, and uses it to manage the Javascript asset pipeline.\n\n\nDo consult the excellent Django Compresor documentation for more details on exactly how this process works.", 
            "title": "Static Files"
        }, 
        {
            "location": "/guides/static_files/#static-files-in-opal", 
            "text": "As with any Javascript heavy application, OPAL apps can quickly accumulate large numbers\nof static files. OPAL ships with the  Django Compressor \nlibrary out of the box, and uses it to manage the Javascript asset pipeline.  Do consult the excellent Django Compresor documentation for more details on exactly how this process works.", 
            "title": "Static Files in OPAL"
        }, 
        {
            "location": "/guides/forms/", 
            "text": "Forms\n\n\nEditing Records\n\n\nThe editing of records is a key component of any OPAL application. A key pattern is to edit\nor create an individual record in a modal containing the form for just that record. OPAL provides\nthe Angular Controller \nopal.controllers.EditItemCtrl\n for doing just this\n\n\nCustomising the Angular Controller\n\n\nOPAL uses the \nformController\n attribute of an \nItem\n to determine which Angular Controller to use. This\ndefaults to \nopal.controllers.EditItemCtrl\n. Individual Subrecords may customise this by implementing an Angualar record Service\nand overriding the formController attribute.\n\n\n# yourapp/models.py\nclass Diagnosis(models.Diagnosis):\n    _angular_service = 'Diagnosis'\n\n\n\n\n// yourapp/static/js/diagnosis.js\nangular.module('opal.records').factory('Diagnosis', function(){\n    return function(record){\n        record.formController = 'MyCustomDiagnosisFormController';\n        return record;\n    }\n});\n\n\n\n\n\nCustom form controllers can use the preSave(itemToBeSaved) hook to add their own custom logic before the item is saved\n\n\nForm and modal templates\n\n\nSubrecords have \nget_form_template()\n and \nget_modal_template()\n methods, which are used for\nfiguring out how to render forms for interacting with them. These use the following template\npaths based on the context in which they are called:\n\n\n# Forms\nforms/{episode_type}/{list slug}/{record_name}_form.html\nforms/{list_slug}/{record_name}_form.html\nforms/{episode_type}/{record_name}_form.html\nforms/{record_name}_form.html\n\n# Modals\nmodals/{episode_type}/{list slug}/{record_name}_modal.html\nmodals/{list_slug}/{record_name}_modal.html\nmodals/{episode_type}/{record_name}_modal.html\nmodals/{record_name}_modal.html\n\n\n\nAutogenerating forms\n\n\nThe \nopal\n commandline tool has a scaffold command, which will autogenerate missing form templates\nfor subrecord models. Simply run the following command to generate.\n\n\n$ opal scaffold $DJANGO_APP_WHERE_MODELS_LIVE\n\n\n\n(Note this will also generate and run migrations for any unmigrated models.xb)\n\n\nClient side Validation\n\n\nClient side validation for forms requires a pattern and a help block \n uses ng-pattern, ng-disabled (https://docs.angularjs.org/api/ng/directive/input)\n\n\nHelpers\n\n\nOPAL contains a number of helpers for developing forms and input modals.\n\n\nMany of these are located in the forms template tag library, which is a\nDjango templatetag library that understands the context of common patterns with\nOPAL for creating forms and modals.\n\n\nIt provides helpers for various input types that will allow you to render consistent\nforms, with less verbose templates.\n\n\n{% load forms %}\n\nform class=\"form-horizontal\"\n\n  {% input \"autofocus\" label=\"Destination\" model=\"editing.destination\" lookuplist=\"destination_list\" %}\n  {% datepicker label=\"Date\" model=\"editing.date\" %}\n  {% checkbox label=\"Alone?\" model=\"editing.alone\" %}\n\n/form\n\n\n\n\nFor full documentation of the options, please see the \nForm templatetags reference material", 
            "title": "Forms"
        }, 
        {
            "location": "/guides/forms/#forms", 
            "text": "", 
            "title": "Forms"
        }, 
        {
            "location": "/guides/forms/#editing-records", 
            "text": "The editing of records is a key component of any OPAL application. A key pattern is to edit\nor create an individual record in a modal containing the form for just that record. OPAL provides\nthe Angular Controller  opal.controllers.EditItemCtrl  for doing just this", 
            "title": "Editing Records"
        }, 
        {
            "location": "/guides/forms/#customising-the-angular-controller", 
            "text": "OPAL uses the  formController  attribute of an  Item  to determine which Angular Controller to use. This\ndefaults to  opal.controllers.EditItemCtrl . Individual Subrecords may customise this by implementing an Angualar record Service\nand overriding the formController attribute.  # yourapp/models.py\nclass Diagnosis(models.Diagnosis):\n    _angular_service = 'Diagnosis'  // yourapp/static/js/diagnosis.js\nangular.module('opal.records').factory('Diagnosis', function(){\n    return function(record){\n        record.formController = 'MyCustomDiagnosisFormController';\n        return record;\n    }\n});  Custom form controllers can use the preSave(itemToBeSaved) hook to add their own custom logic before the item is saved", 
            "title": "Customising the Angular Controller"
        }, 
        {
            "location": "/guides/forms/#form-and-modal-templates", 
            "text": "Subrecords have  get_form_template()  and  get_modal_template()  methods, which are used for\nfiguring out how to render forms for interacting with them. These use the following template\npaths based on the context in which they are called:  # Forms\nforms/{episode_type}/{list slug}/{record_name}_form.html\nforms/{list_slug}/{record_name}_form.html\nforms/{episode_type}/{record_name}_form.html\nforms/{record_name}_form.html\n\n# Modals\nmodals/{episode_type}/{list slug}/{record_name}_modal.html\nmodals/{list_slug}/{record_name}_modal.html\nmodals/{episode_type}/{record_name}_modal.html\nmodals/{record_name}_modal.html", 
            "title": "Form and modal templates"
        }, 
        {
            "location": "/guides/forms/#autogenerating-forms", 
            "text": "The  opal  commandline tool has a scaffold command, which will autogenerate missing form templates\nfor subrecord models. Simply run the following command to generate.  $ opal scaffold $DJANGO_APP_WHERE_MODELS_LIVE  (Note this will also generate and run migrations for any unmigrated models.xb)", 
            "title": "Autogenerating forms"
        }, 
        {
            "location": "/guides/forms/#client-side-validation", 
            "text": "Client side validation for forms requires a pattern and a help block   uses ng-pattern, ng-disabled (https://docs.angularjs.org/api/ng/directive/input)", 
            "title": "Client side Validation"
        }, 
        {
            "location": "/guides/forms/#helpers", 
            "text": "OPAL contains a number of helpers for developing forms and input modals.  Many of these are located in the forms template tag library, which is a\nDjango templatetag library that understands the context of common patterns with\nOPAL for creating forms and modals.  It provides helpers for various input types that will allow you to render consistent\nforms, with less verbose templates.  {% load forms %} form class=\"form-horizontal\" \n  {% input \"autofocus\" label=\"Destination\" model=\"editing.destination\" lookuplist=\"destination_list\" %}\n  {% datepicker label=\"Date\" model=\"editing.date\" %}\n  {% checkbox label=\"Alone?\" model=\"editing.alone\" %} /form   For full documentation of the options, please see the  Form templatetags reference material", 
            "title": "Helpers"
        }, 
        {
            "location": "/guides/patient_detail_views/", 
            "text": "OPAL Patient Detail Views\n\n\nOPAL provides all patients with a detail view.\n\n\nThe default detail view will allow the user to switch between all of a patient's\n\nepisodes\n, as well as editing patient information linked to the patient\nrather than an episode. (Allergies for example.)\n\n\nTemplate selection\n\n\nThe base template for a patient detail view is \n./opal/templates/patient_detail_base.html\n,\nalthough you can override or customise that for your application most easily by implementing\na \n./templates/patient_detail.html\n and customising specific blocks, as the OPAL implementation\nsimply includes the base template.\n\n\nEach episode will display using the template appropriate for it's \nEpisodeCategory\n - for instance\nan \nInpatientEpisode\n will use \n./templates/detail/inpatient.html\n. You may \ndefine your own\nepisode types\n should you require.\n\n\nRecord Panels\n\n\nA frequent pattern when constructing detail views is to render a panel for a particular \nSubrecord\n\ntype. The panels templatetag library contains some useful helpers for rendering panels based on\nmodels.\n\n\n{% load panels %}\n{% record_panel Diagnosis %}\n\n\n\nThe above code will render a panel for your episode, including the \nSubrecord\n detail template for\neach instance, and allowing editing, deletion and creation of instances of your \nSubrecord\n.\n\n\nYou may also consult the Detailed \nreference documentation\n for\nRecord Panels.\n\n\nCustom Patient Detail Views\n\n\nSometimes we also need to display information about a patient across multiple episodes, or simlply\na particular view of one episode. For instance, you might like to have a specific view for showing\nall of the lab results for a patient, which would be overwhelming were they all displayed in the\nepisode detail view.\n\n\nOPAL's PatientDetailView allows you to do just this. To add an additional view to a patient you\nsimply declare a PatientDetailView class:\n\n\n# detail.py\nfrom opal.core import detail\n\nclass MyCustomView(detail.PatientDetailView):\n    name = 'my_custom_view'\n    title = 'Special View'\n    template = 'detail/my_custom_view.html'\n\n\n\nThis will then be available in the Patient Detail view in the episode switcher menu. You can\nfind details of all the various options for PatientDetailViews in the\n\nreference documentation\n.", 
            "title": "Patient Detail Views"
        }, 
        {
            "location": "/guides/patient_detail_views/#opal-patient-detail-views", 
            "text": "OPAL provides all patients with a detail view.  The default detail view will allow the user to switch between all of a patient's episodes , as well as editing patient information linked to the patient\nrather than an episode. (Allergies for example.)", 
            "title": "OPAL Patient Detail Views"
        }, 
        {
            "location": "/guides/patient_detail_views/#template-selection", 
            "text": "The base template for a patient detail view is  ./opal/templates/patient_detail_base.html ,\nalthough you can override or customise that for your application most easily by implementing\na  ./templates/patient_detail.html  and customising specific blocks, as the OPAL implementation\nsimply includes the base template.  Each episode will display using the template appropriate for it's  EpisodeCategory  - for instance\nan  InpatientEpisode  will use  ./templates/detail/inpatient.html . You may  define your own\nepisode types  should you require.", 
            "title": "Template selection"
        }, 
        {
            "location": "/guides/patient_detail_views/#record-panels", 
            "text": "A frequent pattern when constructing detail views is to render a panel for a particular  Subrecord \ntype. The panels templatetag library contains some useful helpers for rendering panels based on\nmodels.  {% load panels %}\n{% record_panel Diagnosis %}  The above code will render a panel for your episode, including the  Subrecord  detail template for\neach instance, and allowing editing, deletion and creation of instances of your  Subrecord .  You may also consult the Detailed  reference documentation  for\nRecord Panels.", 
            "title": "Record Panels"
        }, 
        {
            "location": "/guides/patient_detail_views/#custom-patient-detail-views", 
            "text": "Sometimes we also need to display information about a patient across multiple episodes, or simlply\na particular view of one episode. For instance, you might like to have a specific view for showing\nall of the lab results for a patient, which would be overwhelming were they all displayed in the\nepisode detail view.  OPAL's PatientDetailView allows you to do just this. To add an additional view to a patient you\nsimply declare a PatientDetailView class:  # detail.py\nfrom opal.core import detail\n\nclass MyCustomView(detail.PatientDetailView):\n    name = 'my_custom_view'\n    title = 'Special View'\n    template = 'detail/my_custom_view.html'  This will then be available in the Patient Detail view in the episode switcher menu. You can\nfind details of all the various options for PatientDetailViews in the reference documentation .", 
            "title": "Custom Patient Detail Views"
        }, 
        {
            "location": "/guides/list_views/", 
            "text": "OPAL Patient List views\n\n\nOPAL provides support for displaying lists of patients, both via a spreadsheet like view,\nand with a card based view.\n\n\nDefining lists\n\n\nOPAL patient lists are subclasses of \nopal.core.patient_lists.PatientList\n.\n\n\nTypically these are found in a \npatient_lists.py\n module of your application or plugin. (Lists \ncan\n be\ndefined elsewhere, but may not be autodiscovered.)\n\n\nA basic list needs only define it's \ndisplay_name\n a \nqueryset\n of episodes to display, and\na \nschema\n of subrecords to show for each episode.\n\n\n# patient_lists.py\nfrom opal.models import Episore\nfrom opal.core import patient_lists\n\nfrom myapplication import models\n\nclass AlphabetListA(patient_lists.PatientList):\n    display_name = 'A Patients'\n\n    queryset = Episode.objects.filter(demographics__name__istartswith='a')\n\n    schema = [\n        models.Demographics,\n        models.Location,\n        models.Diagnosis,\n        models.Treatment\n    ]\n\n\n\nThe \ndisplay_name\n property is the human readable name for our list - which is displayed as\nlink text to our list.\n\n\nSchemas\n\n\nSchemas are lists of Subrecords that we would like to display in our list. By default we\nrender the subrecord display_template, and allow editing and addition of each subrecord in\nplace.\n\n\nTemplate selection\n\n\nThe list view is constructed by rendering a column for each record, in the order\ndefined in the schema, and a row for each episode in the list.\n\n\nThe template for each cell should live in \n./templates/records/*\n. In order to\nselect the appropriate template for a given episode, OPAL looks in the following\nlocations:\n\n\nrecords/{episode_type}/{list slug}/{record_name}.html\nrecords/{list_slug}/{record_name}.html\nrecords/{episode_type}/{record_name}.html\nrecords/{record_name}.html\n\n\n\nQuerysets\n\n\nThe queryset property of your list should contain all of the episodes for this particular\nlist. On occasion we require a more dynamic queryset, in which case we can ovreride the\n\nget_queryset\n method.\n\n\n# patient_lists.py\nimport datetime\nfrom opal.models import Episode\nfrom opal.core import patient_lists\n\nclass MyWeeklyList(patient_lists.PatientList):\n    def get_queryset(self):\n        one_week_ago = datetime.date.today() - datetime.timedelta(days=1)\n        return Episode.objects.filter(date_of_admission__gte=one_week_ago)\n\n\n\nOrdering Lists\n\n\nAs a \ndiscoverable.SortableFeature\n lists may be ordered by setting the\n\norder\n property to an integer. Lists will display in drop-downs, tables et cetera, in\nthis order.\n\n\nSlug\n\n\nAs a \ndiscoverable\n feature, the slug for each list is determined by\neither setting the \nslug\n property, or returning a string from the \nget_slug\n classmethod.\n\n\nTemplates\n\n\nTagged Patient Lists\n\n\nA common model for working with lists is to use lists based on the tags assigned to an episode.\nThis allows users to add and remove patients from lists as they see fit, rather than attempting\nto infer it from other properties of the patient (e.g. their current location for instance.)\nwhich can be particularly challenging for some clinical services.\n\n\nOPAL provides a specific subclass for working with Tagged Patient Lists:\n\n\n# patient_lists.py\nfrom opal.core import patient_lists\n\nclass MyTagList(patient_lists.TaggedPatientList):\n    display_name = 'Tagged blue'\n    tag = 'blue'\n\n\n\nTagged lists will automatically fetch the appropriate queryset for patients tagged with the tag\nyou specify.\n\n\nInvalid Tagged Patient Lists\n\n\nTag names may not have hyphens in them - OPAL uses hyphens to distinguish between tags and subtags\nin the urls for lists, so attempting to define one will raise an exception.\n\n\nclass MyList(TaggedPatientList):\n    tag = 'foo-bar'\n\n# This will raise InvalidDiscoverableFeatureError !\n\n\n\nDirect Add\n\n\nSometimes, we want to control the flow of patients onto, off, or between lists a little more closely.\nFor instance, we might need to ensure additional data collection at points in a patient journey.\n\n\nIn order to accomplish this, we often implement custom patient flows that wil programatically tag\nepisodes to tagged lists. In those cases we will want to prevent users from manually adding or\nremoving the tags themselves. This can be easily accomplished via the \ndirect_add\n property. When\nset to false, users will not be able to add the tag for this list.\n\n\nclass MyLockedDownList(TaggedPatientList):\n    tag = 'liaisonpatients'\n    direct_add = False\n\n\n\nAccess Control\n\n\nAs PatientLists are a \nRestrictableFeature\n, Access control\nfor lists is set by overriding the \nvisible_to\n classmethod. Your list will only be visible to\nthose users for whom this method returns \nTrue\n.\n\n\nFor instance, we could define a Patient List that was only available to Django Superusers:\n\n\nclass SuperuserPatientList(PatientList):\n\n    @classmethod\n    def visible_to(klass, user):\n        return user.is_superuser", 
            "title": "Patient List Views"
        }, 
        {
            "location": "/guides/list_views/#opal-patient-list-views", 
            "text": "OPAL provides support for displaying lists of patients, both via a spreadsheet like view,\nand with a card based view.", 
            "title": "OPAL Patient List views"
        }, 
        {
            "location": "/guides/list_views/#defining-lists", 
            "text": "OPAL patient lists are subclasses of  opal.core.patient_lists.PatientList .  Typically these are found in a  patient_lists.py  module of your application or plugin. (Lists  can  be\ndefined elsewhere, but may not be autodiscovered.)  A basic list needs only define it's  display_name  a  queryset  of episodes to display, and\na  schema  of subrecords to show for each episode.  # patient_lists.py\nfrom opal.models import Episore\nfrom opal.core import patient_lists\n\nfrom myapplication import models\n\nclass AlphabetListA(patient_lists.PatientList):\n    display_name = 'A Patients'\n\n    queryset = Episode.objects.filter(demographics__name__istartswith='a')\n\n    schema = [\n        models.Demographics,\n        models.Location,\n        models.Diagnosis,\n        models.Treatment\n    ]  The  display_name  property is the human readable name for our list - which is displayed as\nlink text to our list.", 
            "title": "Defining lists"
        }, 
        {
            "location": "/guides/list_views/#schemas", 
            "text": "Schemas are lists of Subrecords that we would like to display in our list. By default we\nrender the subrecord display_template, and allow editing and addition of each subrecord in\nplace.", 
            "title": "Schemas"
        }, 
        {
            "location": "/guides/list_views/#template-selection", 
            "text": "The list view is constructed by rendering a column for each record, in the order\ndefined in the schema, and a row for each episode in the list.  The template for each cell should live in  ./templates/records/* . In order to\nselect the appropriate template for a given episode, OPAL looks in the following\nlocations:  records/{episode_type}/{list slug}/{record_name}.html\nrecords/{list_slug}/{record_name}.html\nrecords/{episode_type}/{record_name}.html\nrecords/{record_name}.html", 
            "title": "Template selection"
        }, 
        {
            "location": "/guides/list_views/#querysets", 
            "text": "The queryset property of your list should contain all of the episodes for this particular\nlist. On occasion we require a more dynamic queryset, in which case we can ovreride the get_queryset  method.  # patient_lists.py\nimport datetime\nfrom opal.models import Episode\nfrom opal.core import patient_lists\n\nclass MyWeeklyList(patient_lists.PatientList):\n    def get_queryset(self):\n        one_week_ago = datetime.date.today() - datetime.timedelta(days=1)\n        return Episode.objects.filter(date_of_admission__gte=one_week_ago)", 
            "title": "Querysets"
        }, 
        {
            "location": "/guides/list_views/#ordering-lists", 
            "text": "As a  discoverable.SortableFeature  lists may be ordered by setting the order  property to an integer. Lists will display in drop-downs, tables et cetera, in\nthis order.", 
            "title": "Ordering Lists"
        }, 
        {
            "location": "/guides/list_views/#slug", 
            "text": "As a  discoverable  feature, the slug for each list is determined by\neither setting the  slug  property, or returning a string from the  get_slug  classmethod.", 
            "title": "Slug"
        }, 
        {
            "location": "/guides/list_views/#templates", 
            "text": "", 
            "title": "Templates"
        }, 
        {
            "location": "/guides/list_views/#tagged-patient-lists", 
            "text": "A common model for working with lists is to use lists based on the tags assigned to an episode.\nThis allows users to add and remove patients from lists as they see fit, rather than attempting\nto infer it from other properties of the patient (e.g. their current location for instance.)\nwhich can be particularly challenging for some clinical services.  OPAL provides a specific subclass for working with Tagged Patient Lists:  # patient_lists.py\nfrom opal.core import patient_lists\n\nclass MyTagList(patient_lists.TaggedPatientList):\n    display_name = 'Tagged blue'\n    tag = 'blue'  Tagged lists will automatically fetch the appropriate queryset for patients tagged with the tag\nyou specify.", 
            "title": "Tagged Patient Lists"
        }, 
        {
            "location": "/guides/list_views/#invalid-tagged-patient-lists", 
            "text": "Tag names may not have hyphens in them - OPAL uses hyphens to distinguish between tags and subtags\nin the urls for lists, so attempting to define one will raise an exception.  class MyList(TaggedPatientList):\n    tag = 'foo-bar'\n\n# This will raise InvalidDiscoverableFeatureError !", 
            "title": "Invalid Tagged Patient Lists"
        }, 
        {
            "location": "/guides/list_views/#direct-add", 
            "text": "Sometimes, we want to control the flow of patients onto, off, or between lists a little more closely.\nFor instance, we might need to ensure additional data collection at points in a patient journey.  In order to accomplish this, we often implement custom patient flows that wil programatically tag\nepisodes to tagged lists. In those cases we will want to prevent users from manually adding or\nremoving the tags themselves. This can be easily accomplished via the  direct_add  property. When\nset to false, users will not be able to add the tag for this list.  class MyLockedDownList(TaggedPatientList):\n    tag = 'liaisonpatients'\n    direct_add = False", 
            "title": "Direct Add"
        }, 
        {
            "location": "/guides/list_views/#access-control", 
            "text": "As PatientLists are a  RestrictableFeature , Access control\nfor lists is set by overriding the  visible_to  classmethod. Your list will only be visible to\nthose users for whom this method returns  True .  For instance, we could define a Patient List that was only available to Django Superusers:  class SuperuserPatientList(PatientList):\n\n    @classmethod\n    def visible_to(klass, user):\n        return user.is_superuser", 
            "title": "Access Control"
        }, 
        {
            "location": "/guides/discoverable/", 
            "text": "OPAL Discoverable Features\n\n\nOPAL makes extensive use of the case of discoverable features. These are pieces of\ncomposable functionality that can be implemented by any plugin or application,\nsimply by declaring a class with the appropriate fields and methods implemented. (Details\nof exactly which fields and methods vary by feature.)\n\n\nDefining Discoverable Features\n\n\nThe only thing required for a discoverable feature, is that it defines the name of\nthe module in which it should expect to find instances.\n\n\nfrom opal.core import discoverable\n\nclass MyFeature(discoverable.DiscoverableFeature):\n    module_name = 'myfeature'\n\n\n\nThis now gives us acces to various interfaces which come with the library. We can access\nall subclasses of \nMyFeature\n by calling \nMyFeature.list()\n - which will look through all\nDjango apps in our application, and look for a module named \nmyfeature.py\n. The \nlist()\n\nmethod then returns any subclasses of \nMyFeature\n.\n\n\nSlugs and Display Names\n\n\nWe often want to define human and machine readable strings to name our features. Display\nnames are intended for people - feel free to include spaces, numbers and puctuation. Slugs\nare intended for machines - so no spaces, numbers, hypens, periods or other punctuation. By\ndefault, if there is a display name and no explicit slug, we wil 'slugify' the display name.\n\n\nclass MyNameFeature(MyFeature):\n    display_name = 'Hello World'\n\nprint MyNameFeature.get_slug()\n# 'hello_world'\n\nclass MySlugFeature(MyFeature):\n    slug = 'this_is_a_slug'\n\nprint MySlugFeature.get_slug()\n# 'this_is_a_slug'\n\n\n\nRetrieving Subclasses\n\n\nOnce we define a \ndisplay_name\n or \nslug\n for sublasses of our feature, we can then fetch them via\nthe \nget()\n api.\n\n\nclass RedFeature(MyFeature):\n    slug = 'red_feature'\n\nMyFeature.get('red_feature') # -\n RedFeature\n\n\n\nSortable Features\n\n\nWe can make our feature sortable via an \norder\n property by including\n \ndiscoverable.SortableFeature\n as a parent class. This will ensure that \nMyFeature.list()\n\n respects the \n.order\n number of any subclass.\n\n\nclass MyFeature(discoverable.DiscoverableFeature,\n                 discoverable.SortableFeature):\n     module_name = 'myfeature'\n\nclass ThirdFeature(MyFeature):\n    order = 3\n\nclass FirstFeature(MyFeature):\n    order = 1\n\nclass SecondFeature(MyFeature):\n    order = 2\n\nfor f in MyFeature.list():\n    print f.order, f\n\n# \nclass '*.*.FirstFeature'\n, 1\n# \nclass '*.*.SecondFeature'\n, 2\n# \nclass '*.*.ThirdFeature'\n, 3\n\n\n\nRestrictable Features\n\n\nWe can ensure that only particular users can access a feature by including\n \ndiscoverable.RestrictableFeature\n as a parent class, and implementing the \nvisible_to\n\n classmethod on any restricted subclasses.\n\n\n class MyFeature(discoverable.DiscoverableFeature, discoverable.RestrictableFeature):\n     module_name = 'myfeature'\n\n\n\nFor instance, a feature that was only visible to superusers could be implemented like this:\n\n\n class SuperuserFeature(MyFeature):\n\n     @classmethod\n     def visible_to(klass, user):\n         return user.is_superuser\n\n\n\nValidating Features\n\n\nSometimes we wish to validate features so that we don't cause unintended consequences when\nwe implement subclasses of them. This is available via the \nis_valid\n classmethod. For instance,\nif we wanted to implement a \"Bomb\" feature, which blew up every time the blow_up attribute was\ntrue, we could to this as follows:\n\n\nclass BombFeature(discoverable.DiscoverableFeature):\n    module_name = 'bombs'\n    blow_up = False\n\n    @classmethod\n    def is_valid(klass):\n        if klass.blow_up == True:\n            from opal.core.exceptions import InvalidDiscoverableFeatureError\n            raise InvalidDiscoverableFeatureError('BLOWING UP')\n\n\nclass Threat(BombFeature): pass\n# That's fine.\n\nclass Detonate(BombFeature):\n    blow_up = True\n# InvalidDiscoverableFeatureError: BLOWING UP\n\n\n\nAbstract Features\n\n\nSometimes we want to declare an abstract feature - something with reusable functionality\nthat isn't itself a new feature. We would rather not have our abstract feature show up\nwhen we \nlist()\n our base feature - because it's simply a programming convenience. This\nis made simple by using \nopal.utils.AbstractBase\n.\n\n\n    class A(discoverable.DiscoverableFeature):\n        module_name = 'a'\n\n    class AA(A, AbstractBase): pass\n\n    class B(A): pass\n\n    class C(AA): pass\n\n    class D(AA): pass\n\n\n    A.list()\n    # [B, C, D]", 
            "title": "Discoverable Features"
        }, 
        {
            "location": "/guides/discoverable/#opal-discoverable-features", 
            "text": "OPAL makes extensive use of the case of discoverable features. These are pieces of\ncomposable functionality that can be implemented by any plugin or application,\nsimply by declaring a class with the appropriate fields and methods implemented. (Details\nof exactly which fields and methods vary by feature.)", 
            "title": "OPAL Discoverable Features"
        }, 
        {
            "location": "/guides/discoverable/#defining-discoverable-features", 
            "text": "The only thing required for a discoverable feature, is that it defines the name of\nthe module in which it should expect to find instances.  from opal.core import discoverable\n\nclass MyFeature(discoverable.DiscoverableFeature):\n    module_name = 'myfeature'  This now gives us acces to various interfaces which come with the library. We can access\nall subclasses of  MyFeature  by calling  MyFeature.list()  - which will look through all\nDjango apps in our application, and look for a module named  myfeature.py . The  list() \nmethod then returns any subclasses of  MyFeature .", 
            "title": "Defining Discoverable Features"
        }, 
        {
            "location": "/guides/discoverable/#slugs-and-display-names", 
            "text": "We often want to define human and machine readable strings to name our features. Display\nnames are intended for people - feel free to include spaces, numbers and puctuation. Slugs\nare intended for machines - so no spaces, numbers, hypens, periods or other punctuation. By\ndefault, if there is a display name and no explicit slug, we wil 'slugify' the display name.  class MyNameFeature(MyFeature):\n    display_name = 'Hello World'\n\nprint MyNameFeature.get_slug()\n# 'hello_world'\n\nclass MySlugFeature(MyFeature):\n    slug = 'this_is_a_slug'\n\nprint MySlugFeature.get_slug()\n# 'this_is_a_slug'", 
            "title": "Slugs and Display Names"
        }, 
        {
            "location": "/guides/discoverable/#retrieving-subclasses", 
            "text": "Once we define a  display_name  or  slug  for sublasses of our feature, we can then fetch them via\nthe  get()  api.  class RedFeature(MyFeature):\n    slug = 'red_feature'\n\nMyFeature.get('red_feature') # -  RedFeature", 
            "title": "Retrieving Subclasses"
        }, 
        {
            "location": "/guides/discoverable/#sortable-features", 
            "text": "We can make our feature sortable via an  order  property by including\n  discoverable.SortableFeature  as a parent class. This will ensure that  MyFeature.list() \n respects the  .order  number of any subclass.  class MyFeature(discoverable.DiscoverableFeature,\n                 discoverable.SortableFeature):\n     module_name = 'myfeature'\n\nclass ThirdFeature(MyFeature):\n    order = 3\n\nclass FirstFeature(MyFeature):\n    order = 1\n\nclass SecondFeature(MyFeature):\n    order = 2\n\nfor f in MyFeature.list():\n    print f.order, f\n\n#  class '*.*.FirstFeature' , 1\n#  class '*.*.SecondFeature' , 2\n#  class '*.*.ThirdFeature' , 3", 
            "title": "Sortable Features"
        }, 
        {
            "location": "/guides/discoverable/#restrictable-features", 
            "text": "We can ensure that only particular users can access a feature by including\n  discoverable.RestrictableFeature  as a parent class, and implementing the  visible_to \n classmethod on any restricted subclasses.   class MyFeature(discoverable.DiscoverableFeature, discoverable.RestrictableFeature):\n     module_name = 'myfeature'  For instance, a feature that was only visible to superusers could be implemented like this:   class SuperuserFeature(MyFeature):\n\n     @classmethod\n     def visible_to(klass, user):\n         return user.is_superuser", 
            "title": "Restrictable Features"
        }, 
        {
            "location": "/guides/discoverable/#validating-features", 
            "text": "Sometimes we wish to validate features so that we don't cause unintended consequences when\nwe implement subclasses of them. This is available via the  is_valid  classmethod. For instance,\nif we wanted to implement a \"Bomb\" feature, which blew up every time the blow_up attribute was\ntrue, we could to this as follows:  class BombFeature(discoverable.DiscoverableFeature):\n    module_name = 'bombs'\n    blow_up = False\n\n    @classmethod\n    def is_valid(klass):\n        if klass.blow_up == True:\n            from opal.core.exceptions import InvalidDiscoverableFeatureError\n            raise InvalidDiscoverableFeatureError('BLOWING UP')\n\n\nclass Threat(BombFeature): pass\n# That's fine.\n\nclass Detonate(BombFeature):\n    blow_up = True\n# InvalidDiscoverableFeatureError: BLOWING UP", 
            "title": "Validating Features"
        }, 
        {
            "location": "/guides/discoverable/#abstract-features", 
            "text": "Sometimes we want to declare an abstract feature - something with reusable functionality\nthat isn't itself a new feature. We would rather not have our abstract feature show up\nwhen we  list()  our base feature - because it's simply a programming convenience. This\nis made simple by using  opal.utils.AbstractBase .      class A(discoverable.DiscoverableFeature):\n        module_name = 'a'\n\n    class AA(A, AbstractBase): pass\n\n    class B(A): pass\n\n    class C(AA): pass\n\n    class D(AA): pass\n\n\n    A.list()\n    # [B, C, D]", 
            "title": "Abstract Features"
        }, 
        {
            "location": "/guides/search/", 
            "text": "OPAL Search overview\n\n\nThe OPAL Search backend is switchable using the settings value OPAL_SEARCH_BACKEND.\n\n\nBy default it will do a database query.\n\n\nThe backend takes in a dictionary with the following fields\n\n\n{\n      \"queryType\": either \"Equals\" or \"Contains\",\n      \"field\": the label of the column that will be queried, e.g. Hospital Number,\n      \"query\": the value to be queried, e.g. \"1111\",\n      'combine': whether the query is 'and' or 'or' in conjunction with other dictionaries\n      'column': the model to be queried e.g. 'demographics'\n}", 
            "title": "Search Overview"
        }, 
        {
            "location": "/guides/search/#opal-search-overview", 
            "text": "The OPAL Search backend is switchable using the settings value OPAL_SEARCH_BACKEND.  By default it will do a database query.  The backend takes in a dictionary with the following fields  {\n      \"queryType\": either \"Equals\" or \"Contains\",\n      \"field\": the label of the column that will be queried, e.g. Hospital Number,\n      \"query\": the value to be queried, e.g. \"1111\",\n      'combine': whether the query is 'and' or 'or' in conjunction with other dictionaries\n      'column': the model to be queried e.g. 'demographics'\n}", 
            "title": "OPAL Search overview"
        }, 
        {
            "location": "/reference/episode/", 
            "text": "opal.models.Episode\n\n\nThe \nopal.models.Episode\n class represents an episode of care for a patient. This can be either\nan inpatient stay, an outpatient treatment, a telephone liaison, an appointment at a clinic,\nor any other arbitrarially defined period of care.\n\n\nFields\n\n\nEpisode.category\n\n\nThe category of this episode - e.g. inpatient, outpatient et cetera.\nThis defaults to whatever is set on your application's subclass of\n\nopal.core.application.OpalApplication\n - which itseflf defaults to 'inpatient'.\n\n\nEpisode.patient\n\n\nA foreign key relationship to the patient for whom this episode concerns.\n\n\nEpisode.active\n\n\nA boolean to provide a quick lookup for whether this is an active or closed episode.\n\n\nEpisode.date_of_admission\n\n\nIf this is an inpatient episode, the date of admission.\n\n\nEpisode.discharge_date\n\n\nIf this is an inpatient episode, the date of discharge.\n\n\nEpisode.date_of_episode\n\n\nIf this is an episode that occurs on one date (like a clinic visit or telephone liaison), the\ndate of that event.\n\n\nEpisode.consistency_token\n\n\nA (automatically generated) hash of the above fields. This is used for detecting concurrent edits.\n\n\nMethods\n\n\nThe Episode model has the following methods:\n\n\nEpisode.to_dict\n\n\nReturn a dictionary of field value pairs for this episode\n\n\nepisode.to_dict(user)\n\n\n\nArguments:\n\n\n\n\nuser\n The User for whom we want to serialise this episode\n\n\n\n\nKeywords:\n\n\n\n\nshallow\n Boolean to indicate whether we want just this episode, or also a sorted set of\nprevious and subsequent episodes\n\n\n\n\nEpisode.get_tag_names\n\n\nArguments:\n\n\n\n\nuser\n The user for whom we want the tag names.\n\n\n\n\nReturn the current active tag names for this Episode as strings.\n\n\nepisode.get_tag_names(user)\n# ['mine', 'infectioncontrol']\n\n\n\nEpisode.set_tag_names\n\n\nArguments:\n\n\n\n\ntag_names\n The list of tags that we want to be active for this Episode.\n\n\nuser\n The user for whom we want the tag names.\n\n\n\n\nReturn the current active tag names for this Episode as strings.\n\n\nepisode.set_tag_names(['mine', 'infectioncontrol'], user)\n\n\n\nManager\n\n\nThe custom manager for Episodes has the following methods:\n\n\nEpisode.objects.serialised()\n\n\nReturn a set of serialised episodes.\n\n\nEpisode.objects.serialised(User, [episode, ...], historic_tags=False)\n\n\n\nArguments:\n\n\n\n\nuser\n The User for whom we want to serialise this episode\n\n\nepisodes\n An iterable of Episode instances\n\n\n\n\nKeywords:\n\n\n\n\nhistoric_tags\n A boolean to indicate whether the user desires historic or just current tags to\nbe serialised\n\n\n\n\nEpisode.objects.search\n\n\nAs a useful utility, the episode manager has a search method that will search on first name, last name and/or hospital number, under the hood it uses \nPatient search\n\n\nopal.core.api.EpisodeViewSet\n\n\nGives you an api for create/update/list/retrieve apis for episodes. Its recommended that you use \nopal.core.patient_lists\n rather than the list api, as this gives you more flexibility.\n\n\nThe Create api accepts {\n    demographics: {{ a serialised demographics model }},\n    location: {{ a serialised location model }}.\n    tagging: {{ a dictionary of tag names to True }}\n}", 
            "title": "The Episode model"
        }, 
        {
            "location": "/reference/episode/#opalmodelsepisode", 
            "text": "The  opal.models.Episode  class represents an episode of care for a patient. This can be either\nan inpatient stay, an outpatient treatment, a telephone liaison, an appointment at a clinic,\nor any other arbitrarially defined period of care.", 
            "title": "opal.models.Episode"
        }, 
        {
            "location": "/reference/episode/#fields", 
            "text": "", 
            "title": "Fields"
        }, 
        {
            "location": "/reference/episode/#episodecategory", 
            "text": "The category of this episode - e.g. inpatient, outpatient et cetera.\nThis defaults to whatever is set on your application's subclass of opal.core.application.OpalApplication  - which itseflf defaults to 'inpatient'.", 
            "title": "Episode.category"
        }, 
        {
            "location": "/reference/episode/#episodepatient", 
            "text": "A foreign key relationship to the patient for whom this episode concerns.", 
            "title": "Episode.patient"
        }, 
        {
            "location": "/reference/episode/#episodeactive", 
            "text": "A boolean to provide a quick lookup for whether this is an active or closed episode.", 
            "title": "Episode.active"
        }, 
        {
            "location": "/reference/episode/#episodedate_of_admission", 
            "text": "If this is an inpatient episode, the date of admission.", 
            "title": "Episode.date_of_admission"
        }, 
        {
            "location": "/reference/episode/#episodedischarge_date", 
            "text": "If this is an inpatient episode, the date of discharge.", 
            "title": "Episode.discharge_date"
        }, 
        {
            "location": "/reference/episode/#episodedate_of_episode", 
            "text": "If this is an episode that occurs on one date (like a clinic visit or telephone liaison), the\ndate of that event.", 
            "title": "Episode.date_of_episode"
        }, 
        {
            "location": "/reference/episode/#episodeconsistency_token", 
            "text": "A (automatically generated) hash of the above fields. This is used for detecting concurrent edits.", 
            "title": "Episode.consistency_token"
        }, 
        {
            "location": "/reference/episode/#methods", 
            "text": "The Episode model has the following methods:", 
            "title": "Methods"
        }, 
        {
            "location": "/reference/episode/#episodeto_dict", 
            "text": "Return a dictionary of field value pairs for this episode  episode.to_dict(user)  Arguments:   user  The User for whom we want to serialise this episode   Keywords:   shallow  Boolean to indicate whether we want just this episode, or also a sorted set of\nprevious and subsequent episodes", 
            "title": "Episode.to_dict"
        }, 
        {
            "location": "/reference/episode/#episodeget_tag_names", 
            "text": "Arguments:   user  The user for whom we want the tag names.   Return the current active tag names for this Episode as strings.  episode.get_tag_names(user)\n# ['mine', 'infectioncontrol']", 
            "title": "Episode.get_tag_names"
        }, 
        {
            "location": "/reference/episode/#episodeset_tag_names", 
            "text": "Arguments:   tag_names  The list of tags that we want to be active for this Episode.  user  The user for whom we want the tag names.   Return the current active tag names for this Episode as strings.  episode.set_tag_names(['mine', 'infectioncontrol'], user)", 
            "title": "Episode.set_tag_names"
        }, 
        {
            "location": "/reference/episode/#manager", 
            "text": "The custom manager for Episodes has the following methods:", 
            "title": "Manager"
        }, 
        {
            "location": "/reference/episode/#episodeobjectsserialised", 
            "text": "Return a set of serialised episodes.  Episode.objects.serialised(User, [episode, ...], historic_tags=False)  Arguments:   user  The User for whom we want to serialise this episode  episodes  An iterable of Episode instances   Keywords:   historic_tags  A boolean to indicate whether the user desires historic or just current tags to\nbe serialised", 
            "title": "Episode.objects.serialised()"
        }, 
        {
            "location": "/reference/episode/#episodeobjectssearch", 
            "text": "As a useful utility, the episode manager has a search method that will search on first name, last name and/or hospital number, under the hood it uses  Patient search", 
            "title": "Episode.objects.search"
        }, 
        {
            "location": "/reference/episode/#opalcoreapiepisodeviewset", 
            "text": "Gives you an api for create/update/list/retrieve apis for episodes. Its recommended that you use  opal.core.patient_lists  rather than the list api, as this gives you more flexibility.  The Create api accepts {\n    demographics: {{ a serialised demographics model }},\n    location: {{ a serialised location model }}.\n    tagging: {{ a dictionary of tag names to True }}\n}", 
            "title": "opal.core.api.EpisodeViewSet"
        }, 
        {
            "location": "/reference/episode_categories/", 
            "text": "opal.core.episodes\n\n\nEpisodeCategory\n\n\nOPAL Episodes have an associated category. These categories are implemented as subclasses\nof \nopal.core.episodes.EpisodeCategory\n. This class is an OPAL \nDiscoverableFeature\n\nand thus inherits all of the core Discoverable API.\n\n\nThe category of any episode can be accessed as the \n.category\n property of any \nEpisode\n instance.\n\n\nProperties\n\n\nEpisodeCategory.detail_template\n\n\nThis is the template used within the \nPatient Detail View\n to display\ninformation about episodes of this category.\n\n\nEpisodeCategory.start\n\n\nReturns the Start date of this episode type.\n\n\nEpisodeCategory.stop\n\n\nReturns the Stop date of this episode type\n\n\nInpatientEpisode\n\n\nThis is the defualt EpisodeCategory imlpementation - applications started with OPAL's scaffolding\nscripts will use this as the \nOpalApplication.default_episode_category\n. It sets the detail template to\n\ndetail/inpatient.html", 
            "title": "Episode Categories"
        }, 
        {
            "location": "/reference/episode_categories/#opalcoreepisodes", 
            "text": "", 
            "title": "opal.core.episodes"
        }, 
        {
            "location": "/reference/episode_categories/#episodecategory", 
            "text": "OPAL Episodes have an associated category. These categories are implemented as subclasses\nof  opal.core.episodes.EpisodeCategory . This class is an OPAL  DiscoverableFeature \nand thus inherits all of the core Discoverable API.  The category of any episode can be accessed as the  .category  property of any  Episode  instance.", 
            "title": "EpisodeCategory"
        }, 
        {
            "location": "/reference/episode_categories/#properties", 
            "text": "", 
            "title": "Properties"
        }, 
        {
            "location": "/reference/episode_categories/#episodecategorydetail_template", 
            "text": "This is the template used within the  Patient Detail View  to display\ninformation about episodes of this category.", 
            "title": "EpisodeCategory.detail_template"
        }, 
        {
            "location": "/reference/episode_categories/#episodecategorystart", 
            "text": "Returns the Start date of this episode type.", 
            "title": "EpisodeCategory.start"
        }, 
        {
            "location": "/reference/episode_categories/#episodecategorystop", 
            "text": "Returns the Stop date of this episode type", 
            "title": "EpisodeCategory.stop"
        }, 
        {
            "location": "/reference/episode_categories/#inpatientepisode", 
            "text": "This is the defualt EpisodeCategory imlpementation - applications started with OPAL's scaffolding\nscripts will use this as the  OpalApplication.default_episode_category . It sets the detail template to detail/inpatient.html", 
            "title": "InpatientEpisode"
        }, 
        {
            "location": "/reference/patient/", 
            "text": "opal.models.Patient\n\n\nmethods\n\n\ncreate_episode\n\n\nReturns a new \nEpisode\n for this patient.\n\n\nto_dict\n\n\nReturn the dictionary representation of this patient - suitable for serialization.\n\n\npatient.to_dict(user)\n\n\n\nbulk_update\n\n\nCreate or update many subrecords in one go, from a serialised dictionary of data.\n\n\nPass in a dictionary of subrecords you want to update, as well as an episode if one exists.\nThis method will create all the subrecords and implicitly create a new episode if required.\n\n\nThis API will execute all create/update operations as an atomic transaction.\n\n\nFor example the following will create a patient:\n\n\npatient = Patient()\npatient.bulk_update(\n  {\n    \"demographics\": \"hospital_number\": \"1231212\",\n    \"allergies\": [\n        {\"drug\": \"penicillin\"},\n        {\"drug\": \"aspirin\"},\n    ]\n  },\n  user\n)\n\n\n\nManager\n\n\nThe custom manager for Patient has the following methods:\n\n\nPatient.objects.search\n\n\nA useful utility the patient manager has a search method that\nwill search on first name last name hospital number. Its splits the string input on space, so if you do \"12 Jane\", you will get all\nPatients who's name, surname or hospital number contains either\n12 or Jane, in this example most probably people who's hospital\nnumber contains 12 and who's first name is Jane.", 
            "title": "Patient"
        }, 
        {
            "location": "/reference/patient/#opalmodelspatient", 
            "text": "", 
            "title": "opal.models.Patient"
        }, 
        {
            "location": "/reference/patient/#methods", 
            "text": "", 
            "title": "methods"
        }, 
        {
            "location": "/reference/patient/#create_episode", 
            "text": "Returns a new  Episode  for this patient.", 
            "title": "create_episode"
        }, 
        {
            "location": "/reference/patient/#to_dict", 
            "text": "Return the dictionary representation of this patient - suitable for serialization.  patient.to_dict(user)", 
            "title": "to_dict"
        }, 
        {
            "location": "/reference/patient/#bulk_update", 
            "text": "Create or update many subrecords in one go, from a serialised dictionary of data.  Pass in a dictionary of subrecords you want to update, as well as an episode if one exists.\nThis method will create all the subrecords and implicitly create a new episode if required.  This API will execute all create/update operations as an atomic transaction.  For example the following will create a patient:  patient = Patient()\npatient.bulk_update(\n  {\n    \"demographics\": \"hospital_number\": \"1231212\",\n    \"allergies\": [\n        {\"drug\": \"penicillin\"},\n        {\"drug\": \"aspirin\"},\n    ]\n  },\n  user\n)", 
            "title": "bulk_update"
        }, 
        {
            "location": "/reference/patient/#manager", 
            "text": "The custom manager for Patient has the following methods:", 
            "title": "Manager"
        }, 
        {
            "location": "/reference/patient/#patientobjectssearch", 
            "text": "A useful utility the patient manager has a search method that\nwill search on first name last name hospital number. Its splits the string input on space, so if you do \"12 Jane\", you will get all\nPatients who's name, surname or hospital number contains either\n12 or Jane, in this example most probably people who's hospital\nnumber contains 12 and who's first name is Jane.", 
            "title": "Patient.objects.search"
        }, 
        {
            "location": "/reference/subrecords/", 
            "text": "OPAL Subrecords\n\n\nOPAL Subrecords are models that relate to either Patients or Episodes, and inherit from\nbase classes \nopal.models.PatientSubrecord\n or \nopal.models.EpisodeSubrecord\n\n\nThey themselves inherit from the mixins \nopal.models.ToDictMixin\n, \nopal.models.UpdateFromDict\n\n\nProperties\n\n\nSubrecord._angular_service\n\n\nName of the Angular service you would like to use to customise the initialization of this\nsubrecord in the javascript layer.\n\n\n\nclass Demographics(PatientSubrecord):\n    _angular_service = 'Demographics'\n\n\n\n\nSubrecord._icon\n\n\nString that provides the name of the icon to use for forms, column headings etc.\n\n\nclass Demographics(PatientSubrecord):\n    _icon = 'fa fa-user'\n\n\n\nSubrecord._is_singleton\n\n\nBoolean that determines whether this subrecord is a singleton.\nThere may only be one of each singleton Subrecord, which is created whth the parent.\n\n\nclass Demographics(PatientSubrecord):\n    _is_singleton = True\n\n\n\nFor this case, when a \nPatient\n is created, an empty \nDemographics\n instance will\nautomatically be created.\n\n\nSubrecord._list_limit\n\n\nInteger to indicate the maximum number of entries to display in list view for this\nmodel. Useful for record types where many entries will accrue, or where display is\nparticularly verbose.\n\n\nclass BloodPressureReading(EpisodeSubrecord):\n    _list_limit = 3\n\n\n\nSubrecord._sort\n\n\nName of the field by which we want to sort these records when displaying.\n\n\nclass Antimicrobial(EpisodeSubrecord):\n    _sort = 'start_date'\n\n\n\nSubrecord._title\n\n\nString we would like to use for user-facing display of this record type.\n\n\nclass Antimicrobial(EpisodeSubrecord):\n    _title = 'Abx'\n\n\n\nSubrecord._clonable\n\n\nA Boolean that is True by default used by \nopal.views.EpisodeCopyToCategoryView\n\nto determine if instances of this record should be copied across.\n\n\nclass Antimicrobial(EpisodeSubrecord):\n    _clonable = 'False'\n\n\n\nSubrecord._exclude_from_extract\n\n\nBoolean to specify that this subrecord should be excluded from any standard data extract.\nThis implicitly defaults to False.\n\n\nclass Antimicrobial(EpisodeSubrecord):\n    _exclude_from_extract = 'Abx'\n\n\n\nSubrecord.pid_fields\n\n\nAn iterable of strings that correspond to fieldnames that contain Patient Identifiable Data (PID).\n\n\nThis is used when creating data extracts to exclude PID from e.g. CSV downloads.\n\n\nMethods\n\n\nSubrecord.get_display_template()\n\n\nClassmethod to locate the active display template for our record.\n\n\nReturns the name of the template or None.\n\n\nKeywords:\n\n\n\n\nepisode_type\n Optional episode type string to check for form customisations\n\n\npatient_list\n Optional patient list slug string to check for form customisations\n\n\n\n\nSubrecord.get_form_template()\n\n\nClassmethod to locate the active template for our record. Returns the name of a template or None.\n\n\nKeywords:\n\n\n\n\nepisode_type\n Optional episode type string to check for form customisations\n\n\npatient_list\n Optional patient list slug string to check for form customisations\n\n\n\n\nSubrecord.get_modal_template()\n\n\nClassmethod to locate the active template for our record. Returns the name of a template or None.\n\n\nKeywords:\n\n\n\n\nepisode_type\n Optional episode type string to check for modal customisations\n\n\npatient_list\n Optional patient list slug string to check for modal customisations\n\n\n\n\nSubrecord.get_modal_footer_template\n\n\nClassmethod to add a custom footer to a modal, used for example to denote if\nthe data from a model has been sourced from an external source\n\n\nSubrecord.bulk_update_from_dicts()\n\n\nA Classmethod to allow the creation of multiple objects.\n\n\nTakes in the parent model - an episode\nfor EpisodeSubrecords a patient for PatientSubrecords. Under the covers it iterates\nover all the subrecords, adds in the parent relationship and calls update_from_dict\n\n\nSubrecord Mixins\n\n\nTrackedModel\n\n\nA Tracked Model automatically has created, created_by, updated, updated_by and\nthese are only updated when used via the api\n\n\nExternallySourcedModel\n\n\nOften we want data to be sourced from external systems, this mixin adds in the\nfields external_system and external_identifier to allow us to track where\nthey come from and how they are referenced by that system.\n\n\nThese fields are then often used in forms to make the data read only", 
            "title": "Subrecords"
        }, 
        {
            "location": "/reference/subrecords/#opal-subrecords", 
            "text": "OPAL Subrecords are models that relate to either Patients or Episodes, and inherit from\nbase classes  opal.models.PatientSubrecord  or  opal.models.EpisodeSubrecord  They themselves inherit from the mixins  opal.models.ToDictMixin ,  opal.models.UpdateFromDict", 
            "title": "OPAL Subrecords"
        }, 
        {
            "location": "/reference/subrecords/#properties", 
            "text": "", 
            "title": "Properties"
        }, 
        {
            "location": "/reference/subrecords/#subrecord_angular_service", 
            "text": "Name of the Angular service you would like to use to customise the initialization of this\nsubrecord in the javascript layer.  \nclass Demographics(PatientSubrecord):\n    _angular_service = 'Demographics'", 
            "title": "Subrecord._angular_service"
        }, 
        {
            "location": "/reference/subrecords/#subrecord_icon", 
            "text": "String that provides the name of the icon to use for forms, column headings etc.  class Demographics(PatientSubrecord):\n    _icon = 'fa fa-user'", 
            "title": "Subrecord._icon"
        }, 
        {
            "location": "/reference/subrecords/#subrecord_is_singleton", 
            "text": "Boolean that determines whether this subrecord is a singleton.\nThere may only be one of each singleton Subrecord, which is created whth the parent.  class Demographics(PatientSubrecord):\n    _is_singleton = True  For this case, when a  Patient  is created, an empty  Demographics  instance will\nautomatically be created.", 
            "title": "Subrecord._is_singleton"
        }, 
        {
            "location": "/reference/subrecords/#subrecord_list_limit", 
            "text": "Integer to indicate the maximum number of entries to display in list view for this\nmodel. Useful for record types where many entries will accrue, or where display is\nparticularly verbose.  class BloodPressureReading(EpisodeSubrecord):\n    _list_limit = 3", 
            "title": "Subrecord._list_limit"
        }, 
        {
            "location": "/reference/subrecords/#subrecord_sort", 
            "text": "Name of the field by which we want to sort these records when displaying.  class Antimicrobial(EpisodeSubrecord):\n    _sort = 'start_date'", 
            "title": "Subrecord._sort"
        }, 
        {
            "location": "/reference/subrecords/#subrecord_title", 
            "text": "String we would like to use for user-facing display of this record type.  class Antimicrobial(EpisodeSubrecord):\n    _title = 'Abx'", 
            "title": "Subrecord._title"
        }, 
        {
            "location": "/reference/subrecords/#subrecord_clonable", 
            "text": "A Boolean that is True by default used by  opal.views.EpisodeCopyToCategoryView \nto determine if instances of this record should be copied across.  class Antimicrobial(EpisodeSubrecord):\n    _clonable = 'False'", 
            "title": "Subrecord._clonable"
        }, 
        {
            "location": "/reference/subrecords/#subrecord_exclude_from_extract", 
            "text": "Boolean to specify that this subrecord should be excluded from any standard data extract.\nThis implicitly defaults to False.  class Antimicrobial(EpisodeSubrecord):\n    _exclude_from_extract = 'Abx'", 
            "title": "Subrecord._exclude_from_extract"
        }, 
        {
            "location": "/reference/subrecords/#subrecordpid_fields", 
            "text": "An iterable of strings that correspond to fieldnames that contain Patient Identifiable Data (PID).  This is used when creating data extracts to exclude PID from e.g. CSV downloads.", 
            "title": "Subrecord.pid_fields"
        }, 
        {
            "location": "/reference/subrecords/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/reference/subrecords/#subrecordget_display_template", 
            "text": "Classmethod to locate the active display template for our record.  Returns the name of the template or None.  Keywords:   episode_type  Optional episode type string to check for form customisations  patient_list  Optional patient list slug string to check for form customisations", 
            "title": "Subrecord.get_display_template()"
        }, 
        {
            "location": "/reference/subrecords/#subrecordget_form_template", 
            "text": "Classmethod to locate the active template for our record. Returns the name of a template or None.  Keywords:   episode_type  Optional episode type string to check for form customisations  patient_list  Optional patient list slug string to check for form customisations", 
            "title": "Subrecord.get_form_template()"
        }, 
        {
            "location": "/reference/subrecords/#subrecordget_modal_template", 
            "text": "Classmethod to locate the active template for our record. Returns the name of a template or None.  Keywords:   episode_type  Optional episode type string to check for modal customisations  patient_list  Optional patient list slug string to check for modal customisations", 
            "title": "Subrecord.get_modal_template()"
        }, 
        {
            "location": "/reference/subrecords/#subrecordget_modal_footer_template", 
            "text": "Classmethod to add a custom footer to a modal, used for example to denote if\nthe data from a model has been sourced from an external source", 
            "title": "Subrecord.get_modal_footer_template"
        }, 
        {
            "location": "/reference/subrecords/#subrecordbulk_update_from_dicts", 
            "text": "A Classmethod to allow the creation of multiple objects.  Takes in the parent model - an episode\nfor EpisodeSubrecords a patient for PatientSubrecords. Under the covers it iterates\nover all the subrecords, adds in the parent relationship and calls update_from_dict", 
            "title": "Subrecord.bulk_update_from_dicts()"
        }, 
        {
            "location": "/reference/subrecords/#subrecord-mixins", 
            "text": "", 
            "title": "Subrecord Mixins"
        }, 
        {
            "location": "/reference/subrecords/#trackedmodel", 
            "text": "A Tracked Model automatically has created, created_by, updated, updated_by and\nthese are only updated when used via the api", 
            "title": "TrackedModel"
        }, 
        {
            "location": "/reference/subrecords/#externallysourcedmodel", 
            "text": "Often we want data to be sourced from external systems, this mixin adds in the\nfields external_system and external_identifier to allow us to track where\nthey come from and how they are referenced by that system.  These fields are then often used in forms to make the data read only", 
            "title": "ExternallySourcedModel"
        }, 
        {
            "location": "/reference/mixins/", 
            "text": "OPAL mixins\n\n\nSerialisableFields\n\n\nprovides the fields that are on the model for example\nif we have an allergy model with a field drug\nit might serialise like below\n\n\nAllergy._get_fieldnames_to_serialize() -\n [\"id\", \"drug\"]\n\n\n\nToDictMixin\n\n\nprovides a method that serialises a model\nto a dictionary for example\nif we have an allergy model with a field drug\nit might serialise like below\n\n\nallergy.to_dict() -\n {\"id\": 1, \"drug\": \"penicillin\"}\n\n\n\nUpdateFromDict\n\n\nprovides a method that updates a model\nbased on a dictionary of fields, for example\n\n\nFor example on a new allergy\n\n\nallergy.update_from_dict({\"drug\": \"penicillin\"})\n\n\n\nwill update the allergy to have the drug penicillin", 
            "title": "Mixins"
        }, 
        {
            "location": "/reference/mixins/#opal-mixins", 
            "text": "", 
            "title": "OPAL mixins"
        }, 
        {
            "location": "/reference/mixins/#serialisablefields", 
            "text": "provides the fields that are on the model for example\nif we have an allergy model with a field drug\nit might serialise like below  Allergy._get_fieldnames_to_serialize() -  [\"id\", \"drug\"]", 
            "title": "SerialisableFields"
        }, 
        {
            "location": "/reference/mixins/#todictmixin", 
            "text": "provides a method that serialises a model\nto a dictionary for example\nif we have an allergy model with a field drug\nit might serialise like below  allergy.to_dict() -  {\"id\": 1, \"drug\": \"penicillin\"}", 
            "title": "ToDictMixin"
        }, 
        {
            "location": "/reference/mixins/#updatefromdict", 
            "text": "provides a method that updates a model\nbased on a dictionary of fields, for example  For example on a new allergy  allergy.update_from_dict({\"drug\": \"penicillin\"})  will update the allergy to have the drug penicillin", 
            "title": "UpdateFromDict"
        }, 
        {
            "location": "/reference/opal_application/", 
            "text": "opal.core.application\n\n\nUtility functions\n\n\nget_app\n\n\nReturns the application class for the currently active application.\n\n\nget_all_components\n\n\nReturns an iterator of all the of the \nplugins\n and the current application\n\n\nOpalApplication\n\n\nThe base class for your main application entrypoints is opal.core.application.OpalApplication.\n\n\nYou must subclass this in order for OPAL to discover your application.\n\n\nIf you started your OPAL project via \n$ opal startproject yourproject\n then this will have been\ngenerated for you, and located in \nyourproject/yourproject/__init__.py\n\n\nProperties\n\n\nProperties available on an OpalApplication:\n\n\nOpalApplication.actions\n\n\nOpalApplication.default_episode_category\n\n\nThe default category is 'Inpatient', but can be overridden in the\n\nOpalApplication\n subclass for your implementation.\n\n\nOpalApplication.javascripts\n\n\nA list of javascripts that our application would like to include. These should be strings\nrepresenting paths ready for staticfiles. Defaults to \n[]\n.\n\n\nclass MyApplication(OpalApplication):\n    javascripts = ['js/one.js']\n\n\n\n\nOpalApplication.menuitems\n\n\nA list of items to add to the top level menu\n\n\nOpalApplication.styles\n\n\nA list of stylesheets that our application would like to include. These should be strings\nrepresenting paths ready for staticfiles. Defaults to \n[]\n. These styles are included after\nthe default OPAL styles.\n\n\nclass MyApplication(OpalApplication):\n    styles = ['css/app.css']\n\n\n\n\nClassmethods\n\n\nClassmethod API for OpalApplication instances:\n\n\nOpalApplication.get_core_javascripts(namespace)\n\n\nReturn a list of the core javascript files specified within a given namespace. These wil be\nrelative paths ready for staticfiles.\n\n\napplication.get_core_javascripts('opal.utils')\n# -\n ['js/opal/utils.js', ...]\n\n\n\n\nOpalApplication.get_javascripts()\n\n\nReturn a list of the application's javasctipts as paths to them ready for staticfiles.\nDefaults to returning the \nOpalApplication.javascripts\n property.\n\n\napplication.get_javascripts()\n# -\n ['js/one.js', 'js/two.js', ...]\n\n\n\n\nOpalApplication.directory\n\n\nReturns the file system location of the module.\n\n\nOpalApplication.get_menu_items()\n\n\nOpalApplication.get_styles()\n\n\nReturn a list of the application's stylesheets as paths to them ready for staticfiles.\nDefaults to returning the contents of \nOpalApplication.styles\n.\n\n\napplication.get_styles()\n# -\n ['css/app.css', ...]", 
            "title": "OpalApplication"
        }, 
        {
            "location": "/reference/opal_application/#opalcoreapplication", 
            "text": "", 
            "title": "opal.core.application"
        }, 
        {
            "location": "/reference/opal_application/#utility-functions", 
            "text": "", 
            "title": "Utility functions"
        }, 
        {
            "location": "/reference/opal_application/#get_app", 
            "text": "Returns the application class for the currently active application.", 
            "title": "get_app"
        }, 
        {
            "location": "/reference/opal_application/#get_all_components", 
            "text": "Returns an iterator of all the of the  plugins  and the current application", 
            "title": "get_all_components"
        }, 
        {
            "location": "/reference/opal_application/#opalapplication", 
            "text": "The base class for your main application entrypoints is opal.core.application.OpalApplication.  You must subclass this in order for OPAL to discover your application.  If you started your OPAL project via  $ opal startproject yourproject  then this will have been\ngenerated for you, and located in  yourproject/yourproject/__init__.py", 
            "title": "OpalApplication"
        }, 
        {
            "location": "/reference/opal_application/#properties", 
            "text": "Properties available on an OpalApplication:", 
            "title": "Properties"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationactions", 
            "text": "", 
            "title": "OpalApplication.actions"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationdefault_episode_category", 
            "text": "The default category is 'Inpatient', but can be overridden in the OpalApplication  subclass for your implementation.", 
            "title": "OpalApplication.default_episode_category"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationjavascripts", 
            "text": "A list of javascripts that our application would like to include. These should be strings\nrepresenting paths ready for staticfiles. Defaults to  [] .  class MyApplication(OpalApplication):\n    javascripts = ['js/one.js']", 
            "title": "OpalApplication.javascripts"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationmenuitems", 
            "text": "A list of items to add to the top level menu", 
            "title": "OpalApplication.menuitems"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationstyles", 
            "text": "A list of stylesheets that our application would like to include. These should be strings\nrepresenting paths ready for staticfiles. Defaults to  [] . These styles are included after\nthe default OPAL styles.  class MyApplication(OpalApplication):\n    styles = ['css/app.css']", 
            "title": "OpalApplication.styles"
        }, 
        {
            "location": "/reference/opal_application/#classmethods", 
            "text": "Classmethod API for OpalApplication instances:", 
            "title": "Classmethods"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationget_core_javascriptsnamespace", 
            "text": "Return a list of the core javascript files specified within a given namespace. These wil be\nrelative paths ready for staticfiles.  application.get_core_javascripts('opal.utils')\n# -  ['js/opal/utils.js', ...]", 
            "title": "OpalApplication.get_core_javascripts(namespace)"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationget_javascripts", 
            "text": "Return a list of the application's javasctipts as paths to them ready for staticfiles.\nDefaults to returning the  OpalApplication.javascripts  property.  application.get_javascripts()\n# -  ['js/one.js', 'js/two.js', ...]", 
            "title": "OpalApplication.get_javascripts()"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationdirectory", 
            "text": "Returns the file system location of the module.", 
            "title": "OpalApplication.directory"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationget_menu_items", 
            "text": "", 
            "title": "OpalApplication.get_menu_items()"
        }, 
        {
            "location": "/reference/opal_application/#opalapplicationget_styles", 
            "text": "Return a list of the application's stylesheets as paths to them ready for staticfiles.\nDefaults to returning the contents of  OpalApplication.styles .  application.get_styles()\n# -  ['css/app.css', ...]", 
            "title": "OpalApplication.get_styles()"
        }, 
        {
            "location": "/reference/episode_service/", 
            "text": "The Episode service\n\n\nThe \nEpisode\n service in \nopal.services\n provides us with core functionality related\nto interacting with episodes in the client.\n\n\nConstructor\n\n\nThe Episode service is instantiated with the Episode data that comes back from the\nEpisode JSON API.\n\n\nvar episode = new Episode(json_data);\n\n\n\nMethods\n\n\nEpisode.getTags\n\n\nReturn a list of the current tags this episode has as strings.\n\n\nepisode.getTags();\n// ['mine', 'infectioncontrol']\n\n\n\nEpisode.hasTag\n\n\nPredicate function that determines whether the episode is tagged with a given tag.\n\n\nArguments:\n\n\n\n\ntag\n: The tag you are interested in.\n\n\n\n\nEpisode.newItem\n\n\nInstantiate a new subrecord for this episode of a given type.\n\n\nArguments:\n\n\n\n\nrecordName\n: The name of the type of record you want to instantiate.\n\n\n\n\nExample usage:\n\n\nepisode.newItem('diagnosis');\n// item (an Item() instance.\n\n\n\nEpisode.recordEditor.newItem(name)\n\n\nTakes a string, opens a modal from which the user can create a new subrecord of type \nname\n.\n\n\nepiode.recordEditor.newItem('diagnosis'):\n// -\n Opens a modal with the diagnosis form and will create a new diagnosis on save\n\n\n\n\nEpisode.recordEditor.deleteItem(name, index)\n\n\nDelete the \nindex-th\n item of type \nname\n. Prompt the user to confirm this with a dialog.\n\n\nepisode.recordEditor.deleteItem('diagnosis', 0);\n// -\n Prompts the user to confirm the deletion of the first diagnosis\n\n\n\n\nEpisode.recordEditor.editItem(name, index)\n\n\nOpen a modal from which the user may edit the \nindex-th\n item of type \nname\n.\n\n\nepisode.recordEditor.editItem('diagnosis', 0);\n// -\n Opens a modal that allows the user to edit the first diagnosis", 
            "title": "Episode service"
        }, 
        {
            "location": "/reference/episode_service/#the-episode-service", 
            "text": "The  Episode  service in  opal.services  provides us with core functionality related\nto interacting with episodes in the client.", 
            "title": "The Episode service"
        }, 
        {
            "location": "/reference/episode_service/#constructor", 
            "text": "The Episode service is instantiated with the Episode data that comes back from the\nEpisode JSON API.  var episode = new Episode(json_data);", 
            "title": "Constructor"
        }, 
        {
            "location": "/reference/episode_service/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/reference/episode_service/#episodegettags", 
            "text": "Return a list of the current tags this episode has as strings.  episode.getTags();\n// ['mine', 'infectioncontrol']", 
            "title": "Episode.getTags"
        }, 
        {
            "location": "/reference/episode_service/#episodehastag", 
            "text": "Predicate function that determines whether the episode is tagged with a given tag.  Arguments:   tag : The tag you are interested in.", 
            "title": "Episode.hasTag"
        }, 
        {
            "location": "/reference/episode_service/#episodenewitem", 
            "text": "Instantiate a new subrecord for this episode of a given type.  Arguments:   recordName : The name of the type of record you want to instantiate.   Example usage:  episode.newItem('diagnosis');\n// item (an Item() instance.", 
            "title": "Episode.newItem"
        }, 
        {
            "location": "/reference/episode_service/#episoderecordeditornewitemname", 
            "text": "Takes a string, opens a modal from which the user can create a new subrecord of type  name .  epiode.recordEditor.newItem('diagnosis'):\n// -  Opens a modal with the diagnosis form and will create a new diagnosis on save", 
            "title": "Episode.recordEditor.newItem(name)"
        }, 
        {
            "location": "/reference/episode_service/#episoderecordeditordeleteitemname-index", 
            "text": "Delete the  index-th  item of type  name . Prompt the user to confirm this with a dialog.  episode.recordEditor.deleteItem('diagnosis', 0);\n// -  Prompts the user to confirm the deletion of the first diagnosis", 
            "title": "Episode.recordEditor.deleteItem(name, index)"
        }, 
        {
            "location": "/reference/episode_service/#episoderecordeditoredititemname-index", 
            "text": "Open a modal from which the user may edit the  index-th  item of type  name .  episode.recordEditor.editItem('diagnosis', 0);\n// -  Opens a modal that allows the user to edit the first diagnosis", 
            "title": "Episode.recordEditor.editItem(name, index)"
        }, 
        {
            "location": "/reference/item_service/", 
            "text": "The Item service\n\n\nThe \nItem\n service in \nopal.services\n provides us with core functionality related\nto interacting with subrecord in the client.\n\n\nMethods\n\n\nItem.makeCopy\n\n\nReturns a clone of the editable fields + consistency token so that\nwe can then update them in isolation elsewhere.\n\n\nItem.save\n\n\nSaves attributes to the server.\n\n\nitem.save(data_to_save);\n\n\n\nItem.formController\n\n\nThe Angular controller used by the modal that is opened when you edit this item to allow custom logic.\n\n\nDefaults to 'EditItemCtrl';", 
            "title": "Item service"
        }, 
        {
            "location": "/reference/item_service/#the-item-service", 
            "text": "The  Item  service in  opal.services  provides us with core functionality related\nto interacting with subrecord in the client.", 
            "title": "The Item service"
        }, 
        {
            "location": "/reference/item_service/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/reference/item_service/#itemmakecopy", 
            "text": "Returns a clone of the editable fields + consistency token so that\nwe can then update them in isolation elsewhere.", 
            "title": "Item.makeCopy"
        }, 
        {
            "location": "/reference/item_service/#itemsave", 
            "text": "Saves attributes to the server.  item.save(data_to_save);", 
            "title": "Item.save"
        }, 
        {
            "location": "/reference/item_service/#itemformcontroller", 
            "text": "The Angular controller used by the modal that is opened when you edit this item to allow custom logic.  Defaults to 'EditItemCtrl';", 
            "title": "Item.formController"
        }, 
        {
            "location": "/reference/patient_summary_service/", 
            "text": "The PatientSummary service\n\n\nThe \nPatientSummary\n service in \nopal.services\n provides us with core\nfunctionality related to interacting with patient search results in the client.\n\n\nConstructor\n\n\nThe PatientSummary service is instantiated with the Patient search result data\nthat comes back from the Patient search JSON API.\n\n\nvar patient_summary = new PatientSummary(json_data);", 
            "title": "Patient summary service"
        }, 
        {
            "location": "/reference/patient_summary_service/#the-patientsummary-service", 
            "text": "The  PatientSummary  service in  opal.services  provides us with core\nfunctionality related to interacting with patient search results in the client.", 
            "title": "The PatientSummary service"
        }, 
        {
            "location": "/reference/patient_summary_service/#constructor", 
            "text": "The PatientSummary service is instantiated with the Patient search result data\nthat comes back from the Patient search JSON API.  var patient_summary = new PatientSummary(json_data);", 
            "title": "Constructor"
        }, 
        {
            "location": "/reference/form_templatetags/", 
            "text": "Form Helpers\n\n\nOPAL comes with a selection of templatetags that can help you with the\nrepetitive task of generating Bootstrap and OPAL compatible markup for\nyour forms.\n\n\n{% checkbox ... %}\n\n\nGenerates a checkbox\n\n\nKeywords:\n\n\n\n\nfield\n a string of the models api name '.' field which infers attributes for the model, for more information see\n\nInference from subrecord fields\n\n\nlabel\n The Label with which to describe this field\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\ndisabled\n If this exists, we use this as the expression for the ng-disabled directive\n\n\n\n\n{% datepicker ... %}\n\n\nGenerates a datepicker\n\n\nKeywords:\n\n\n\n\nfield\n a string of the models api name '.' field which infers attributes for the model, for more information see\n\nInference from subrecord fields\n\n\nlabel\n The Label with which to describe this field\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nshow\n  A string that contains an Angular expression for the ng-show directive\n\n\nhide\n  A string that contains an Angular expression for the ng-hide directive\n\n\nrequired\n Label to show when we're required\n\n\nmindate\n Angular Javascript expression to return the minimum possible date\n\n\n\n\n{% datetimepicker ... %}\n\n\nGenerates a date time fields, a date field on one line and a time field on another\n\n\nKeywords:\n\n\n\n\nfield\n a string of the models api name '.' field which infers attributes for the model, for more information see\n\nInference from subrecord fields\n\n\ndate_label\n The Label with which to describe the date field (defaults to 'Date')\n\n\ntime_label\n The Label with which to describe the date field (defaults to 'Time')\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nchange\n  an angular directive that fires on change\n\n\n\n\n{% input ... %}\n\n\nThe input template tag generates you a form input that will play nicely with OPAL's styling.\n\n\nKeywords:\n\n\n\n\nfield\n a string of the models api name '.' field which infers attributes for the model, for more information see\n\nInference from subrecord fields\n\n\nlabel\n The Label with which to describe this field\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nshow\n  A string that contains an Angular expression for the ng-show directive\n\n\nhide\n  A string that contains an Angular expression for the ng-hide directive\n\n\nlookuplist\n an Angular expression that evaluates to an array containing the lookuplist values\n\n\nrequired\n Label to show when we're required\n\n\nenter\n expression to evaluate if the user presses return when in this input\n\n\nmaxlength\n maximum number of characters for this input. Will render the form invalid and display help text if exceeded.\n\n\n\n\nInputs with units\n\n\nWe also often want to display the unit of a particular field to help our users - consistent styling for this is\navailable by using the unit argument e.g.\n\n\n{% input label=\nWeight\n model=\nediting.weight\n unit=\nkg\n %}\n\n\n\n\n{% radio ... %}\n\n\nGenerates an inline radio input\n\n\nKeywords:\n\n\n\n\nfield\n a string of the models api name '.' field from this it calculates the label, model and will infer the lookuplist if required. For example {% radio field=\"DogOwner.dog\" %}\n\n\nlabel\n The Label with which to describe this input\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nshow\n  A string that contains an Angular expression for the ng-show directive\n\n\nhide\n  A string that contains an Angular expression for the ng-hide directive\n\n\nlookuplist\n an Angular expression that evaluates to an array containing the radio values\n\n\n\n\n{% select ... %}\n\n\nGenerates an inline select input\n\n\nKeywords:\n\n\n\n\nfield\n a string of the models api name '.' field from this it calculates the label, model and will infer the lookuplist if required. For example {% select field=\"DogOwner.dog\" %}\n\n\nlabel\n The Label with which to describe this input\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nshow\n  A string that contains an Angular expression for the ng-show directive\n\n\nhide\n  A string that contains an Angular expression for the ng-hide directive\n\n\nlookuplist\n an Angular expression that evaluates to an array containing the radio values\n\n\nother\n A boolean parameter that if true, provides a free text option when 'Other' is selected\n\n\nhelp\n a template to use as the contents of a help popover\n\n\nstatic\n an Angular expression that will swap the display to be a static input if it evaluates to \ntrue\n\n*\n\n\n\n\n{% textarea ... %}\n\n\nGenerates an inline textarea input\n\n\nKeywords:\n\n\n\n\nfield\n a string of the models api name '.' field from this it calculates the label, model and will infer the lookuplist if required. For example {% textarea field=\"DogOwner.dog\" %}\n\n\nlabel\n The Label with which to describe this input\n\n\nmodel\n The model which we are editing (This is a string that references an in-scope Angular variable)\n\n\nshow\n  A string that contains an Angular expression for the ng-show directive\n\n\nhide\n  A string that contains an Angular expression for the ng-hide directive\n\n\n\n\nInference from subrecord fields\n\n\nA very common pattern is to render form fields that relate to fields of \nSubrecords\n. Template tags will use this to infer useful information. The display name will be set to the verbose_name and the the ng-model will be inferred.\n\n\nIf its required, it will set as a required field. If its a CharField with a max length it will set a validation rule accordingly.\n\n\nIf the field is a free text or foreign key we will infer the lookup list.\n\n\nAlternatively if the field has choices attatched to it we will infer the choices into the field.\n\n\n{% input field=\nAllergies.drug\n %}\n\n\n\n\nNote unlike the traditional choices implementation only the last value of the choices is used and saved to the database\n\n\n  Colours = (\n    ('P', 'Purple'),\n    ('R', 'Red'),\n  )\n\n\n\n\nWhat is displayed to the user and saved to the database is 'Purple' or 'Red' respectively.\n\n\nAll inferences can be overridden by declarations in the template tag. For Example\n\n\n{% input field=\nAllergies.drug\n label=\nSomething else\n %}\n\n\n\n\nWill render the input with a different label.\n\n\n{% static ... %}\n\n\nGenerates a bootstrap Static div (for displaying data from fields as uneditable but formatted nicely with appropriate styles).\n\n\nTakes one positional argument, a string representing the subrecord field path.\n\n\n{% static \"Demographics.name\" %}\n\n!-- Renders as --\n\n\ndiv class=\"form-group\"\n\n  \nlabel class=\"control-label col-sm-3\"\n\n    Name\n  \n/label\n\n  \np class=\"form-control-static col-sm-8\"\n\n    [[ editing.demographics.name ]]\n  \n/p\n\n\n/div\n\n\n\n\n{% icon \"icon-name\" %}\n\n\nRenders a Bootstrap style Icon tag.\nIf the icon starts with \nfa\n or \nglyphicon\n then we will insert the preceding \nfa\n.\n\n\n{% icon \"fa-user-md\" %}\n\ni class=\"fa fa-user-md\"\n/i\n\n\n{% icon \"cusom-icon\"}\n\ni class=\"custom-icon\"\n/i", 
            "title": "Form helpers"
        }, 
        {
            "location": "/reference/form_templatetags/#form-helpers", 
            "text": "OPAL comes with a selection of templatetags that can help you with the\nrepetitive task of generating Bootstrap and OPAL compatible markup for\nyour forms.", 
            "title": "Form Helpers"
        }, 
        {
            "location": "/reference/form_templatetags/#checkbox", 
            "text": "Generates a checkbox  Keywords:   field  a string of the models api name '.' field which infers attributes for the model, for more information see Inference from subrecord fields  label  The Label with which to describe this field  model  The model which we are editing (This is a string that references an in-scope Angular variable)  disabled  If this exists, we use this as the expression for the ng-disabled directive", 
            "title": "{% checkbox ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#datepicker", 
            "text": "Generates a datepicker  Keywords:   field  a string of the models api name '.' field which infers attributes for the model, for more information see Inference from subrecord fields  label  The Label with which to describe this field  model  The model which we are editing (This is a string that references an in-scope Angular variable)  show   A string that contains an Angular expression for the ng-show directive  hide   A string that contains an Angular expression for the ng-hide directive  required  Label to show when we're required  mindate  Angular Javascript expression to return the minimum possible date", 
            "title": "{% datepicker ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#datetimepicker", 
            "text": "Generates a date time fields, a date field on one line and a time field on another  Keywords:   field  a string of the models api name '.' field which infers attributes for the model, for more information see Inference from subrecord fields  date_label  The Label with which to describe the date field (defaults to 'Date')  time_label  The Label with which to describe the date field (defaults to 'Time')  model  The model which we are editing (This is a string that references an in-scope Angular variable)  change   an angular directive that fires on change", 
            "title": "{% datetimepicker ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#input", 
            "text": "The input template tag generates you a form input that will play nicely with OPAL's styling.  Keywords:   field  a string of the models api name '.' field which infers attributes for the model, for more information see Inference from subrecord fields  label  The Label with which to describe this field  model  The model which we are editing (This is a string that references an in-scope Angular variable)  show   A string that contains an Angular expression for the ng-show directive  hide   A string that contains an Angular expression for the ng-hide directive  lookuplist  an Angular expression that evaluates to an array containing the lookuplist values  required  Label to show when we're required  enter  expression to evaluate if the user presses return when in this input  maxlength  maximum number of characters for this input. Will render the form invalid and display help text if exceeded.", 
            "title": "{% input ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#inputs-with-units", 
            "text": "We also often want to display the unit of a particular field to help our users - consistent styling for this is\navailable by using the unit argument e.g.  {% input label= Weight  model= editing.weight  unit= kg  %}", 
            "title": "Inputs with units"
        }, 
        {
            "location": "/reference/form_templatetags/#radio", 
            "text": "Generates an inline radio input  Keywords:   field  a string of the models api name '.' field from this it calculates the label, model and will infer the lookuplist if required. For example {% radio field=\"DogOwner.dog\" %}  label  The Label with which to describe this input  model  The model which we are editing (This is a string that references an in-scope Angular variable)  show   A string that contains an Angular expression for the ng-show directive  hide   A string that contains an Angular expression for the ng-hide directive  lookuplist  an Angular expression that evaluates to an array containing the radio values", 
            "title": "{% radio ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#select", 
            "text": "Generates an inline select input  Keywords:   field  a string of the models api name '.' field from this it calculates the label, model and will infer the lookuplist if required. For example {% select field=\"DogOwner.dog\" %}  label  The Label with which to describe this input  model  The model which we are editing (This is a string that references an in-scope Angular variable)  show   A string that contains an Angular expression for the ng-show directive  hide   A string that contains an Angular expression for the ng-hide directive  lookuplist  an Angular expression that evaluates to an array containing the radio values  other  A boolean parameter that if true, provides a free text option when 'Other' is selected  help  a template to use as the contents of a help popover  static  an Angular expression that will swap the display to be a static input if it evaluates to  true \n*", 
            "title": "{% select ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#textarea", 
            "text": "Generates an inline textarea input  Keywords:   field  a string of the models api name '.' field from this it calculates the label, model and will infer the lookuplist if required. For example {% textarea field=\"DogOwner.dog\" %}  label  The Label with which to describe this input  model  The model which we are editing (This is a string that references an in-scope Angular variable)  show   A string that contains an Angular expression for the ng-show directive  hide   A string that contains an Angular expression for the ng-hide directive", 
            "title": "{% textarea ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#inference-from-subrecord-fields", 
            "text": "A very common pattern is to render form fields that relate to fields of  Subrecords . Template tags will use this to infer useful information. The display name will be set to the verbose_name and the the ng-model will be inferred.  If its required, it will set as a required field. If its a CharField with a max length it will set a validation rule accordingly.  If the field is a free text or foreign key we will infer the lookup list.  Alternatively if the field has choices attatched to it we will infer the choices into the field.  {% input field= Allergies.drug  %}  Note unlike the traditional choices implementation only the last value of the choices is used and saved to the database    Colours = (\n    ('P', 'Purple'),\n    ('R', 'Red'),\n  )  What is displayed to the user and saved to the database is 'Purple' or 'Red' respectively.  All inferences can be overridden by declarations in the template tag. For Example  {% input field= Allergies.drug  label= Something else  %}  Will render the input with a different label.", 
            "title": "Inference from subrecord fields"
        }, 
        {
            "location": "/reference/form_templatetags/#static", 
            "text": "Generates a bootstrap Static div (for displaying data from fields as uneditable but formatted nicely with appropriate styles).  Takes one positional argument, a string representing the subrecord field path.  {% static \"Demographics.name\" %} !-- Renders as --  div class=\"form-group\" \n   label class=\"control-label col-sm-3\" \n    Name\n   /label \n   p class=\"form-control-static col-sm-8\" \n    [[ editing.demographics.name ]]\n   /p  /div", 
            "title": "{% static ... %}"
        }, 
        {
            "location": "/reference/form_templatetags/#icon-icon-name", 
            "text": "Renders a Bootstrap style Icon tag.\nIf the icon starts with  fa  or  glyphicon  then we will insert the preceding  fa .  {% icon \"fa-user-md\" %} i class=\"fa fa-user-md\" /i \n\n{% icon \"cusom-icon\"} i class=\"custom-icon\" /i", 
            "title": "{% icon \"icon-name\" %}"
        }, 
        {
            "location": "/reference/panels_templatetags/", 
            "text": "Panel helpers\n\n\nOPAL comes with a selection of templatetags for rendering OPAL panels\nfor a given subrecord. These panels also allow the user to\nsee instances of the model against the current value of \nepisode\n in\nAngular \n$scope\n. The user can also create new\ninstances of the given model, as well as editing any existing ones.\n\n\n{% record_panel ... %}\n\n\nRender a panel for a given record that will allow the user to view, create, update and delete instances.\n\n\nThe record panel template expects the relevant Angular \n$scope\n to have \nnewNamedItem(name, index)\n,\n\neditNamedItem(name, index)\n and \ndeleteItem(name, index)\n methods implemented. Default\nimplementations of these are available from the \nEpisodeDetailMixin\n.\n\n\n{% load panels %}\n{% record_panel Diagnosis %}\n\n\n\nKeywords:\n\n\n\n\nmodel\n: The model we want to render our panel for\n\n\ntitle\n: The display title for this panel\n\n\ndetail_template\n: The display template to use. Defaults to Subrecord.get_detail_template()\n\n\neditable\n: Whether this panel should allow editing. Defaults to True.\n\n\nangular_filter\n: An Angular expression that will be evaluated to decide whether to show each item\n\n\nnoentries\n: A string to render if there are no instances of \nmodel\n for the current episode\n\n\nonly_display_if_exists\n: Boolean defaulting to False. If true, the panel will simply not render if there are no instances of \nmodel\n\n\n\n\n{% record_timeline ... %}\n\n\nSimilar to \nrecord_panel\n, \nrecord_timeline\n renders a penel for a given record as a timeline - particularly\nuseful for subrecord types where the date is a key field.\n\n\n{% load panels %}\n{% record_panel Diagnosis 'when' %}\n\n\n\nArguments:\n\n\n\n\nmodel\n: The model we want to render our panel for\n\n\nwhenfield\n: String of the field that we're using to sort by.\n\n\n\n\n{% aligned_pair ... %}\n\n\nRender a key value pair in their own Bootstrap row using columns of width \nmd-4\n each.\nParticularly useful for occasions when we have multiple entries that need to be presented one after\nanother but the data is not naturally tabular.\n\n\n{% load panels %}\n{% aligned_pair model=\nepisode.start_date | shortDate\n label=\nStart Date\n %}\n{% aligned_pair model=\n22\n label=\nNext Data Point\n %}\n\n\n\n\nArguments:\n\n\n\n\nlabel\n: The left hand item, to be rendered bold.\n\n\nmodel\n: The right hand item, to be rendered as an angular expression", 
            "title": "Panel Template tags"
        }, 
        {
            "location": "/reference/panels_templatetags/#panel-helpers", 
            "text": "OPAL comes with a selection of templatetags for rendering OPAL panels\nfor a given subrecord. These panels also allow the user to\nsee instances of the model against the current value of  episode  in\nAngular  $scope . The user can also create new\ninstances of the given model, as well as editing any existing ones.", 
            "title": "Panel helpers"
        }, 
        {
            "location": "/reference/panels_templatetags/#record_panel", 
            "text": "Render a panel for a given record that will allow the user to view, create, update and delete instances.  The record panel template expects the relevant Angular  $scope  to have  newNamedItem(name, index) , editNamedItem(name, index)  and  deleteItem(name, index)  methods implemented. Default\nimplementations of these are available from the  EpisodeDetailMixin .  {% load panels %}\n{% record_panel Diagnosis %}  Keywords:   model : The model we want to render our panel for  title : The display title for this panel  detail_template : The display template to use. Defaults to Subrecord.get_detail_template()  editable : Whether this panel should allow editing. Defaults to True.  angular_filter : An Angular expression that will be evaluated to decide whether to show each item  noentries : A string to render if there are no instances of  model  for the current episode  only_display_if_exists : Boolean defaulting to False. If true, the panel will simply not render if there are no instances of  model", 
            "title": "{% record_panel ... %}"
        }, 
        {
            "location": "/reference/panels_templatetags/#record_timeline", 
            "text": "Similar to  record_panel ,  record_timeline  renders a penel for a given record as a timeline - particularly\nuseful for subrecord types where the date is a key field.  {% load panels %}\n{% record_panel Diagnosis 'when' %}  Arguments:   model : The model we want to render our panel for  whenfield : String of the field that we're using to sort by.", 
            "title": "{% record_timeline ... %}"
        }, 
        {
            "location": "/reference/panels_templatetags/#aligned_pair", 
            "text": "Render a key value pair in their own Bootstrap row using columns of width  md-4  each.\nParticularly useful for occasions when we have multiple entries that need to be presented one after\nanother but the data is not naturally tabular.  {% load panels %}\n{% aligned_pair model= episode.start_date | shortDate  label= Start Date  %}\n{% aligned_pair model= 22  label= Next Data Point  %}  Arguments:   label : The left hand item, to be rendered bold.  model : The right hand item, to be rendered as an angular expression", 
            "title": "{% aligned_pair ... %}"
        }, 
        {
            "location": "/reference/javascript_helpers/", 
            "text": "OPAL Javascript Helpers\n\n\n$rootScope methods\n\n\nOPAL provides some methods on the Angular $rootScope object.\n\n\nopen_modal\n\n\n$rootScope.open_modal(controller, template, {episode: episode})\n\n\n\nOpen an arbitrary controller in a modal, passing in the name of the controller,\nthe url for the template.\n\n\nYou may also pass through a dictionary of items to resolve.\n\n\nAngular Directives\n\n\nOPAL provides some built-in Angular directives for your project to use.\n\n\ndate-of-birth\n\n\nCreates an input field that assumes to base field is a moment and handles validation and parsing. It assumes no one is born in the future or is over 150 years old.\n\n\ntag-select\n\n\nCreates a multi select box where users can remove or add tags. Only tags set as \ndirect_add\n tags can be set here.\nThis property is set on individual \nPatientList\n subclasses, and passed to the front end with the \nMetadata\n service.\n\n\nWe set the Angular model to be a copy of an episode's tagging.\n\n\n$scope.editing.tagging = episode.tagging[0].makeCopy();\n\n\n\n\nWe can instantiate the tag-select widget in our markup as follows.\n\n\ndiv tag-select ng-model=\nediting.tagging\n metadata=\nmetadata\n class=\ncol-sm-8\n\n\n/div\n\n\n\n\n\nNote: this directive will load the \nMetadata\n service over HTTP if it has not been loaded already.\n\n\none-click-only\n\n\nA directive that if set with no arguments, or set to true, will only allow a button to be\nclicked on once and then it'll be disabled. Useful for example to make sure that multiple save requests aren't\naccidentally triggered.\n\n\ncheck-form\n\n\nSimilar to one click only but it takes the form in use as an argument\n\n\ne.g.\n\n\nbutton check-form=\nform\n ng-click=\nsendDataToTheServer\nclick me\n/button\n\n\n\n\n\nThis checks the form for valid on click.\n\n\nIf the form is then not valid. It will not call the second function, but mark the form as submitted and disable the button.\n\n\nIt will watch for the form to become valid and undisable the button when that happens.\n\n\nIf the form is valid, it will allow the ng-click function to be called.\n\n\nThis means that if you only want to show error messages after the user has clicked the save button you can do so with the\nform.$submitted variable.\n\n\nscroll-top\n\n\nAdds a click handler to the element that when click will animate the body of the element to scroll to the top\n\n\ngo-to-top\n\n\nSimilar to scroll-top, this moves the scroll bar to the top of the page but doesn't animate the transition.\n\n\ncopy to clipboard\n\n\ne.g.\n\n\nbutton clipboard data-clipboard-target=\"#content-to-copy\"\n\nCopy to Clipboard\n\n/button\n\n\n\n\nThis is a wrapper around clipboard.js, it lets the user copy text from an element that matches the selector you pass it. It will present a growl message saying that the text has been\ncopied.\n\n\nAngular Filters\n\n\nOPAL provides some built-in Angular filters for your project to use.\n\n\nshort-date\n\n\nDisplays a date as DD/MM if it's this year, else DD/MM/YYYY\n\n\nhhmm\n\n\nDisplays the hours \n minutes portion of a javascript Date object as HH:MM\n\n\nshort-date-time\n\n\nDisplays a date time, short date as above and time as in hhmm above\n\n\nmoment-date-filter\n\n\nAllows a us to use moment.js formatters in the template exactly like you would use moment.format\n\n\ntitle\n\n\nConverts a string to title case\n\n\nupper\n\n\nConverts a string to upper case\n\n\nplural\n\n\ntakes a word, a count, and an optional plural term.\n\n\nif count != 1 and there is a plural term it will return the plural term otherwise it will just suffix an 's'\n\n\nif count == 1 then it will return the word\n\n\nage\n\n\ncalculates a persons current age from their date of birth\n\n\nboxed\n\n\nDisplays Boolean fields as a checkbox (e.g. either [ ] or [X])\n\n\n[[ item.boolean_field | boxed]]\n\n\n\nAngular HTTP Interceptors\n\n\nopal uses opal.services.LogoutInterceptor to intercept all failed responses from the server. If they're a 401 or a 403 we redirect the user to the login page, otherwise it passes them through.", 
            "title": "Javascript helpers"
        }, 
        {
            "location": "/reference/javascript_helpers/#opal-javascript-helpers", 
            "text": "", 
            "title": "OPAL Javascript Helpers"
        }, 
        {
            "location": "/reference/javascript_helpers/#rootscope-methods", 
            "text": "OPAL provides some methods on the Angular $rootScope object.", 
            "title": "$rootScope methods"
        }, 
        {
            "location": "/reference/javascript_helpers/#open_modal", 
            "text": "$rootScope.open_modal(controller, template, {episode: episode})  Open an arbitrary controller in a modal, passing in the name of the controller,\nthe url for the template.  You may also pass through a dictionary of items to resolve.", 
            "title": "open_modal"
        }, 
        {
            "location": "/reference/javascript_helpers/#angular-directives", 
            "text": "OPAL provides some built-in Angular directives for your project to use.", 
            "title": "Angular Directives"
        }, 
        {
            "location": "/reference/javascript_helpers/#date-of-birth", 
            "text": "Creates an input field that assumes to base field is a moment and handles validation and parsing. It assumes no one is born in the future or is over 150 years old.", 
            "title": "date-of-birth"
        }, 
        {
            "location": "/reference/javascript_helpers/#tag-select", 
            "text": "Creates a multi select box where users can remove or add tags. Only tags set as  direct_add  tags can be set here.\nThis property is set on individual  PatientList  subclasses, and passed to the front end with the  Metadata  service.  We set the Angular model to be a copy of an episode's tagging.  $scope.editing.tagging = episode.tagging[0].makeCopy();  We can instantiate the tag-select widget in our markup as follows.  div tag-select ng-model= editing.tagging  metadata= metadata  class= col-sm-8  /div   Note: this directive will load the  Metadata  service over HTTP if it has not been loaded already.", 
            "title": "tag-select"
        }, 
        {
            "location": "/reference/javascript_helpers/#one-click-only", 
            "text": "A directive that if set with no arguments, or set to true, will only allow a button to be\nclicked on once and then it'll be disabled. Useful for example to make sure that multiple save requests aren't\naccidentally triggered.", 
            "title": "one-click-only"
        }, 
        {
            "location": "/reference/javascript_helpers/#check-form", 
            "text": "Similar to one click only but it takes the form in use as an argument  e.g.  button check-form= form  ng-click= sendDataToTheServer click me /button   This checks the form for valid on click.  If the form is then not valid. It will not call the second function, but mark the form as submitted and disable the button.  It will watch for the form to become valid and undisable the button when that happens.  If the form is valid, it will allow the ng-click function to be called.  This means that if you only want to show error messages after the user has clicked the save button you can do so with the\nform.$submitted variable.", 
            "title": "check-form"
        }, 
        {
            "location": "/reference/javascript_helpers/#scroll-top", 
            "text": "Adds a click handler to the element that when click will animate the body of the element to scroll to the top", 
            "title": "scroll-top"
        }, 
        {
            "location": "/reference/javascript_helpers/#go-to-top", 
            "text": "Similar to scroll-top, this moves the scroll bar to the top of the page but doesn't animate the transition.", 
            "title": "go-to-top"
        }, 
        {
            "location": "/reference/javascript_helpers/#copy-to-clipboard", 
            "text": "", 
            "title": "copy to clipboard"
        }, 
        {
            "location": "/reference/javascript_helpers/#eg", 
            "text": "button clipboard data-clipboard-target=\"#content-to-copy\" \nCopy to Clipboard /button   This is a wrapper around clipboard.js, it lets the user copy text from an element that matches the selector you pass it. It will present a growl message saying that the text has been\ncopied.", 
            "title": "e.g."
        }, 
        {
            "location": "/reference/javascript_helpers/#angular-filters", 
            "text": "OPAL provides some built-in Angular filters for your project to use.", 
            "title": "Angular Filters"
        }, 
        {
            "location": "/reference/javascript_helpers/#short-date", 
            "text": "Displays a date as DD/MM if it's this year, else DD/MM/YYYY", 
            "title": "short-date"
        }, 
        {
            "location": "/reference/javascript_helpers/#hhmm", 
            "text": "Displays the hours   minutes portion of a javascript Date object as HH:MM", 
            "title": "hhmm"
        }, 
        {
            "location": "/reference/javascript_helpers/#short-date-time", 
            "text": "Displays a date time, short date as above and time as in hhmm above", 
            "title": "short-date-time"
        }, 
        {
            "location": "/reference/javascript_helpers/#moment-date-filter", 
            "text": "Allows a us to use moment.js formatters in the template exactly like you would use moment.format", 
            "title": "moment-date-filter"
        }, 
        {
            "location": "/reference/javascript_helpers/#title", 
            "text": "Converts a string to title case", 
            "title": "title"
        }, 
        {
            "location": "/reference/javascript_helpers/#upper", 
            "text": "Converts a string to upper case", 
            "title": "upper"
        }, 
        {
            "location": "/reference/javascript_helpers/#plural", 
            "text": "takes a word, a count, and an optional plural term.  if count != 1 and there is a plural term it will return the plural term otherwise it will just suffix an 's'  if count == 1 then it will return the word", 
            "title": "plural"
        }, 
        {
            "location": "/reference/javascript_helpers/#age", 
            "text": "calculates a persons current age from their date of birth", 
            "title": "age"
        }, 
        {
            "location": "/reference/javascript_helpers/#boxed", 
            "text": "Displays Boolean fields as a checkbox (e.g. either [ ] or [X])  [[ item.boolean_field | boxed]]", 
            "title": "boxed"
        }, 
        {
            "location": "/reference/javascript_helpers/#angular-http-interceptors", 
            "text": "opal uses opal.services.LogoutInterceptor to intercept all failed responses from the server. If they're a 401 or a 403 we redirect the user to the login page, otherwise it passes them through.", 
            "title": "Angular HTTP Interceptors"
        }, 
        {
            "location": "/reference/javascript_dependencies/", 
            "text": "OPAL Javscript Dependencies\n\n\nOPAL makes use of a number of upstream dependencies which are available for\ndevleopers to use in building applications.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nModernizr\n\n\nOpal has a custom modernizr build that detects touch events\n\n\n\n\n\n\nJquery\n\n\n1.11.3\n\n\n\n\n\n\nAngular\n\n\n1.5.8\n\n\n\n\n\n\nAngular-ui-select\n\n\n0.19.4\n\n\n\n\n\n\nUnderscore.js\n\n\n1.8.3\n\n\n\n\n\n\nD3\n\n\n3.5.6\n\n\n\n\n\n\nC3\n\n\n0.4.10", 
            "title": "Javascript dependencies"
        }, 
        {
            "location": "/reference/javascript_dependencies/#opal-javscript-dependencies", 
            "text": "OPAL makes use of a number of upstream dependencies which are available for\ndevleopers to use in building applications.           Modernizr  Opal has a custom modernizr build that detects touch events    Jquery  1.11.3    Angular  1.5.8    Angular-ui-select  0.19.4    Underscore.js  1.8.3    D3  3.5.6    C3  0.4.10", 
            "title": "OPAL Javscript Dependencies"
        }, 
        {
            "location": "/reference/schemas/", 
            "text": "OPAL Schemas\n\n\nOpal Schemas allow dynamic representation of columns within a table\n\n\nget_all_list_schema_classes\n\n\nreturns a dictionary to a list of classes of all the plugins\n(the classes are the columns inc column headers)", 
            "title": "Schemas"
        }, 
        {
            "location": "/reference/schemas/#opal-schemas", 
            "text": "Opal Schemas allow dynamic representation of columns within a table", 
            "title": "OPAL Schemas"
        }, 
        {
            "location": "/reference/schemas/#get_all_list_schema_classes", 
            "text": "returns a dictionary to a list of classes of all the plugins\n(the classes are the columns inc column headers)", 
            "title": "get_all_list_schema_classes"
        }, 
        {
            "location": "/reference/search_queries/", 
            "text": "opal.core.search.queries\n\n\nThis module provides our base classes for query backends as well as helper functions.\n\n\nepisodes_for_user\n\n\nGiven an iterable of EPISODES and a USER, return a filtered list of episodes that this user has\nthe permissions to know about.\n\n\nfiltered_episodes = episodes_for_user(episodes, user)", 
            "title": "Search Queries"
        }, 
        {
            "location": "/reference/search_queries/#opalcoresearchqueries", 
            "text": "This module provides our base classes for query backends as well as helper functions.", 
            "title": "opal.core.search.queries"
        }, 
        {
            "location": "/reference/search_queries/#episodes_for_user", 
            "text": "Given an iterable of EPISODES and a USER, return a filtered list of episodes that this user has\nthe permissions to know about.  filtered_episodes = episodes_for_user(episodes, user)", 
            "title": "episodes_for_user"
        }, 
        {
            "location": "/reference/detail_views/", 
            "text": "opal.core.PatientDetailView\n\n\nPatientDetailViews allow us to define a custom view over either one or many episodes,\navailable from the main \nPatient Detail\n view.\n\n\nPatientDetailView inherits from the \ndiscoverable\n features\n\nDiscoverableFeature\n, \nSortableFeature\n, \nRestrictableFeature\n.\n\n\nFields\n\n\nPatientDetailView.name\n\n\nThe machine readable name for this view. Should be lower case, and have no spaces.\n\n\nPatientDetailView.title\n\n\nThe display name for this view. This is what will display in links to it.\n\n\nPatientDetailView.template\n\n\nThe template we should use to render the view when it's active.\n\n\nPatientDetailView.order\n\n\nAn integer controlling the order of PatientDetailViews in the episode switcher menu on\nthe Patient Detail screen is determined by this property. Lower numbers mean higher up.\n\n\nClassmethods\n\n\nPatientDetailView.visible_to\n\n\nOverriding this method will restrict who the view is available to. For instance, we\nwould implement a superuser only view:\n\n\n@classmethod\ndef to_user(klass, user):\n   return user.is_superuser", 
            "title": "Detail Views"
        }, 
        {
            "location": "/reference/detail_views/#opalcorepatientdetailview", 
            "text": "PatientDetailViews allow us to define a custom view over either one or many episodes,\navailable from the main  Patient Detail  view.  PatientDetailView inherits from the  discoverable  features DiscoverableFeature ,  SortableFeature ,  RestrictableFeature .", 
            "title": "opal.core.PatientDetailView"
        }, 
        {
            "location": "/reference/detail_views/#fields", 
            "text": "", 
            "title": "Fields"
        }, 
        {
            "location": "/reference/detail_views/#patientdetailviewname", 
            "text": "The machine readable name for this view. Should be lower case, and have no spaces.", 
            "title": "PatientDetailView.name"
        }, 
        {
            "location": "/reference/detail_views/#patientdetailviewtitle", 
            "text": "The display name for this view. This is what will display in links to it.", 
            "title": "PatientDetailView.title"
        }, 
        {
            "location": "/reference/detail_views/#patientdetailviewtemplate", 
            "text": "The template we should use to render the view when it's active.", 
            "title": "PatientDetailView.template"
        }, 
        {
            "location": "/reference/detail_views/#patientdetailvieworder", 
            "text": "An integer controlling the order of PatientDetailViews in the episode switcher menu on\nthe Patient Detail screen is determined by this property. Lower numbers mean higher up.", 
            "title": "PatientDetailView.order"
        }, 
        {
            "location": "/reference/detail_views/#classmethods", 
            "text": "", 
            "title": "Classmethods"
        }, 
        {
            "location": "/reference/detail_views/#patientdetailviewvisible_to", 
            "text": "Overriding this method will restrict who the view is available to. For instance, we\nwould implement a superuser only view:  @classmethod\ndef to_user(klass, user):\n   return user.is_superuser", 
            "title": "PatientDetailView.visible_to"
        }, 
        {
            "location": "/reference/patient_list/", 
            "text": "opal.core.patient_lists\n\n\nThe \npatient_lists\n module defines a number of classes for working with lists of patients.\n\n\nPatientList\n\n\n...\n\n\nProperties\n\n\nPatientList.display_name\n\n\nHow we want to refer to this list on screen to users.\n\n\nTaggedPatientList\n\n\nTagged Patient Lists inherit from Patient Lists - as such they have all of the same methods and properties\nof Patient Lists.\n\n\nProperties\n\n\nTaggedPatientList.tag\n\n\nThe main, or parent tag for this list. Should be lowercase, with no numbers or dashes. Underscores are OK.\n\n\nTaggedPatientList.subtag\n\n\nThe child tag for this list. Should be lowercase, with no numbers or dashes. Underscores are OK.", 
            "title": "Patient Lists"
        }, 
        {
            "location": "/reference/patient_list/#opalcorepatient_lists", 
            "text": "The  patient_lists  module defines a number of classes for working with lists of patients.", 
            "title": "opal.core.patient_lists"
        }, 
        {
            "location": "/reference/patient_list/#patientlist", 
            "text": "...", 
            "title": "PatientList"
        }, 
        {
            "location": "/reference/patient_list/#properties", 
            "text": "", 
            "title": "Properties"
        }, 
        {
            "location": "/reference/patient_list/#patientlistdisplay_name", 
            "text": "How we want to refer to this list on screen to users.", 
            "title": "PatientList.display_name"
        }, 
        {
            "location": "/reference/patient_list/#taggedpatientlist", 
            "text": "Tagged Patient Lists inherit from Patient Lists - as such they have all of the same methods and properties\nof Patient Lists.", 
            "title": "TaggedPatientList"
        }, 
        {
            "location": "/reference/patient_list/#properties_1", 
            "text": "", 
            "title": "Properties"
        }, 
        {
            "location": "/reference/patient_list/#taggedpatientlisttag", 
            "text": "The main, or parent tag for this list. Should be lowercase, with no numbers or dashes. Underscores are OK.", 
            "title": "TaggedPatientList.tag"
        }, 
        {
            "location": "/reference/patient_list/#taggedpatientlistsubtag", 
            "text": "The child tag for this list. Should be lowercase, with no numbers or dashes. Underscores are OK.", 
            "title": "TaggedPatientList.subtag"
        }, 
        {
            "location": "/reference/search_js_services/", 
            "text": "OPAL Core Search Javascript Services\n\n\nFilter\n\n\nThe Angular Service for saved filters. Maps to the model \nopal.models.Filter\n.\n\n\nsave(attrs)\n\n\nSave this filter with the attributes passed in. If there is no ID, this is taken to be a create.\n\n\ndestroy()\n\n\nDestroy this filter.\n\n\nfiltersLoader\n\n\nLoader service that will resolve with instantiated \nFilter\n objects for each of the current\nuser's filters.\n\n\nFilterResource\n\n\nAngular $resource for Filter objects.", 
            "title": "Search JS Services"
        }, 
        {
            "location": "/reference/search_js_services/#opal-core-search-javascript-services", 
            "text": "", 
            "title": "OPAL Core Search Javascript Services"
        }, 
        {
            "location": "/reference/search_js_services/#filter", 
            "text": "The Angular Service for saved filters. Maps to the model  opal.models.Filter .", 
            "title": "Filter"
        }, 
        {
            "location": "/reference/search_js_services/#saveattrs", 
            "text": "Save this filter with the attributes passed in. If there is no ID, this is taken to be a create.", 
            "title": "save(attrs)"
        }, 
        {
            "location": "/reference/search_js_services/#destroy", 
            "text": "Destroy this filter.", 
            "title": "destroy()"
        }, 
        {
            "location": "/reference/search_js_services/#filtersloader", 
            "text": "Loader service that will resolve with instantiated  Filter  objects for each of the current\nuser's filters.", 
            "title": "filtersLoader"
        }, 
        {
            "location": "/reference/search_js_services/#filterresource", 
            "text": "Angular $resource for Filter objects.", 
            "title": "FilterResource"
        }, 
        {
            "location": "/reference/changelog/", 
            "text": "0.8.0 (Major Release)\n\n\nAngular UI Libraries\n\n\n0.8.0 consolidates Angular UI libraries bundled with OPAL. We have removed Angular Strap, and\nswitched all components using it to their Angular UI Bootstrap equivalents.\n\n\nThis is a breaking change.\n\n\nApplications taking advantage of the \nForms\n templatetag library should require no updates, but will see\nsome minor differences in visual style of widgets.\n\n\nDetailed upgrade guides for the components affected (Typeahead, Popover,\nTooltip, Datepicker, Timepicker) are available in the upgrade reference documentation.\n\n\nChoices in form templatetags\n\n\nTemplate tags that use the 'field' attribute to point to a subrecord field will now infer a lookup list from the Choices of the field if it exists.\n\n\nNote unlike the traditional choices implementation only the last value of the choices is used and saved to the database\n\n\n  Colours = (\n    ('P', 'Purple'),\n    ('R', 'Red'),\n  )\n\n\n\n\nWhat is displayed to the user and saved to the database is 'Purple' or 'Red' respectively.\n\n\nPython 3\n\n\nOpal 0.8.0 is the first version of Opal to support Python 3. This has meant changing the default\nordering of \nPatientList\n instances to 0 rather than None.\n\n\nMoving forwards we expect all new code in Opal to be compatible with both Python 2.7 and 3.5.\n\n\nThis introduces an explicit Opal dependency on the Six module for maintaining codebases that span\nPython 2.x and 3.x.\n\n\nTemplate re-naming\n\n\nModal_base has now been moved into a folder called base_templates. Its also now got a form_modal_base and a two_column_form_modal_base. The latter two templates add validation around saving.\n\n\nThe standard edit item models and others now inherit from the form_modal_base.\n\n\nMisc changes\n\n\nRemoves \nOptions\n both from the JSON API, and the Angular service.\nRemoves legacy APIs \n/api/v0.1/episode/admit\n and \n/api/v0.1/episode/refer\n.\n\n\nRemoves the models \nGP\n, \nCommunityNurse\n and \nLocatedModel\n.\n\n\nThe opal.core.api.EpisodeViewSet.create now expects tagging to be an object rather than a list, similar to how it details with demographics and location.\n\n\nAll apis should be permissioned with Django REST framework permission classes. The default implementation uses opal.core.api.LoginRequiredViewset, a standard drf\nviewset that requires the user to be logged in.\n\n\nWe now require the user to be logged in for any\nuse of the search functionality.\n\n\nThe API will no longer serialise the _ft or _fk_id fields of FreeTextOrForeignKey fields - these\nare internal implementation details of the server that are not useful on the client side.\n\n\nAdds a custom interceptor that logs the user out if the we receive a 403 or 401 from the server\n\n\nRemoves \nopal.models.Tagging.import_from_reversion\n. This one-off classmethod on tagging\nwas introduced to aid with the upgrade from Opal 4.x to 5.0 and has no further utility.\n\n\nAdds a Unique Together constraint for (Tagging.user, Tagging.episode, Tagging.value)\n\n\nRemoves the \nstatic\n argument from the forms \ninput\n tag. Developers should move to the \nstatic\n tag.\n\n\nLook up lists now load in from individual apps. The look for a file at {{ app }}/data/lookuplists.json\n\n\nAdds the checkForm directive\n\n\ne.g.\n\n\nbutton check-form=\nform\n ng-click=\nsendDataToTheServer\nclick me\n/button\n\n\n\n\n\nThis adds default form submission behaviour to the a button. It will check if the form is valid, and if its not it will mark the button as disabled until it becomes valid.\n\n\nIt will also set the form as submitted.\n\n\nWe also now show the required error if the form has been submitted or if the field is dirty, so that the user doesn't get an ugly \"fill this field in now\" message when\nopening the modal/pathway but will get the error after they click submit.\n\n\nWe remove the _modal option to set on subrecords. This is because we now use large modals across the board.\n\n\nThe default admin url is now \n/admin/\n - rather than \n/admin/?\n this results in more readable\nadmin urls and is closer to what most applications do with the Django admin.\n\n\nUpdates to the Dependency Graph\n\n\nUpgrades angular to v1.5.8 (from 1.3.11) you can see their change log \nhere\n\n\nUpdates angular-cookies and angular-mocks to v1.5.8 (both from 1.3.11)\n\n\nUpdates angular-ui-select to 0.19.4 from 0.13.2\n\n\n0.7.2 (Minor Release)\n\n\nFixes a bug with the copy to category API not setting category name.\n\n\nRemoves the hangover use of options in the list of teams per episode in the patient list\n\n\n0.7.1 (Minor Release)\n\n\nCompletes the refactor of front end data, no longer using the \n/api/v0.1/options/\n API internally.\nThis is slated for removal in 0.8.0.\n\n\nUpdates DRF APIs - we now expect either Token or DjangoSession auth.\n\n\nFixes several small bugs with scaffolded applications -  the setting of \nSTATIC_ROOT\n and\n\nSECRET_KEY\n, generating forms for NullBooleanFields, requirements.txt.\n\n\nAdds an \naligned_pair\n templatetag to the \npanels\n library.\n\n\nUpdates the label for \nDemographics.birth_place\n to indicate that this should be a country.\n\n\nAdds the \nclipboard\n directive to give the user one click copy to clipboard.\n\n\nAdds a \ntag-select\n directive that renders a widget for editing the tags for an episode.\n\n\nAdds metadata to the scope for patient detail views\n\n\nUpdates to the Dependency Graph\n\n\n\n\nDjango Axes 1.4.0 -\n 1.7.0\n\n\n\n\n0.7.0 (Major Release)\n\n\nEpisode Categories\n\n\nRefactors EpisodeCategory to be a discoverable feature.\n\n\nRenames \nEpisode.category\n -\n \nEpisode.category_name\n.\n\n\nEpisode JSON API\n\n\nThe Restful Episode JSON API previously available at \n/episode/:pk/\n is now moved into\n\n/api/v0.1/episode/:pk/\n for consistency with the rest of our JSON APIs.\nThe OPAL Angular layer has been updated to reflect this, and\nshould handle the transition seamlessly, but code calling the API directly should update\nto reflect the new URL.\n\n\nDefaults for records on the client side\n\n\nEstablishes a new way to define defaults for records initialized in Javascript without\nrequiring that we hard-code API names to defaults in a global namespace.\n\n\nUpdate to Javascript Signatures\n\n\nFlow.enter()\n and \nFlow.exit()\n now no longer take \noptions\n positional arguments - instead\nthe controllers they initialize have \nMetadata\n and \nReferencedata\n as optional resolves\narguments.\n\n\nAddEpisodeCtrl now no longer requires options as a resolves() option, but requires Referencedata\ninstead.\n\n\nMaxLength for form helpers\n\n\nThe \ninput\n form helper will now infer the max length of char fields from the max length of the\ndatabase field, and render relevant Angular directives.\n\n\nEpisodeDetail removed\n\n\nThe \nEpisodeDetailCtrl\n and \nEpisodeDetailMixin\n controller and service have been removed - these\nwere not used anywhere other than in the Wardround plugin, and redundant after enhancements to\nPatient Detail and Custom DetailViews in 0.6.\n\n\nAdditional utilities\n\n\nAdds a datetimepicker templatetag that will render widgets for a Datetime field including time.\n\n\nAdds a \ndate_of_birth_field\n templatetag that renders a date of birth field complete with inteligent\nvalidation. (Note this change also includes removing the old _partial/ template)\n\n\nUpdates dependency graph:\n\n\n\n\nDjango -\n 1.8.13\n\n\n\n\n0.6.0 (Major Release)\n\n\nDetail views\n\n\nMoves from episode oriented detail to patient oriented detail.\n(All episodes plus x-episode views are available from a patient detail screen)\n\n\nTagging\n\n\nAs a performance optimisation for the frequent access of historic tags, untagging\nan episode simply renders the tag inactive rather than deleting it and relying on\nDjango-Reversion for access to historical data.\n\n\nDate Formatting\n\n\nWe now expect 'd/m/y' date formatting by default.\n\n\nPatient lists\n\n\nLists are now declarative, and separate from teams. They are implemented as\nsubclasses of opal.core.patient_lists.PatientList.\n\n\nForms vs. Modals\n\n\nIntroduces a distinction between a form and a modal.\nBy default, we now use forms for subrecords, only overriding the modal if there\nis something we want to do differently specifically in the modal.\n\n\nCommand line tools\n\n\nAdds $opal checkout for switching between applications or application versions.\n\n\nModels ContextProcessor\n\n\nThe 'opal.context_processors.models' Context Processor will allow you to access your\nsubrecords from templates without having to explicitly load them in a view. In turn,\nthis allows patterns like:\n\n\n{% include models.Demographics.get_detail_template %}\n\n\n\nUpgrade instructions:\n\n\nFull upgrade instructions to work through any backwards incompatible changes are\nprovided in the OPAL docs.\n\n\n0.5.5 (Minor Release)\n\n\nChanges the way old tags are handled.\n\n\nTags are no longer deleted episodes, rather they're marked as archived.\n\n\n0.5.4 (Minor Release)\n\n\n\n\nInclude local storage\n\n\n\n\n0.5.3 (Minor Release)\n\n\n\n\nSpeed up loading of the lookup lists\n\n\nFix pagination issues in search\n\n\nSpeed up loading of many to many fields\n\n\nIncrease test coverage\n\n\nAdd some extra help fields to {% forms %} helpers\n\n\nFixes bug with $rootScope.open_modal() where keystrokes were being intercepted\n\n\n\n\n0.5.2 (Minor Release)\n\n\nSpeed improvements on page load\nallow us to only show record panels if a record of that type exists\ndisable modal buttons while saving\n\n\n0.5.1 (Minor Release)\n\n\nMinor bug fixes\n\n\n0.5 (Major release)\n\n\nSearch\n\n\nComplete re-design of Search interface to provide a single search box on every page and pagination for resulta.\nPuts in place a pluggable interface that could be swapped out for e.g. ElasticSearch.\nNew Service for PatientSummary()\n\n\nAnalytics\n\n\nMoves Analytics integration into OPAL core with the ability to blacklist pages that should never be reported\n\n\nList view\n\n\nRemoved old spreadsheet-style cell based navigation and moved to row-wise nav with clearer highlighting of the active row.\nUpdated scrolling and loading behaviour to snap to viewport and not display the page build.\n\n\nSubrecord metadata\n\n\nAdded four new utility fields to Patient and Episode subrecords:\n\n\ncreated_by, updated_by, created, updated\n\n\nSelect2 and list fields\n\n\nAdded support for select2 as an input widget and Subrecord fields that can be lists of things.\n\n\nAlso\n\n\nNumerous small bugfixes.\nRefactoring of the models package into a models module.\nUpdated Underscore.js -\n 1.8.3\nUpdated Angular.js -\n 1.3.11\n\n\n0.4.3 (Minor release)\n\n\nRefactors opal.models to be a models.py file rather than a package.\nAdds several improvements to forms helpers -\n Help argument, other argument to select.\n\n\nUpdates dependency graph:\n\n\n\n\nAngular-strap -\n 2.3.1\n\n\n\n\n0.4.2 (Minor release)\n\n\nUpgrades dependency graph:\n\n\n\n\nDjango -\n 1.8.3\n\n\nDjango-reversion -\n 1.8.7\n\n\njQuery -\n 1.11.3\n\n\nD3 -\n 3.5.6\n\n\nC4 -\n 0.4.10\n\n\n\n\nSouth has been removed, now using django migrations\n\n\n0.4.1 (Bugfix release)\n\n\nFixes some search results appearing duplicated.\n\n\n0.4 (Major release)\n\n\nNew Design\n\n\nCompletely re-designed UI following extensive user research and multiple iterations.\n\n\nManagementcommands and scaffolding\n\n\nFeatures the opal command line tool for common administrative tasks\nhttp://opal.openhealthcare.org.uk/docs/guides/command_line_tool/\n\n\n Form helpers templatetag library\n\n\nNew template library for consistent form controls in line with our new interface guidelines\nhttp://opal.openhealthcare.org.uk/docs/reference/form_templatetags/\n\n\nAPI Documentation\n\n\nOPAL JSON APIs are now fully self-documenting for all updated instances\nhttp://opal.openhealthcare.org.uk/docs/guides/json_api/\n\n\n0.3 (Major release)\n\n\nBugfixes, significant flexibility in template customisability.\n\n\nMinor UI updates.\n\n\n0.2.2 (Bugfix release)\n\n\nNumerous small bugfixes.\n\n\nAdds the concept of undischarging patients.\n\n\n0.2.1\n\n\nNumerous small bugfixes.\n\n\n0.2.0\n\n\nSearch overhaul - introduces advanced searches.\n\n\n0.1.1\n\n\nInitial public release", 
            "title": "Changelog"
        }, 
        {
            "location": "/reference/changelog/#080-major-release", 
            "text": "", 
            "title": "0.8.0 (Major Release)"
        }, 
        {
            "location": "/reference/changelog/#angular-ui-libraries", 
            "text": "0.8.0 consolidates Angular UI libraries bundled with OPAL. We have removed Angular Strap, and\nswitched all components using it to their Angular UI Bootstrap equivalents.  This is a breaking change.  Applications taking advantage of the  Forms  templatetag library should require no updates, but will see\nsome minor differences in visual style of widgets.  Detailed upgrade guides for the components affected (Typeahead, Popover,\nTooltip, Datepicker, Timepicker) are available in the upgrade reference documentation.", 
            "title": "Angular UI Libraries"
        }, 
        {
            "location": "/reference/changelog/#choices-in-form-templatetags", 
            "text": "Template tags that use the 'field' attribute to point to a subrecord field will now infer a lookup list from the Choices of the field if it exists.  Note unlike the traditional choices implementation only the last value of the choices is used and saved to the database    Colours = (\n    ('P', 'Purple'),\n    ('R', 'Red'),\n  )  What is displayed to the user and saved to the database is 'Purple' or 'Red' respectively.", 
            "title": "Choices in form templatetags"
        }, 
        {
            "location": "/reference/changelog/#python-3", 
            "text": "Opal 0.8.0 is the first version of Opal to support Python 3. This has meant changing the default\nordering of  PatientList  instances to 0 rather than None.  Moving forwards we expect all new code in Opal to be compatible with both Python 2.7 and 3.5.  This introduces an explicit Opal dependency on the Six module for maintaining codebases that span\nPython 2.x and 3.x.", 
            "title": "Python 3"
        }, 
        {
            "location": "/reference/changelog/#template-re-naming", 
            "text": "Modal_base has now been moved into a folder called base_templates. Its also now got a form_modal_base and a two_column_form_modal_base. The latter two templates add validation around saving.  The standard edit item models and others now inherit from the form_modal_base.", 
            "title": "Template re-naming"
        }, 
        {
            "location": "/reference/changelog/#misc-changes", 
            "text": "Removes  Options  both from the JSON API, and the Angular service.\nRemoves legacy APIs  /api/v0.1/episode/admit  and  /api/v0.1/episode/refer .  Removes the models  GP ,  CommunityNurse  and  LocatedModel .  The opal.core.api.EpisodeViewSet.create now expects tagging to be an object rather than a list, similar to how it details with demographics and location.  All apis should be permissioned with Django REST framework permission classes. The default implementation uses opal.core.api.LoginRequiredViewset, a standard drf\nviewset that requires the user to be logged in.  We now require the user to be logged in for any\nuse of the search functionality.  The API will no longer serialise the _ft or _fk_id fields of FreeTextOrForeignKey fields - these\nare internal implementation details of the server that are not useful on the client side.  Adds a custom interceptor that logs the user out if the we receive a 403 or 401 from the server  Removes  opal.models.Tagging.import_from_reversion . This one-off classmethod on tagging\nwas introduced to aid with the upgrade from Opal 4.x to 5.0 and has no further utility.  Adds a Unique Together constraint for (Tagging.user, Tagging.episode, Tagging.value)  Removes the  static  argument from the forms  input  tag. Developers should move to the  static  tag.  Look up lists now load in from individual apps. The look for a file at {{ app }}/data/lookuplists.json  Adds the checkForm directive  e.g.  button check-form= form  ng-click= sendDataToTheServer click me /button   This adds default form submission behaviour to the a button. It will check if the form is valid, and if its not it will mark the button as disabled until it becomes valid.  It will also set the form as submitted.  We also now show the required error if the form has been submitted or if the field is dirty, so that the user doesn't get an ugly \"fill this field in now\" message when\nopening the modal/pathway but will get the error after they click submit.  We remove the _modal option to set on subrecords. This is because we now use large modals across the board.  The default admin url is now  /admin/  - rather than  /admin/?  this results in more readable\nadmin urls and is closer to what most applications do with the Django admin.", 
            "title": "Misc changes"
        }, 
        {
            "location": "/reference/changelog/#updates-to-the-dependency-graph", 
            "text": "Upgrades angular to v1.5.8 (from 1.3.11) you can see their change log  here  Updates angular-cookies and angular-mocks to v1.5.8 (both from 1.3.11)  Updates angular-ui-select to 0.19.4 from 0.13.2", 
            "title": "Updates to the Dependency Graph"
        }, 
        {
            "location": "/reference/changelog/#072-minor-release", 
            "text": "Fixes a bug with the copy to category API not setting category name.  Removes the hangover use of options in the list of teams per episode in the patient list", 
            "title": "0.7.2 (Minor Release)"
        }, 
        {
            "location": "/reference/changelog/#071-minor-release", 
            "text": "Completes the refactor of front end data, no longer using the  /api/v0.1/options/  API internally.\nThis is slated for removal in 0.8.0.  Updates DRF APIs - we now expect either Token or DjangoSession auth.  Fixes several small bugs with scaffolded applications -  the setting of  STATIC_ROOT  and SECRET_KEY , generating forms for NullBooleanFields, requirements.txt.  Adds an  aligned_pair  templatetag to the  panels  library.  Updates the label for  Demographics.birth_place  to indicate that this should be a country.  Adds the  clipboard  directive to give the user one click copy to clipboard.  Adds a  tag-select  directive that renders a widget for editing the tags for an episode.  Adds metadata to the scope for patient detail views", 
            "title": "0.7.1 (Minor Release)"
        }, 
        {
            "location": "/reference/changelog/#updates-to-the-dependency-graph_1", 
            "text": "Django Axes 1.4.0 -  1.7.0", 
            "title": "Updates to the Dependency Graph"
        }, 
        {
            "location": "/reference/changelog/#070-major-release", 
            "text": "", 
            "title": "0.7.0 (Major Release)"
        }, 
        {
            "location": "/reference/changelog/#episode-categories", 
            "text": "Refactors EpisodeCategory to be a discoverable feature.  Renames  Episode.category  -   Episode.category_name .", 
            "title": "Episode Categories"
        }, 
        {
            "location": "/reference/changelog/#episode-json-api", 
            "text": "The Restful Episode JSON API previously available at  /episode/:pk/  is now moved into /api/v0.1/episode/:pk/  for consistency with the rest of our JSON APIs.\nThe OPAL Angular layer has been updated to reflect this, and\nshould handle the transition seamlessly, but code calling the API directly should update\nto reflect the new URL.", 
            "title": "Episode JSON API"
        }, 
        {
            "location": "/reference/changelog/#defaults-for-records-on-the-client-side", 
            "text": "Establishes a new way to define defaults for records initialized in Javascript without\nrequiring that we hard-code API names to defaults in a global namespace.", 
            "title": "Defaults for records on the client side"
        }, 
        {
            "location": "/reference/changelog/#update-to-javascript-signatures", 
            "text": "Flow.enter()  and  Flow.exit()  now no longer take  options  positional arguments - instead\nthe controllers they initialize have  Metadata  and  Referencedata  as optional resolves\narguments.  AddEpisodeCtrl now no longer requires options as a resolves() option, but requires Referencedata\ninstead.", 
            "title": "Update to Javascript Signatures"
        }, 
        {
            "location": "/reference/changelog/#maxlength-for-form-helpers", 
            "text": "The  input  form helper will now infer the max length of char fields from the max length of the\ndatabase field, and render relevant Angular directives.", 
            "title": "MaxLength for form helpers"
        }, 
        {
            "location": "/reference/changelog/#episodedetail-removed", 
            "text": "The  EpisodeDetailCtrl  and  EpisodeDetailMixin  controller and service have been removed - these\nwere not used anywhere other than in the Wardround plugin, and redundant after enhancements to\nPatient Detail and Custom DetailViews in 0.6.", 
            "title": "EpisodeDetail removed"
        }, 
        {
            "location": "/reference/changelog/#additional-utilities", 
            "text": "Adds a datetimepicker templatetag that will render widgets for a Datetime field including time.  Adds a  date_of_birth_field  templatetag that renders a date of birth field complete with inteligent\nvalidation. (Note this change also includes removing the old _partial/ template)  Updates dependency graph:   Django -  1.8.13", 
            "title": "Additional utilities"
        }, 
        {
            "location": "/reference/changelog/#060-major-release", 
            "text": "Detail views  Moves from episode oriented detail to patient oriented detail.\n(All episodes plus x-episode views are available from a patient detail screen)  Tagging  As a performance optimisation for the frequent access of historic tags, untagging\nan episode simply renders the tag inactive rather than deleting it and relying on\nDjango-Reversion for access to historical data.  Date Formatting  We now expect 'd/m/y' date formatting by default.  Patient lists  Lists are now declarative, and separate from teams. They are implemented as\nsubclasses of opal.core.patient_lists.PatientList.  Forms vs. Modals  Introduces a distinction between a form and a modal.\nBy default, we now use forms for subrecords, only overriding the modal if there\nis something we want to do differently specifically in the modal.  Command line tools  Adds $opal checkout for switching between applications or application versions.", 
            "title": "0.6.0 (Major Release)"
        }, 
        {
            "location": "/reference/changelog/#models-contextprocessor", 
            "text": "The 'opal.context_processors.models' Context Processor will allow you to access your\nsubrecords from templates without having to explicitly load them in a view. In turn,\nthis allows patterns like:  {% include models.Demographics.get_detail_template %}", 
            "title": "Models ContextProcessor"
        }, 
        {
            "location": "/reference/changelog/#upgrade-instructions", 
            "text": "Full upgrade instructions to work through any backwards incompatible changes are\nprovided in the OPAL docs.", 
            "title": "Upgrade instructions:"
        }, 
        {
            "location": "/reference/changelog/#055-minor-release", 
            "text": "Changes the way old tags are handled.  Tags are no longer deleted episodes, rather they're marked as archived.", 
            "title": "0.5.5 (Minor Release)"
        }, 
        {
            "location": "/reference/changelog/#054-minor-release", 
            "text": "Include local storage", 
            "title": "0.5.4 (Minor Release)"
        }, 
        {
            "location": "/reference/changelog/#053-minor-release", 
            "text": "Speed up loading of the lookup lists  Fix pagination issues in search  Speed up loading of many to many fields  Increase test coverage  Add some extra help fields to {% forms %} helpers  Fixes bug with $rootScope.open_modal() where keystrokes were being intercepted", 
            "title": "0.5.3 (Minor Release)"
        }, 
        {
            "location": "/reference/changelog/#052-minor-release", 
            "text": "Speed improvements on page load\nallow us to only show record panels if a record of that type exists\ndisable modal buttons while saving", 
            "title": "0.5.2 (Minor Release)"
        }, 
        {
            "location": "/reference/changelog/#051-minor-release", 
            "text": "Minor bug fixes", 
            "title": "0.5.1 (Minor Release)"
        }, 
        {
            "location": "/reference/changelog/#05-major-release", 
            "text": "Search  Complete re-design of Search interface to provide a single search box on every page and pagination for resulta.\nPuts in place a pluggable interface that could be swapped out for e.g. ElasticSearch.\nNew Service for PatientSummary()  Analytics  Moves Analytics integration into OPAL core with the ability to blacklist pages that should never be reported  List view  Removed old spreadsheet-style cell based navigation and moved to row-wise nav with clearer highlighting of the active row.\nUpdated scrolling and loading behaviour to snap to viewport and not display the page build.  Subrecord metadata  Added four new utility fields to Patient and Episode subrecords:  created_by, updated_by, created, updated  Select2 and list fields  Added support for select2 as an input widget and Subrecord fields that can be lists of things.  Also  Numerous small bugfixes.\nRefactoring of the models package into a models module.\nUpdated Underscore.js -  1.8.3\nUpdated Angular.js -  1.3.11", 
            "title": "0.5 (Major release)"
        }, 
        {
            "location": "/reference/changelog/#043-minor-release", 
            "text": "Refactors opal.models to be a models.py file rather than a package.\nAdds several improvements to forms helpers -  Help argument, other argument to select.  Updates dependency graph:   Angular-strap -  2.3.1", 
            "title": "0.4.3 (Minor release)"
        }, 
        {
            "location": "/reference/changelog/#042-minor-release", 
            "text": "Upgrades dependency graph:   Django -  1.8.3  Django-reversion -  1.8.7  jQuery -  1.11.3  D3 -  3.5.6  C4 -  0.4.10   South has been removed, now using django migrations", 
            "title": "0.4.2 (Minor release)"
        }, 
        {
            "location": "/reference/changelog/#041-bugfix-release", 
            "text": "Fixes some search results appearing duplicated.", 
            "title": "0.4.1 (Bugfix release)"
        }, 
        {
            "location": "/reference/changelog/#04-major-release", 
            "text": "New Design  Completely re-designed UI following extensive user research and multiple iterations.  Managementcommands and scaffolding  Features the opal command line tool for common administrative tasks\nhttp://opal.openhealthcare.org.uk/docs/guides/command_line_tool/   Form helpers templatetag library  New template library for consistent form controls in line with our new interface guidelines\nhttp://opal.openhealthcare.org.uk/docs/reference/form_templatetags/  API Documentation  OPAL JSON APIs are now fully self-documenting for all updated instances\nhttp://opal.openhealthcare.org.uk/docs/guides/json_api/", 
            "title": "0.4 (Major release)"
        }, 
        {
            "location": "/reference/changelog/#03-major-release", 
            "text": "Bugfixes, significant flexibility in template customisability.  Minor UI updates.", 
            "title": "0.3 (Major release)"
        }, 
        {
            "location": "/reference/changelog/#022-bugfix-release", 
            "text": "Numerous small bugfixes.  Adds the concept of undischarging patients.", 
            "title": "0.2.2 (Bugfix release)"
        }, 
        {
            "location": "/reference/changelog/#021", 
            "text": "Numerous small bugfixes.", 
            "title": "0.2.1"
        }, 
        {
            "location": "/reference/changelog/#020", 
            "text": "Search overhaul - introduces advanced searches.", 
            "title": "0.2.0"
        }, 
        {
            "location": "/reference/changelog/#011", 
            "text": "Initial public release", 
            "title": "0.1.1"
        }, 
        {
            "location": "/reference/upgrading/", 
            "text": "Upgrading Your OPAL Application\n\n\nThis document provides instructions for specific steps required to upgrading your OPAL\napplication to a later version where there are extra steps required.\n\n\n0.7.1 -\n 0.8.0\n\n\nOptions\n\n\nOptions are now an ex-API. Applications should convert to use either Referencedata (canonical terms for common data), or\nMetadata (App specific data you wish to pass into the front end).\n\n\nUI Components\n\n\nThose applications relying on Angular strap ui components (Typeahead, Popover,\nTooltip, Datepicker, Timepicker) should convert their templates to use the Angular UI Boostrap equivalents, or the\nOPAL templatetags. \n\n\nIf you are simply using Opal templatetags from \nforms\n and not overriding these templates, then the transition should be seamless. Otherwise, searching your codebase for html files containing \nbs-\n and looking for angular strap components is a good start.\n\n\nApplications or plugins with javascript tests may need to update their includes to remove references to old library files.\n\n\nFull documentation of the markup and options for these components is found \nhere\n\n\nextending modal_base.html\n\n\nWe now have different base templates for modals, forms and two column modal forms (essentially a form with a side bar).\n\n\nThe form templates add validation checks around the saving to catch any validation errors a form might through. They assume the existence of a form called 'form'.\n\n\nAs part of this modal_base has been moved into a folder in templates called base_templates\n\n\nRename any templates extending \nmodal_base.html\n to extend the correct template in \nbase_templates/\n - \nmodal_base.html\n or \nmodal_form_base.html\n.\n\n\n0.7.0 -\n 0.7.1\n\n\nDownstream dependencies\n\n\nOPAL 0.7.1 updates the expected version of Django Axes to 1.7.0 - you will wish to update\nthis in your requirements.txt or similar accordingly.\n\n\nDRF Authentication\n\n\nWe highly recommend that applications explicitly set Django Rest Framework authentication\nclasses in their \nsettings.py\n.\n\n\nBy default OPAL now uses session and token auth, which will require a migration to install\nthe DRF Token authentication app.\n\n\nINSTALLED_APPS = (\n    # ....\n    'rest_framework',\n    'rest_framework.authtoken',\n    # ...\n)\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    )\n}\n\n\n\n\n6.x -\n 7.x\n\n\nUpgrading OPAL\n\n\nHow you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work.\n\n\n# requirements.txt\nopal==0.7.0\n\n\n\nAfter re-installing (via for instance \npip install -r requirements.txt\n) you will need to\nrun the migrations for OPAL 0.6.x\n\n\n$ python manage.py migrate opal\n\n\n\nIf you are inheriting from the abstract models in OPAL e.g. \nDemographics\n then you should\nrun a makemigrations command to update to the 0.7.x data model.\n\n\npython manage.py makemigrations yourapp\npython manage.py migrate yourapp\n\n\n\nBreaking changes\n\n\nOPAL 0.7 contains a number of breaking changes.\n\n\nName changes\n\n\nopal.models.Episode.category\n has been re-named \ncategory_name\n. If your application\ndirectly sets category, you will be required to update all instances where this happens.\n\n\nThe \n/episode/:pk/\n API has moved to \n/api/v0.1/episode/:pk/\n so any code (typically\njavascript) code that directly saves to this API endpoint rather than using the OPAL JS\n\nEpisode\n services should work immediately when re-pointed at the new URL.\n\n\nMoving from options to referencedata and metadata\n\n\nThe signature of the EditItemCtrl has been updated - this modal controller no longer\ntakes an \noptions\n argument, rather it uses the new 0.7.x \nreferencedata\n and \nmetadata\n\nservices. Applications that call EditItemCtrl directly should look to update the \nresolves\n\noption they were passing to \n$modal.open\n. (Alternatively, developers should consider\nrefactoring to use the new \nrecordEditor\n API.)\n\n\nThe signatures of Flow \nenter\n and \nexit\n methods has changed to no longer accept\noptions as a positional argument, and enter/exit controllers will no longer be initialized\nwith access to options as a resovled provider. They will have access to either/both of\n\nreferencedata\n and \nmetadata\n so if your application includes custom flow controllers that\nuse \noptions\n you will need to refactor these to use the new x-data arguments instead.\n\n\nreferencedata\n and \nmetadata\n between them have all data previously in options, so the refactor\nhere should be relatively painless.\n\n\nDate of birth fields in forms\n\n\nThe partial \npartials/_date_of_birth_field.html\n has been removed and replaced with the\n\n{% date_of_birth_field %}\n templatetag in the forms library. You should update any forms\nto use this new tag.\n\n\n5.x -\n 6.x\n\n\nUpgrading OPAL\n\n\nHow you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work.\n\n\n# requirements.txt\nopal==0.6.0\n\n\n\nAfter re-installing (via for instance \npip install -r requirements.txt\n) you will need to\nrun the migrations for OPAL 0.6.x\n\n\n$ python manage.py migrate opal\n\n\n\nChanges to abstract models\n\n\nIf you are inheriting from the abstract models in OPAL e.g. \nDemographics\n then you should\nrun a makemigrations command to update to the 0.6.x data model.\n\n\npython manage.py makemigrations yourapp\npython manage.py migrate yourapp\n\n\n\nYou should note that as of OPAL 0.6.x \nDemographics\n now splits names into first, surname,\nmiddle name and title. The previous \nname\n field will be converted to be \nfirst_name\n.\n\n\nStrategies for updating your data to use the appropriate fields will vary from application\nto application, but one good such strategy is to use a data migration \nsuch as the one done\nhere\n.\n\n\nUpdate settings\n\n\nMany of the default OPAL templates now assume that the \n'opal.context_processors.models'\n\nContext Processor is available - you should add that to the \nTEMPLATE_CONTEXT_PROCESSORS\n\nsetting in your application's \nsettings.py\n\n\nThe default date formats in OPAL have changed - and so you should update your \nDATE_X\n\nsettings to match:\n\n\nDATE_FORMAT = 'd/m/Y'\nDATE_INPUT_FORMATS = ['%d/%m/%Y']\nDATETIME_FORMAT = 'd/m/Y H:i:s'\nDATETIME_INPUT_FORMATS = ['%d/%m/%Y %H:%M:%S']\n\n\n\n\nUpgrade plugins\n\n\nA number of OPAL plugins have new releases to work with the changes in OPAL 0.6.x\n\n\n\n\nopal-referral - Upgrade to 0.1.4\n\n\nopal-wardround - Upgrade to 0.6.0\n\n\nopal-observations - Upgrade to 0.1.2\n\n\nopal-dischargesummary - Upgrade to 0.2.0\n\n\nopal-dashboard - Upgrade to 0.1.3\n\n\n\n\nMeanwhile the \nopal-taskrunner\n plugin has now been deprecated, this functionality now\nliving natively within OPAL core.\n\n\nUpdate your Teams to be PatientLists\n\n\nPatient Lists are now driven by subclasses of \nopal.core.PatientList\n, so we will need\nto convert your Teams to be PatientLists. You may want to re-enable the Team admin while\nyou do so - this is simple, by updating your application's \nadmin.py\n:\n\n\n# yourapp/admin.py\n...\nfrom opal.admin import TeamAdmin\nfrom opal.models import Team\nadmin.site.register(Team, TeamAdmin)\n\n\n\nPatient lists are now declarative. For instance, to replicate the following team:\n\n\n\n\nWe would convert that to:\n\n\n# yourapp/patient*lists.py\nfrom opal.core import patient_lists\n\nclass RespiratoryList(patient_lists.TaggedPatientList):\n    display_name = 'Respiratory'\n    tag          = 'respiratory'\n    order        = 4\n    schema       = [models.Demographics, models.Treatment]\n\n\n\n\nThe schema property will likely be available to you in your application's \nschema.py\n\nfile - which is now obsolete.\n\n\nSee the \nfull patient list documentation\n for further details\nof the options available for Patient Lists.\n\n\nForm and Display templates.\n\n\nWe may now be missing some form or display templates, as your application may be\nrelying on templates previously in OPAL. To discover which these are, run\n\n\n$ opal scaffold --dry-run\n\n\n\nYou may either create templates by hand, or have OPAL generate boilerplate templates for you\nby running \n$ opal scaffold\n.\n\n\nModal templates already in your application will likely be referencing invalid paths\nto their Angular variables. You should update these to include the record name - for example:\n\n\n!-- Was --\n\n{% input  label=\nDrug\n model=\nediting.drug\n lookuplist=\nantimicrobial_list\n %}\n\n!-- Becomes --\n\n{% input  label=\nDrug\n model=\nediting.treatment.drug\n lookuplist=\nantimicrobial_list\n %}\n\n\n\n\nThe Inpatient episode category\n\n\nThe default Episode Category - Inpatient episodes has updated it's database identifier\nfrom \ninpatient\n to \nInpatient\n. To update your episodes run :\n\n\n from opal.models import Episode\n\n for e in Episode.objects.filter(category='inpatient'):\n...   e.category='Inpatient'\n...   e.save()\n...\n\n\n\n\nAny references to episode category in templates (for e.g. ng-hide) or controllers for logic\nwill also require updates.\n\n\nFlow is now defined in JS\n\n\nFlow is no longer defined on the server side in python, but rather is a javascript service.\nSee the documentation for information about setting up custom flows. At a minimum applications\nthat use custom flows will have to implement their own flow service and reference it in their\nsettings.\n\n\n4.X -\n 5.x\n\n\nMigrations\n\n\nBefore upgrading from 4.x to 5.x you should ensure that you have upgraded from South\nto Djangomigrations.\n\n\n$ rm yourapp/migrations/*\n$ python manage.py makemigrations yourapp\n$ python manage.py migrate yourapp --fake-initial\n\n\n\nOPAL\n\n\nNext you will need to upgrade the OPAL version itself.\n\n\nHow you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work. This will also update FFS and Django\nAxes as well as adding Python Dateutil.\n\n\n-e git://github.com/openhealthcare/opal.git@v0.5.6#egg=opal\n\n\n\nMigrations.\n\n\nOPAL has fresh migrations in 0.5.x, which we should run. There are also changes to the\nbase abstract model classes (to add created/updated timestamps) so you'll need to create\nfresh migrations for your own application.\n\n\n$ python manage.py migrate\n$ python manage.py makemigrations yourapp\n$ python manage.py migrate yourapp\n\n\n\nAt this stage you'll want to commit your new migrations, as well as any changes to your\napplication's requirements file.\n\n\nTags\n\n\nAs of 0.5.5, old tags in OPAL are stored directly on the Tagging model rather than via\nDjano Reversion. We can import those old tags by doing the following.\n\n\n$ python manage.py shell\n\n\n from opal.models import Tagging\n\n Tagging.import_from_reversion()\n\n\n\nDeployment\n\n\nThe first time you deploy your upgraded application you'll need to run the following\ncommands to upgrade your database:\n\n\n$ python manage.py migrate --fake-initial\n\n\n\nYou'll also have to repeat the Tagging step once for each deployment.", 
            "title": "Upgrading"
        }, 
        {
            "location": "/reference/upgrading/#upgrading-your-opal-application", 
            "text": "This document provides instructions for specific steps required to upgrading your OPAL\napplication to a later version where there are extra steps required.", 
            "title": "Upgrading Your OPAL Application"
        }, 
        {
            "location": "/reference/upgrading/#071-080", 
            "text": "", 
            "title": "0.7.1 -&gt; 0.8.0"
        }, 
        {
            "location": "/reference/upgrading/#options", 
            "text": "Options are now an ex-API. Applications should convert to use either Referencedata (canonical terms for common data), or\nMetadata (App specific data you wish to pass into the front end).", 
            "title": "Options"
        }, 
        {
            "location": "/reference/upgrading/#ui-components", 
            "text": "Those applications relying on Angular strap ui components (Typeahead, Popover,\nTooltip, Datepicker, Timepicker) should convert their templates to use the Angular UI Boostrap equivalents, or the\nOPAL templatetags.   If you are simply using Opal templatetags from  forms  and not overriding these templates, then the transition should be seamless. Otherwise, searching your codebase for html files containing  bs-  and looking for angular strap components is a good start.  Applications or plugins with javascript tests may need to update their includes to remove references to old library files.  Full documentation of the markup and options for these components is found  here", 
            "title": "UI Components"
        }, 
        {
            "location": "/reference/upgrading/#extending-modal_basehtml", 
            "text": "We now have different base templates for modals, forms and two column modal forms (essentially a form with a side bar).  The form templates add validation checks around the saving to catch any validation errors a form might through. They assume the existence of a form called 'form'.  As part of this modal_base has been moved into a folder in templates called base_templates  Rename any templates extending  modal_base.html  to extend the correct template in  base_templates/  -  modal_base.html  or  modal_form_base.html .", 
            "title": "extending modal_base.html"
        }, 
        {
            "location": "/reference/upgrading/#070-071", 
            "text": "", 
            "title": "0.7.0 -&gt; 0.7.1"
        }, 
        {
            "location": "/reference/upgrading/#downstream-dependencies", 
            "text": "OPAL 0.7.1 updates the expected version of Django Axes to 1.7.0 - you will wish to update\nthis in your requirements.txt or similar accordingly.", 
            "title": "Downstream dependencies"
        }, 
        {
            "location": "/reference/upgrading/#drf-authentication", 
            "text": "We highly recommend that applications explicitly set Django Rest Framework authentication\nclasses in their  settings.py .  By default OPAL now uses session and token auth, which will require a migration to install\nthe DRF Token authentication app.  INSTALLED_APPS = (\n    # ....\n    'rest_framework',\n    'rest_framework.authtoken',\n    # ...\n)\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    )\n}", 
            "title": "DRF Authentication"
        }, 
        {
            "location": "/reference/upgrading/#6x-7x", 
            "text": "", 
            "title": "6.x -&gt; 7.x"
        }, 
        {
            "location": "/reference/upgrading/#upgrading-opal", 
            "text": "How you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work.  # requirements.txt\nopal==0.7.0  After re-installing (via for instance  pip install -r requirements.txt ) you will need to\nrun the migrations for OPAL 0.6.x  $ python manage.py migrate opal  If you are inheriting from the abstract models in OPAL e.g.  Demographics  then you should\nrun a makemigrations command to update to the 0.7.x data model.  python manage.py makemigrations yourapp\npython manage.py migrate yourapp", 
            "title": "Upgrading OPAL"
        }, 
        {
            "location": "/reference/upgrading/#breaking-changes", 
            "text": "OPAL 0.7 contains a number of breaking changes.", 
            "title": "Breaking changes"
        }, 
        {
            "location": "/reference/upgrading/#name-changes", 
            "text": "opal.models.Episode.category  has been re-named  category_name . If your application\ndirectly sets category, you will be required to update all instances where this happens.  The  /episode/:pk/  API has moved to  /api/v0.1/episode/:pk/  so any code (typically\njavascript) code that directly saves to this API endpoint rather than using the OPAL JS Episode  services should work immediately when re-pointed at the new URL.", 
            "title": "Name changes"
        }, 
        {
            "location": "/reference/upgrading/#moving-from-options-to-referencedata-and-metadata", 
            "text": "The signature of the EditItemCtrl has been updated - this modal controller no longer\ntakes an  options  argument, rather it uses the new 0.7.x  referencedata  and  metadata \nservices. Applications that call EditItemCtrl directly should look to update the  resolves \noption they were passing to  $modal.open . (Alternatively, developers should consider\nrefactoring to use the new  recordEditor  API.)  The signatures of Flow  enter  and  exit  methods has changed to no longer accept\noptions as a positional argument, and enter/exit controllers will no longer be initialized\nwith access to options as a resovled provider. They will have access to either/both of referencedata  and  metadata  so if your application includes custom flow controllers that\nuse  options  you will need to refactor these to use the new x-data arguments instead.  referencedata  and  metadata  between them have all data previously in options, so the refactor\nhere should be relatively painless.", 
            "title": "Moving from options to referencedata and metadata"
        }, 
        {
            "location": "/reference/upgrading/#date-of-birth-fields-in-forms", 
            "text": "The partial  partials/_date_of_birth_field.html  has been removed and replaced with the {% date_of_birth_field %}  templatetag in the forms library. You should update any forms\nto use this new tag.", 
            "title": "Date of birth fields in forms"
        }, 
        {
            "location": "/reference/upgrading/#5x-6x", 
            "text": "", 
            "title": "5.x -&gt; 6.x"
        }, 
        {
            "location": "/reference/upgrading/#upgrading-opal_1", 
            "text": "How you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work.  # requirements.txt\nopal==0.6.0  After re-installing (via for instance  pip install -r requirements.txt ) you will need to\nrun the migrations for OPAL 0.6.x  $ python manage.py migrate opal", 
            "title": "Upgrading OPAL"
        }, 
        {
            "location": "/reference/upgrading/#changes-to-abstract-models", 
            "text": "If you are inheriting from the abstract models in OPAL e.g.  Demographics  then you should\nrun a makemigrations command to update to the 0.6.x data model.  python manage.py makemigrations yourapp\npython manage.py migrate yourapp  You should note that as of OPAL 0.6.x  Demographics  now splits names into first, surname,\nmiddle name and title. The previous  name  field will be converted to be  first_name .  Strategies for updating your data to use the appropriate fields will vary from application\nto application, but one good such strategy is to use a data migration  such as the one done\nhere .", 
            "title": "Changes to abstract models"
        }, 
        {
            "location": "/reference/upgrading/#update-settings", 
            "text": "Many of the default OPAL templates now assume that the  'opal.context_processors.models' \nContext Processor is available - you should add that to the  TEMPLATE_CONTEXT_PROCESSORS \nsetting in your application's  settings.py  The default date formats in OPAL have changed - and so you should update your  DATE_X \nsettings to match:  DATE_FORMAT = 'd/m/Y'\nDATE_INPUT_FORMATS = ['%d/%m/%Y']\nDATETIME_FORMAT = 'd/m/Y H:i:s'\nDATETIME_INPUT_FORMATS = ['%d/%m/%Y %H:%M:%S']", 
            "title": "Update settings"
        }, 
        {
            "location": "/reference/upgrading/#upgrade-plugins", 
            "text": "A number of OPAL plugins have new releases to work with the changes in OPAL 0.6.x   opal-referral - Upgrade to 0.1.4  opal-wardround - Upgrade to 0.6.0  opal-observations - Upgrade to 0.1.2  opal-dischargesummary - Upgrade to 0.2.0  opal-dashboard - Upgrade to 0.1.3   Meanwhile the  opal-taskrunner  plugin has now been deprecated, this functionality now\nliving natively within OPAL core.", 
            "title": "Upgrade plugins"
        }, 
        {
            "location": "/reference/upgrading/#update-your-teams-to-be-patientlists", 
            "text": "Patient Lists are now driven by subclasses of  opal.core.PatientList , so we will need\nto convert your Teams to be PatientLists. You may want to re-enable the Team admin while\nyou do so - this is simple, by updating your application's  admin.py :  # yourapp/admin.py\n...\nfrom opal.admin import TeamAdmin\nfrom opal.models import Team\nadmin.site.register(Team, TeamAdmin)  Patient lists are now declarative. For instance, to replicate the following team:   We would convert that to:  # yourapp/patient*lists.py\nfrom opal.core import patient_lists\n\nclass RespiratoryList(patient_lists.TaggedPatientList):\n    display_name = 'Respiratory'\n    tag          = 'respiratory'\n    order        = 4\n    schema       = [models.Demographics, models.Treatment]  The schema property will likely be available to you in your application's  schema.py \nfile - which is now obsolete.  See the  full patient list documentation  for further details\nof the options available for Patient Lists.", 
            "title": "Update your Teams to be PatientLists"
        }, 
        {
            "location": "/reference/upgrading/#form-and-display-templates", 
            "text": "We may now be missing some form or display templates, as your application may be\nrelying on templates previously in OPAL. To discover which these are, run  $ opal scaffold --dry-run  You may either create templates by hand, or have OPAL generate boilerplate templates for you\nby running  $ opal scaffold .  Modal templates already in your application will likely be referencing invalid paths\nto their Angular variables. You should update these to include the record name - for example:  !-- Was -- \n{% input  label= Drug  model= editing.drug  lookuplist= antimicrobial_list  %} !-- Becomes -- \n{% input  label= Drug  model= editing.treatment.drug  lookuplist= antimicrobial_list  %}", 
            "title": "Form and Display templates."
        }, 
        {
            "location": "/reference/upgrading/#the-inpatient-episode-category", 
            "text": "The default Episode Category - Inpatient episodes has updated it's database identifier\nfrom  inpatient  to  Inpatient . To update your episodes run :   from opal.models import Episode  for e in Episode.objects.filter(category='inpatient'):\n...   e.category='Inpatient'\n...   e.save()\n...  Any references to episode category in templates (for e.g. ng-hide) or controllers for logic\nwill also require updates.", 
            "title": "The Inpatient episode category"
        }, 
        {
            "location": "/reference/upgrading/#flow-is-now-defined-in-js", 
            "text": "Flow is no longer defined on the server side in python, but rather is a javascript service.\nSee the documentation for information about setting up custom flows. At a minimum applications\nthat use custom flows will have to implement their own flow service and reference it in their\nsettings.", 
            "title": "Flow is now defined in JS"
        }, 
        {
            "location": "/reference/upgrading/#4x-5x", 
            "text": "", 
            "title": "4.X -&gt; 5.x"
        }, 
        {
            "location": "/reference/upgrading/#migrations", 
            "text": "Before upgrading from 4.x to 5.x you should ensure that you have upgraded from South\nto Djangomigrations.  $ rm yourapp/migrations/*\n$ python manage.py makemigrations yourapp\n$ python manage.py migrate yourapp --fake-initial", 
            "title": "Migrations"
        }, 
        {
            "location": "/reference/upgrading/#opal", 
            "text": "Next you will need to upgrade the OPAL version itself.  How you do this depends on how you have configured your application, but updating your\nrequirements.txt to update the version should work. This will also update FFS and Django\nAxes as well as adding Python Dateutil.  -e git://github.com/openhealthcare/opal.git@v0.5.6#egg=opal", 
            "title": "OPAL"
        }, 
        {
            "location": "/reference/upgrading/#migrations_1", 
            "text": "OPAL has fresh migrations in 0.5.x, which we should run. There are also changes to the\nbase abstract model classes (to add created/updated timestamps) so you'll need to create\nfresh migrations for your own application.  $ python manage.py migrate\n$ python manage.py makemigrations yourapp\n$ python manage.py migrate yourapp  At this stage you'll want to commit your new migrations, as well as any changes to your\napplication's requirements file.", 
            "title": "Migrations."
        }, 
        {
            "location": "/reference/upgrading/#tags", 
            "text": "As of 0.5.5, old tags in OPAL are stored directly on the Tagging model rather than via\nDjano Reversion. We can import those old tags by doing the following.  $ python manage.py shell  from opal.models import Tagging  Tagging.import_from_reversion()", 
            "title": "Tags"
        }, 
        {
            "location": "/reference/upgrading/#deployment", 
            "text": "The first time you deploy your upgraded application you'll need to run the following\ncommands to upgrade your database:  $ python manage.py migrate --fake-initial  You'll also have to repeat the Tagging step once for each deployment.", 
            "title": "Deployment"
        }
    ]
}